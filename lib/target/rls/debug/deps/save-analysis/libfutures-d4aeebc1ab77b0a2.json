{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29","program":"/home/ken/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures","/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_std\"","--cfg","feature=\"with-deprecated\"","-C","metadata=d4aeebc1ab77b0a2","-C","extra-filename=-d4aeebc1ab77b0a2","--out-dir","/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps","-L","dependency=/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ken/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps/libfutures-d4aeebc1ab77b0a2.rmeta"},"prelude":{"crate_id":{"name":"futures","disambiguator":[9446116137023340544,12197741093633693551]},"crate_root":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src","external_crates":[{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}}],"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":0,"byte_end":9267,"line_start":1,"line_end":265,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6487,"byte_end":6491,"line_start":175,"line_end":175,"column_start":16,"column_end":20},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6493,"byte_end":6498,"line_start":175,"line_end":175,"column_start":22,"column_end":27},"alias_span":null,"name":"Async","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6500,"byte_end":6509,"line_start":175,"line_end":175,"column_start":29,"column_end":38},"alias_span":null,"name":"AsyncSink","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6511,"byte_end":6520,"line_start":175,"line_end":175,"column_start":40,"column_end":49},"alias_span":null,"name":"StartSend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12813,"byte_end":12818,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3056},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12820,"byte_end":12825,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12849,"byte_end":12853,"line_start":18,"line_end":18,"column_start":22,"column_end":26},"alias_span":null,"name":"lazy","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3064},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12855,"byte_end":12859,"line_start":18,"line_end":18,"column_start":28,"column_end":32},"alias_span":null,"name":"Lazy","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12886,"byte_end":12893,"line_start":19,"line_end":19,"column_start":25,"column_end":32},"alias_span":null,"name":"poll_fn","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3087},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12895,"byte_end":12901,"line_start":19,"line_end":19,"column_start":34,"column_end":40},"alias_span":null,"name":"PollFn","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12928,"byte_end":12934,"line_start":20,"line_end":20,"column_start":25,"column_end":31},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12936,"byte_end":12938,"line_start":20,"line_end":20,"column_start":33,"column_end":35},"alias_span":null,"name":"ok","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12940,"byte_end":12943,"line_start":20,"line_end":20,"column_start":37,"column_end":40},"alias_span":null,"name":"err","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12945,"byte_end":12957,"line_start":20,"line_end":20,"column_start":42,"column_end":54},"alias_span":null,"name":"FutureResult","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12984,"byte_end":12991,"line_start":21,"line_end":21,"column_start":25,"column_end":32},"alias_span":null,"name":"loop_fn","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3105},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12993,"byte_end":12997,"line_start":21,"line_end":21,"column_start":34,"column_end":38},"alias_span":null,"name":"Loop","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3118},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":12999,"byte_end":13005,"line_start":21,"line_end":21,"column_start":40,"column_end":46},"alias_span":null,"name":"LoopFn","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13133,"byte_end":13135,"line_start":26,"line_end":26,"column_start":16,"column_end":18},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13139,"byte_end":13147,"line_start":26,"line_end":26,"column_start":22,"column_end":30},"name":"finished","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13149,"byte_end":13151,"line_start":26,"line_end":26,"column_start":32,"column_end":34},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13155,"byte_end":13163,"line_start":26,"line_end":26,"column_start":38,"column_end":46},"name":"Finished","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13291,"byte_end":13294,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13298,"byte_end":13304,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"name":"failed","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13306,"byte_end":13309,"line_start":30,"line_end":30,"column_start":31,"column_end":34},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13313,"byte_end":13319,"line_start":30,"line_end":30,"column_start":38,"column_end":44},"name":"Failed","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":1,"index":5244},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13450,"byte_end":13456,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13460,"byte_end":13464,"line_start":34,"line_end":34,"column_start":26,"column_end":30},"name":"done","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13466,"byte_end":13478,"line_start":34,"line_end":34,"column_start":32,"column_end":44},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13482,"byte_end":13486,"line_start":34,"line_end":34,"column_start":48,"column_end":52},"name":"Done","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13623,"byte_end":13635,"line_start":38,"line_end":38,"column_start":16,"column_end":28},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13639,"byte_end":13641,"line_start":38,"line_end":38,"column_start":32,"column_end":34},"name":"Ok","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13778,"byte_end":13790,"line_start":42,"line_end":42,"column_start":16,"column_end":28},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":13794,"byte_end":13797,"line_start":42,"line_end":42,"column_start":32,"column_end":35},"name":"Err","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3127},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14062,"byte_end":14069,"line_start":64,"line_end":64,"column_start":25,"column_end":32},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14094,"byte_end":14101,"line_start":65,"line_end":65,"column_start":24,"column_end":31},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14133,"byte_end":14146,"line_start":66,"line_end":66,"column_start":31,"column_end":44},"alias_span":null,"name":"FlattenStream","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3152},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14168,"byte_end":14172,"line_start":67,"line_end":67,"column_start":21,"column_end":25},"alias_span":null,"name":"Fuse","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3158},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14201,"byte_end":14211,"line_start":68,"line_end":68,"column_start":28,"column_end":38},"alias_span":null,"name":"IntoStream","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3164},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14234,"byte_end":14238,"line_start":69,"line_end":69,"column_start":22,"column_end":26},"alias_span":null,"name":"Join","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3193},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14240,"byte_end":14245,"line_start":69,"line_end":69,"column_start":28,"column_end":33},"alias_span":null,"name":"Join3","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3229},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14247,"byte_end":14252,"line_start":69,"line_end":69,"column_start":35,"column_end":40},"alias_span":null,"name":"Join4","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14254,"byte_end":14259,"line_start":69,"line_end":69,"column_start":42,"column_end":47},"alias_span":null,"name":"Join5","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3335},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14281,"byte_end":14284,"line_start":70,"line_end":70,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3344},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14309,"byte_end":14315,"line_start":71,"line_end":71,"column_start":24,"column_end":30},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3353},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14341,"byte_end":14348,"line_start":72,"line_end":72,"column_start":25,"column_end":32},"alias_span":null,"name":"FromErr","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3362},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14373,"byte_end":14379,"line_start":73,"line_end":73,"column_start":24,"column_end":30},"alias_span":null,"name":"OrElse","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3372},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14404,"byte_end":14410,"line_start":74,"line_end":74,"column_start":24,"column_end":30},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3380},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14412,"byte_end":14422,"line_start":74,"line_end":74,"column_start":32,"column_end":42},"alias_span":null,"name":"SelectNext","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14448,"byte_end":14455,"line_start":75,"line_end":75,"column_start":24,"column_end":31},"alias_span":null,"name":"Select2","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3409},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14477,"byte_end":14481,"line_start":76,"line_end":76,"column_start":21,"column_end":25},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3419},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14505,"byte_end":14511,"line_start":77,"line_end":77,"column_start":23,"column_end":29},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3432},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14536,"byte_end":14543,"line_start":78,"line_end":78,"column_start":24,"column_end":31},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3665},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14683,"byte_end":14694,"line_start":86,"line_end":86,"column_start":33,"column_end":44},"alias_span":null,"name":"CatchUnwind","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3498},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14725,"byte_end":14733,"line_start":87,"line_end":87,"column_start":30,"column_end":38},"alias_span":null,"name":"join_all","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3492},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14735,"byte_end":14742,"line_start":87,"line_end":87,"column_start":40,"column_end":47},"alias_span":null,"name":"JoinAll","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14776,"byte_end":14785,"line_start":88,"line_end":88,"column_start":32,"column_end":41},"alias_span":null,"name":"SelectAll","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3515},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14787,"byte_end":14800,"line_start":88,"line_end":88,"column_start":43,"column_end":56},"alias_span":null,"name":"SelectAllNext","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3517},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14802,"byte_end":14812,"line_start":88,"line_end":88,"column_start":58,"column_end":68},"alias_span":null,"name":"select_all","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14845,"byte_end":14853,"line_start":89,"line_end":89,"column_start":31,"column_end":39},"alias_span":null,"name":"SelectOk","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3534},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14855,"byte_end":14864,"line_start":89,"line_end":89,"column_start":41,"column_end":50},"alias_span":null,"name":"select_ok","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3567},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14894,"byte_end":14900,"line_start":90,"line_end":90,"column_start":28,"column_end":34},"alias_span":null,"name":"Shared","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14902,"byte_end":14912,"line_start":90,"line_end":90,"column_start":36,"column_end":46},"alias_span":null,"name":"SharedItem","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":14914,"byte_end":14925,"line_start":90,"line_end":90,"column_start":48,"column_end":59},"alias_span":null,"name":"SharedError","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3498},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15082,"byte_end":15090,"line_start":95,"line_end":95,"column_start":29,"column_end":37},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15094,"byte_end":15101,"line_start":95,"line_end":95,"column_start":41,"column_end":48},"name":"collect","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":3492},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15255,"byte_end":15262,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15266,"byte_end":15273,"line_start":99,"line_end":99,"column_start":40,"column_end":47},"name":"Collect","value":"","parent":{"krate":0,"index":45}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6557,"byte_end":6563,"line_start":178,"line_end":178,"column_start":18,"column_end":24},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6565,"byte_end":6575,"line_start":178,"line_end":178,"column_start":26,"column_end":36},"alias_span":null,"name":"IntoFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":587},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90644,"byte_end":90648,"line_start":22,"line_end":22,"column_start":22,"column_end":26},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3726},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90650,"byte_end":90654,"line_start":22,"line_end":22,"column_start":28,"column_end":32},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3726},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90728,"byte_end":90732,"line_start":25,"line_end":25,"column_start":15,"column_end":19},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90736,"byte_end":90746,"line_start":25,"line_end":25,"column_start":23,"column_end":33},"name":"IterStream","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":608},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90785,"byte_end":90792,"line_start":27,"line_end":27,"column_start":25,"column_end":32},"alias_span":null,"name":"iter_ok","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3733},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90794,"byte_end":90800,"line_start":27,"line_end":27,"column_start":34,"column_end":40},"alias_span":null,"name":"IterOk","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":625},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90848,"byte_end":90859,"line_start":29,"line_end":29,"column_start":29,"column_end":40},"alias_span":null,"name":"iter_result","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3742},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90861,"byte_end":90871,"line_start":29,"line_end":29,"column_start":42,"column_end":52},"alias_span":null,"name":"IterResult","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90910,"byte_end":90916,"line_start":32,"line_end":32,"column_start":24,"column_end":30},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3748},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":90918,"byte_end":90924,"line_start":32,"line_end":32,"column_start":32,"column_end":38},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3757},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91318,"byte_end":91325,"line_start":64,"line_end":64,"column_start":25,"column_end":32},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3785},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91348,"byte_end":91353,"line_start":65,"line_end":65,"column_start":22,"column_end":27},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":732},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91398,"byte_end":91404,"line_start":67,"line_end":67,"column_start":23,"column_end":29},"alias_span":null,"name":"Concat","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":718},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91428,"byte_end":91435,"line_start":68,"line_end":68,"column_start":23,"column_end":30},"alias_span":null,"name":"Concat2","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3812},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91459,"byte_end":91464,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":759},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91466,"byte_end":91471,"line_start":69,"line_end":69,"column_start":30,"column_end":35},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3820},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91496,"byte_end":91502,"line_start":70,"line_end":70,"column_start":23,"column_end":29},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3829},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91530,"byte_end":91539,"line_start":71,"line_end":71,"column_start":27,"column_end":36},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91564,"byte_end":91571,"line_start":72,"line_end":72,"column_start":24,"column_end":31},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3845},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91593,"byte_end":91597,"line_start":73,"line_end":73,"column_start":21,"column_end":25},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3874},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91623,"byte_end":91630,"line_start":74,"line_end":74,"column_start":25,"column_end":32},"alias_span":null,"name":"ForEach","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3886},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91656,"byte_end":91663,"line_start":75,"line_end":75,"column_start":25,"column_end":32},"alias_span":null,"name":"FromErr","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3895},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91685,"byte_end":91689,"line_start":76,"line_end":76,"column_start":21,"column_end":25},"alias_span":null,"name":"Fuse","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3902},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91713,"byte_end":91725,"line_start":77,"line_end":77,"column_start":23,"column_end":35},"alias_span":null,"name":"StreamFuture","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3908},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91750,"byte_end":91757,"line_start":78,"line_end":78,"column_start":24,"column_end":31},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3917},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91786,"byte_end":91796,"line_start":79,"line_end":79,"column_start":28,"column_end":38},"alias_span":null,"name":"InspectErr","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3926},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91817,"byte_end":91820,"line_start":80,"line_end":80,"column_start":20,"column_end":23},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3935},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91845,"byte_end":91851,"line_start":81,"line_end":81,"column_start":24,"column_end":30},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3944},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91896,"byte_end":91901,"line_start":83,"line_end":83,"column_start":23,"column_end":28},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3954},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91903,"byte_end":91913,"line_start":83,"line_end":83,"column_start":30,"column_end":40},"alias_span":null,"name":"MergedItem","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3971},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91937,"byte_end":91941,"line_start":84,"line_end":84,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1095},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91943,"byte_end":91947,"line_start":84,"line_end":84,"column_start":28,"column_end":32},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3980},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":91973,"byte_end":91979,"line_start":85,"line_end":85,"column_start":24,"column_end":30},"alias_span":null,"name":"OrElse","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3992},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92001,"byte_end":92009,"line_start":86,"line_end":86,"column_start":21,"column_end":29},"alias_span":null,"name":"Peekable","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92035,"byte_end":92042,"line_start":87,"line_end":87,"column_start":25,"column_end":32},"alias_span":null,"name":"poll_fn","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":3999},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92044,"byte_end":92050,"line_start":87,"line_end":87,"column_start":34,"column_end":40},"alias_span":null,"name":"PollFn","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4005},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92075,"byte_end":92081,"line_start":88,"line_end":88,"column_start":23,"column_end":29},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4015},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92103,"byte_end":92107,"line_start":89,"line_end":89,"column_start":21,"column_end":25},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4022},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92135,"byte_end":92144,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"alias_span":null,"name":"SkipWhile","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4035},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92166,"byte_end":92170,"line_start":91,"line_end":91,"column_start":21,"column_end":25},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4042},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92198,"byte_end":92207,"line_start":92,"line_end":92,"column_start":27,"column_end":36},"alias_span":null,"name":"TakeWhile","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4055},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92229,"byte_end":92233,"line_start":93,"line_end":93,"column_start":21,"column_end":25},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4067},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92258,"byte_end":92264,"line_start":94,"line_end":94,"column_start":24,"column_end":30},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1337},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92266,"byte_end":92272,"line_start":94,"line_end":94,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92294,"byte_end":92297,"line_start":95,"line_end":95,"column_start":20,"column_end":23},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4104},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92322,"byte_end":92329,"line_start":96,"line_end":96,"column_start":24,"column_end":31},"alias_span":null,"name":"Forward","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4125},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92603,"byte_end":92611,"line_start":112,"line_end":112,"column_start":29,"column_end":37},"alias_span":null,"name":"Buffered","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4162},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92649,"byte_end":92664,"line_start":113,"line_end":113,"column_start":37,"column_end":52},"alias_span":null,"name":"BufferUnordered","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4632},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92698,"byte_end":92709,"line_start":114,"line_end":114,"column_start":33,"column_end":44},"alias_span":null,"name":"CatchUnwind","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4650},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92737,"byte_end":92743,"line_start":115,"line_end":115,"column_start":27,"column_end":33},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4659},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92772,"byte_end":92779,"line_start":116,"line_end":116,"column_start":28,"column_end":35},"alias_span":null,"name":"Collect","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4666},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92805,"byte_end":92809,"line_start":117,"line_end":117,"column_start":25,"column_end":29},"alias_span":null,"name":"Wait","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4696},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92837,"byte_end":92848,"line_start":118,"line_end":118,"column_start":27,"column_end":38},"alias_span":null,"name":"SplitStream","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92850,"byte_end":92859,"line_start":118,"line_end":118,"column_start":40,"column_end":49},"alias_span":null,"name":"SplitSink","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4357},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92861,"byte_end":92873,"line_start":118,"line_end":118,"column_start":51,"column_end":63},"alias_span":null,"name":"ReuniteError","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4406},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92913,"byte_end":92929,"line_start":119,"line_end":119,"column_start":38,"column_end":54},"alias_span":null,"name":"FuturesUnordered","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4581},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92967,"byte_end":92982,"line_start":120,"line_end":120,"column_start":37,"column_end":52},"alias_span":null,"name":"futures_ordered","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4575},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92984,"byte_end":92998,"line_start":120,"line_end":120,"column_start":54,"column_end":68},"alias_span":null,"name":"FuturesOrdered","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4287},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93114,"byte_end":93121,"line_start":125,"line_end":125,"column_start":29,"column_end":36},"alias_span":null,"name":"channel","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4672},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93123,"byte_end":93129,"line_start":125,"line_end":125,"column_start":38,"column_end":44},"alias_span":null,"name":"Sender","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4680},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93131,"byte_end":93139,"line_start":125,"line_end":125,"column_start":46,"column_end":54},"alias_span":null,"name":"Receiver","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93141,"byte_end":93153,"line_start":125,"line_end":125,"column_start":56,"column_end":68},"alias_span":null,"name":"FutureSender","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":4290},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93155,"byte_end":93164,"line_start":125,"line_end":125,"column_start":70,"column_end":79},"alias_span":null,"name":"SendError","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6611,"byte_end":6617,"line_start":181,"line_end":181,"column_start":17,"column_end":23},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4881},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":208443,"byte_end":208449,"line_start":30,"line_end":30,"column_start":27,"column_end":33},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4889},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":208475,"byte_end":208479,"line_start":31,"line_end":31,"column_start":25,"column_end":29},"alias_span":null,"name":"Wait","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4710},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209861,"byte_end":209865,"line_start":77,"line_end":77,"column_start":21,"column_end":25},"alias_span":null,"name":"With","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4750},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209896,"byte_end":209907,"line_start":78,"line_end":78,"column_start":30,"column_end":41},"alias_span":null,"name":"WithFlatMap","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4766},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209930,"byte_end":209935,"line_start":79,"line_end":79,"column_start":22,"column_end":27},"alias_span":null,"name":"Flush","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4785},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209957,"byte_end":209961,"line_start":80,"line_end":80,"column_start":21,"column_end":25},"alias_span":null,"name":"Send","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4792},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209987,"byte_end":209994,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"alias_span":null,"name":"SendAll","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4802},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":210019,"byte_end":210029,"line_start":82,"line_end":82,"column_start":24,"column_end":34},"alias_span":null,"name":"SinkMapErr","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":4772},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":210055,"byte_end":210066,"line_start":83,"line_end":83,"column_start":25,"column_end":36},"alias_span":null,"name":"SinkFromErr","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":1754},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":210090,"byte_end":210096,"line_start":84,"line_end":84,"column_start":23,"column_end":29},"alias_span":null,"name":"Fanout","value":"","parent":{"krate":0,"index":1518}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6648,"byte_end":6652,"line_start":184,"line_end":184,"column_start":15,"column_end":19},"alias_span":null,"name":"Sink","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6805,"byte_end":6809,"line_start":189,"line_end":189,"column_start":18,"column_end":22},"alias_span":null,"name":"done","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6811,"byte_end":6816,"line_start":189,"line_end":189,"column_start":24,"column_end":29},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6818,"byte_end":6824,"line_start":189,"line_end":189,"column_start":31,"column_end":37},"alias_span":null,"name":"failed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6826,"byte_end":6834,"line_start":189,"line_end":189,"column_start":39,"column_end":47},"alias_span":null,"name":"finished","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6836,"byte_end":6840,"line_start":189,"line_end":189,"column_start":49,"column_end":53},"alias_span":null,"name":"lazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6999,"byte_end":7003,"line_start":195,"line_end":195,"column_start":5,"column_end":9},"alias_span":null,"name":"Done","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3056},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7005,"byte_end":7010,"line_start":195,"line_end":195,"column_start":11,"column_end":16},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7012,"byte_end":7018,"line_start":195,"line_end":195,"column_start":18,"column_end":24},"alias_span":null,"name":"Failed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7020,"byte_end":7028,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"alias_span":null,"name":"Finished","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3064},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7030,"byte_end":7034,"line_start":195,"line_end":195,"column_start":36,"column_end":40},"alias_span":null,"name":"Lazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3127},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7036,"byte_end":7043,"line_start":195,"line_end":195,"column_start":42,"column_end":49},"alias_span":null,"name":"AndThen","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7045,"byte_end":7052,"line_start":195,"line_end":195,"column_start":51,"column_end":58},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7054,"byte_end":7067,"line_start":195,"line_end":195,"column_start":60,"column_end":73},"alias_span":null,"name":"FlattenStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3152},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7069,"byte_end":7073,"line_start":195,"line_end":195,"column_start":75,"column_end":79},"alias_span":null,"name":"Fuse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3158},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7075,"byte_end":7085,"line_start":195,"line_end":195,"column_start":81,"column_end":91},"alias_span":null,"name":"IntoStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3164},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7091,"byte_end":7095,"line_start":196,"line_end":196,"column_start":5,"column_end":9},"alias_span":null,"name":"Join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3193},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7097,"byte_end":7102,"line_start":196,"line_end":196,"column_start":11,"column_end":16},"alias_span":null,"name":"Join3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3229},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7104,"byte_end":7109,"line_start":196,"line_end":196,"column_start":18,"column_end":23},"alias_span":null,"name":"Join4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7111,"byte_end":7116,"line_start":196,"line_end":196,"column_start":25,"column_end":30},"alias_span":null,"name":"Join5","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3335},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7118,"byte_end":7121,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3344},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7123,"byte_end":7129,"line_start":196,"line_end":196,"column_start":37,"column_end":43},"alias_span":null,"name":"MapErr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3362},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7131,"byte_end":7137,"line_start":196,"line_end":196,"column_start":45,"column_end":51},"alias_span":null,"name":"OrElse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3372},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7139,"byte_end":7145,"line_start":196,"line_end":196,"column_start":53,"column_end":59},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3380},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7151,"byte_end":7161,"line_start":197,"line_end":197,"column_start":5,"column_end":15},"alias_span":null,"name":"SelectNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3409},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7163,"byte_end":7167,"line_start":197,"line_end":197,"column_start":17,"column_end":21},"alias_span":null,"name":"Then","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338172,"byte_end":338177,"line_start":34,"line_end":34,"column_start":21,"column_end":26},"alias_span":null,"name":"Spawn","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338179,"byte_end":338184,"line_start":34,"line_end":34,"column_start":28,"column_end":33},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2144},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338186,"byte_end":338192,"line_start":34,"line_end":34,"column_start":35,"column_end":41},"alias_span":null,"name":"Unpark","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2146},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338194,"byte_end":338202,"line_start":34,"line_end":34,"column_start":43,"column_end":51},"alias_span":null,"name":"Executor","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2148},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338204,"byte_end":338207,"line_start":34,"line_end":34,"column_start":53,"column_end":56},"alias_span":null,"name":"Run","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2222},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338209,"byte_end":338213,"line_start":34,"line_end":34,"column_start":58,"column_end":62},"alias_span":null,"name":"park","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":4997},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338237,"byte_end":338241,"line_start":36,"line_end":36,"column_start":21,"column_end":25},"alias_span":null,"name":"Task","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":1907},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338243,"byte_end":338253,"line_start":36,"line_end":36,"column_start":27,"column_end":37},"alias_span":null,"name":"AtomicTask","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2220},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338255,"byte_end":338262,"line_start":36,"line_end":36,"column_start":39,"column_end":46},"alias_span":null,"name":"current","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":1966},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338264,"byte_end":338268,"line_start":36,"line_end":36,"column_start":48,"column_end":52},"alias_span":null,"name":"init","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2087},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338270,"byte_end":338280,"line_start":36,"line_end":36,"column_start":54,"column_end":64},"alias_span":null,"name":"is_in_task","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":4924},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338353,"byte_end":338361,"line_start":40,"line_end":40,"column_start":21,"column_end":29},"alias_span":null,"name":"LocalKey","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2175},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338363,"byte_end":338380,"line_start":40,"line_end":40,"column_start":31,"column_end":48},"alias_span":null,"name":"with_unpark_event","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":4992},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338382,"byte_end":338393,"line_start":40,"line_end":40,"column_start":50,"column_end":61},"alias_span":null,"name":"UnparkEvent","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2184},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338395,"byte_end":338403,"line_start":40,"line_end":40,"column_start":63,"column_end":71},"alias_span":null,"name":"EventSet","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":4931},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":338608,"byte_end":338614,"line_start":46,"line_end":46,"column_start":20,"column_end":26},"alias_span":null,"name":"TaskRc","value":"","parent":{"krate":0,"index":2330}},{"kind":"Use","ref_id":{"krate":0,"index":2144},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339024,"byte_end":339030,"line_start":13,"line_end":13,"column_start":21,"column_end":27},"alias_span":null,"name":"Unpark","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2146},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339032,"byte_end":339040,"line_start":13,"line_end":13,"column_start":29,"column_end":37},"alias_span":null,"name":"Executor","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2148},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339042,"byte_end":339045,"line_start":13,"line_end":13,"column_start":39,"column_end":42},"alias_span":null,"name":"Run","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339069,"byte_end":339074,"line_start":15,"line_end":15,"column_start":21,"column_end":26},"alias_span":null,"name":"Spawn","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339076,"byte_end":339081,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2271},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339083,"byte_end":339089,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"alias_span":null,"name":"Notify","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2275},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339091,"byte_end":339102,"line_start":15,"line_end":15,"column_start":43,"column_end":54},"alias_span":null,"name":"with_notify","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2281},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339126,"byte_end":339138,"line_start":17,"line_end":17,"column_start":21,"column_end":33},"alias_span":null,"name":"UnsafeNotify","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":2284},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":339140,"byte_end":339152,"line_start":17,"line_end":17,"column_start":35,"column_end":47},"alias_span":null,"name":"NotifyHandle","value":"","parent":{"krate":0,"index":2350}},{"kind":"Use","ref_id":{"krate":0,"index":5160},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339732,"byte_end":339738,"line_start":17,"line_end":17,"column_start":24,"column_end":30},"alias_span":null,"name":"BiLock","value":"","parent":{"krate":0,"index":2363}},{"kind":"Use","ref_id":{"krate":0,"index":5173},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339740,"byte_end":339751,"line_start":17,"line_end":17,"column_start":32,"column_end":43},"alias_span":null,"name":"BiLockGuard","value":"","parent":{"krate":0,"index":2363}},{"kind":"Use","ref_id":{"krate":0,"index":5181},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339753,"byte_end":339766,"line_start":17,"line_end":17,"column_start":45,"column_end":58},"alias_span":null,"name":"BiLockAcquire","value":"","parent":{"krate":0,"index":2363}},{"kind":"Use","ref_id":{"krate":0,"index":5187},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339768,"byte_end":339782,"line_start":17,"line_end":17,"column_start":60,"column_end":74},"alias_span":null,"name":"BiLockAcquired","value":"","parent":{"krate":0,"index":2363}},{"kind":"Use","ref_id":{"krate":0,"index":5033},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":433156,"byte_end":433164,"line_start":62,"line_end":62,"column_start":24,"column_end":32},"alias_span":null,"name":"Canceled","value":"","parent":{"krate":0,"index":2927}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7541,"byte_end":7548,"line_start":218,"line_end":218,"column_start":28,"column_end":35},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7552,"byte_end":7559,"line_start":218,"line_end":218,"column_start":39,"column_end":46},"name":"oneshot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5012},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7729,"byte_end":7737,"line_start":223,"line_end":223,"column_start":28,"column_end":36},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7741,"byte_end":7748,"line_start":223,"line_end":223,"column_start":40,"column_end":47},"name":"Oneshot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7916,"byte_end":7922,"line_start":228,"line_end":228,"column_start":28,"column_end":34},"alias_span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7926,"byte_end":7934,"line_start":228,"line_end":228,"column_start":38,"column_end":46},"name":"Complete","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5033},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8104,"byte_end":8112,"line_start":233,"line_end":233,"column_start":28,"column_end":36},"alias_span":null,"name":"Canceled","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3657},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8306,"byte_end":8315,"line_start":239,"line_end":239,"column_start":22,"column_end":31},"alias_span":null,"name":"BoxFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3498},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8317,"byte_end":8324,"line_start":239,"line_end":239,"column_start":33,"column_end":40},"alias_span":null,"name":"collect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3517},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8326,"byte_end":8336,"line_start":239,"line_end":239,"column_start":42,"column_end":52},"alias_span":null,"name":"select_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3534},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8338,"byte_end":8347,"line_start":239,"line_end":239,"column_start":54,"column_end":63},"alias_span":null,"name":"select_ok","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8517,"byte_end":8526,"line_start":244,"line_end":244,"column_start":22,"column_end":31},"alias_span":null,"name":"SelectAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3515},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8528,"byte_end":8541,"line_start":244,"line_end":244,"column_start":33,"column_end":46},"alias_span":null,"name":"SelectAllNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3492},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8543,"byte_end":8550,"line_start":244,"line_end":244,"column_start":48,"column_end":55},"alias_span":null,"name":"Collect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":8552,"byte_end":8560,"line_start":244,"line_end":244,"column_start":57,"column_end":65},"alias_span":null,"name":"SelectOk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9162,"byte_end":9168,"line_start":262,"line_end":262,"column_start":14,"column_end":20},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9170,"byte_end":9176,"line_start":262,"line_end":262,"column_start":22,"column_end":28},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9178,"byte_end":9182,"line_start":262,"line_end":262,"column_start":30,"column_end":34},"alias_span":null,"name":"Sink","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":3018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9184,"byte_end":9189,"line_start":262,"line_end":262,"column_start":36,"column_end":41},"alias_span":null,"name":"Async","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9191,"byte_end":9200,"line_start":262,"line_end":262,"column_start":43,"column_end":52},"alias_span":null,"name":"AsyncSink","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9202,"byte_end":9206,"line_start":262,"line_end":262,"column_start":54,"column_end":58},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9208,"byte_end":9217,"line_start":262,"line_end":262,"column_start":60,"column_end":69},"alias_span":null,"name":"StartSend","value":"","parent":{"krate":0,"index":3008}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9254,"byte_end":9264,"line_start":264,"line_end":264,"column_start":13,"column_end":23},"alias_span":null,"name":"IntoFuture","value":"","parent":{"krate":0,"index":3008}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":0,"byte_end":9267,"line_start":1,"line_end":265,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":40},{"krate":0,"index":45},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1835},{"krate":0,"index":1856},{"krate":0,"index":1889},{"krate":0,"index":2315},{"krate":0,"index":2330},{"krate":0,"index":2350},{"krate":0,"index":2363},{"krate":0,"index":2787},{"krate":0,"index":5270},{"krate":0,"index":5271},{"krate":0,"index":5272},{"krate":0,"index":5273},{"krate":0,"index":5274},{"krate":0,"index":5279},{"krate":0,"index":3008}],"decl_id":null,"docs":" Zero-cost Futures in Rust","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6163,"byte_end":6173,"line_start":158,"line_end":158,"column_start":1,"column_end":11}},{"value":"deny(missing_docs, missing_debug_implementations)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6174,"byte_end":6227,"line_start":159,"line_end":159,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10014,"byte_end":10018,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"Poll","qualname":"::poll::Poll","value":"Result<Async<T>, E>","parent":null,"children":[],"decl_id":null,"docs":" Return type of the `Future::poll` method, indicates whether a future's value\n is ready or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3020},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10239,"byte_end":10244,"line_start":26,"line_end":26,"column_start":5,"column_end":10},"name":"Ready","qualname":"::poll::Async::Ready","value":"Async::Ready(T)","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" Represents that a value is immediately ready.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3023},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10325,"byte_end":10333,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::poll::Async::NotReady","value":"Async::NotReady","parent":{"krate":0,"index":3018},"children":[],"decl_id":null,"docs":" Represents that a value is not ready yet, but may be so later.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10170,"byte_end":10175,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Async","qualname":"::poll::Async","value":"Async::{Ready, NotReady}","parent":null,"children":[{"krate":0,"index":3020},{"krate":0,"index":3023}],"decl_id":null,"docs":" Return type of future, indicating whether a value is ready or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10443,"byte_end":10446,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"map","qualname":"<Async<T>>::map","value":"fn <F, U> (self, f: F) -> Async<U>","parent":null,"children":[],"decl_id":null,"docs":" Change the success value of this `Async` with the closure provided\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10710,"byte_end":10718,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"is_ready","qualname":"<Async<T>>::is_ready","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this is `Async::Ready`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10911,"byte_end":10923,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"is_not_ready","qualname":"<Async<T>>::is_not_ready","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this is `Async::NotReady`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3039},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11375,"byte_end":11380,"line_start":69,"line_end":69,"column_start":5,"column_end":10},"name":"Ready","qualname":"::poll::AsyncSink::Ready","value":"AsyncSink::Ready","parent":{"krate":0,"index":3037},"children":[],"decl_id":null,"docs":" The `start_send` attempt succeeded, so the sending process has\n *started*; you must use `Sink::poll_complete` to drive the send\n to completion.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3041},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11589,"byte_end":11597,"line_start":74,"line_end":74,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::poll::AsyncSink::NotReady","value":"AsyncSink::NotReady(T)","parent":{"krate":0,"index":3037},"children":[],"decl_id":null,"docs":" The `start_send` attempt failed due to the sink being full. The value\n being sent is returned, and the current `Task` will be automatically\n notified again once the sink has room.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3037},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11190,"byte_end":11199,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"AsyncSink","qualname":"::poll::AsyncSink","value":"AsyncSink::{Ready, NotReady}","parent":null,"children":[{"krate":0,"index":3039},{"krate":0,"index":3041}],"decl_id":null,"docs":" The result of an asynchronous attempt to send a value to a sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11719,"byte_end":11722,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"map","qualname":"<AsyncSink<T>>::map","value":"fn <F, U> (self, f: F) -> AsyncSink<U>","parent":null,"children":[],"decl_id":null,"docs":" Change the NotReady value of this `AsyncSink` with the closure provided\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":12011,"byte_end":12019,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_ready","qualname":"<AsyncSink<T>>::is_ready","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this is `AsyncSink::Ready`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":12224,"byte_end":12236,"line_start":97,"line_end":97,"column_start":12,"column_end":24},"name":"is_not_ready","qualname":"<AsyncSink<T>>::is_not_ready","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this is `AsyncSink::NotReady`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":12428,"byte_end":12437,"line_start":105,"line_end":105,"column_start":10,"column_end":19},"name":"StartSend","qualname":"::poll::StartSend","value":"Result<AsyncSink<T>, E>","parent":null,"children":[],"decl_id":null,"docs":" Return type of the `Sink::start_send` method, indicating the outcome of a\n send attempt. See `AsyncSink` for more details.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":45},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":63},{"krate":0,"index":82},{"krate":0,"index":97},{"krate":0,"index":122},{"krate":0,"index":141},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":168},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":204},{"krate":0,"index":225},{"krate":0,"index":245},{"krate":0,"index":261},{"krate":0,"index":275},{"krate":0,"index":288},{"krate":0,"index":303},{"krate":0,"index":318},{"krate":0,"index":333},{"krate":0,"index":351},{"krate":0,"index":371},{"krate":0,"index":386},{"krate":0,"index":404},{"krate":0,"index":426},{"krate":0,"index":440},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":3459},{"krate":0,"index":3483},{"krate":0,"index":3507},{"krate":0,"index":3526},{"krate":0,"index":3543},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3644},{"krate":0,"index":3648},{"krate":0,"index":3651},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3660},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":536},{"krate":0,"index":541},{"krate":0,"index":547},{"krate":0,"index":554},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":3712},{"krate":0,"index":3724},{"krate":0,"index":3723},{"krate":0,"index":3721},{"krate":0,"index":3719},{"krate":0,"index":566},{"krate":0,"index":571}],"decl_id":null,"docs":" Futures","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3056},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/empty.rs","byte_start":56440,"byte_end":56445,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Empty","qualname":"::future::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":3059}],"decl_id":null,"docs":" A future which is never resolved.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/empty.rs","byte_start":56380,"byte_end":56428,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/empty.rs","byte_start":56666,"byte_end":56671,"line_start":20,"line_end":20,"column_start":8,"column_end":13},"name":"empty","qualname":"::future::empty::empty","value":"fn <T, E> () -> Empty<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which never resolves, representing a computation that never\n finishes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3064},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":57264,"byte_end":57268,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::future::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":3067}],"decl_id":null,"docs":" A future which defers creation of the actual future until a callback is\n scheduled.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":57204,"byte_end":57252,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":57957,"byte_end":57961,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"lazy","qualname":"::future::lazy::lazy","value":"fn <F, R> (f: F) -> Lazy<F, R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future which will eventually be the same as the one created\n by the closure provided.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3087},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/poll_fn.rs","byte_start":59224,"byte_end":59230,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"PollFn","qualname":"::future::poll_fn::PollFn","value":"PollFn {  }","parent":null,"children":[{"krate":0,"index":3089}],"decl_id":null,"docs":" A future which adapts a function returning `Poll`.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/poll_fn.rs","byte_start":59164,"byte_end":59212,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/poll_fn.rs","byte_start":59664,"byte_end":59671,"line_start":30,"line_end":30,"column_start":8,"column_end":15},"name":"poll_fn","qualname":"::future::poll_fn::poll_fn","value":"fn <T, E, F> (f: F) -> PollFn<F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future wrapping around a function returning `Poll`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":60308,"byte_end":60320,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"FutureResult","qualname":"::future::result_::FutureResult","value":"FutureResult {  }","parent":null,"children":[{"krate":0,"index":3096}],"decl_id":null,"docs":" A future representing a value that is immediately ready.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":60189,"byte_end":60237,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":60859,"byte_end":60865,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"result","qualname":"::future::result_::result","value":"fn <T, E> (r: result::Result<T, E>) -> FutureResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new \"leaf future\" which will resolve with the given result.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":61308,"byte_end":61310,"line_start":48,"line_end":48,"column_start":8,"column_end":10},"name":"ok","qualname":"::future::result_::ok","value":"fn <T, E> (t: T) -> FutureResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a \"leaf future\" from an immediate value of a finished and\n successful computation.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":61700,"byte_end":61703,"line_start":64,"line_end":64,"column_start":8,"column_end":11},"name":"err","qualname":"::future::result_::err","value":"fn <T, E> (e: E) -> FutureResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a \"leaf future\" from an immediate value of a failed computation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3108},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":62348,"byte_end":62353,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Break","qualname":"::future::loop_fn::Loop::Break","value":"Loop::Break(T)","parent":{"krate":0,"index":3105},"children":[],"decl_id":null,"docs":" Indicates that the loop has completed with output `T`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3111},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":62457,"byte_end":62465,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"Continue","qualname":"::future::loop_fn::Loop::Continue","value":"Loop::Continue(S)","parent":{"krate":0,"index":3105},"children":[],"decl_id":null,"docs":" Indicates that the loop function should be called again with input\n state `S`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3105},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":62268,"byte_end":62272,"line_start":7,"line_end":7,"column_start":10,"column_end":14},"name":"Loop","qualname":"::future::loop_fn::Loop","value":"Loop::{Break, Continue}","parent":null,"children":[{"krate":0,"index":3108},{"krate":0,"index":3111}],"decl_id":null,"docs":" The status of a `loop_fn` loop.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3118},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":62593,"byte_end":62599,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"LoopFn","qualname":"::future::loop_fn::LoopFn","value":"LoopFn {  }","parent":null,"children":[{"krate":0,"index":3121},{"krate":0,"index":3122}],"decl_id":null,"docs":" A future implementing a tail-recursive loop.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":64158,"byte_end":64165,"line_start":74,"line_end":74,"column_start":8,"column_end":15},"name":"loop_fn","qualname":"::future::loop_fn::loop_fn","value":"fn <S, T, A, F> (initial_state: S, mut func: F) -> LoopFn<A, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future implementing a tail-recursive loop.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3127},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/and_then.rs","byte_start":65576,"byte_end":65583,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"AndThen","qualname":"::future::and_then::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":3131}],"decl_id":null,"docs":" Future for the `and_then` combinator, chaining a computation onto the end of\n another future which completes successfully.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/and_then.rs","byte_start":65516,"byte_end":65564,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":211},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":66529,"byte_end":66536,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::future::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":213}],"decl_id":null,"docs":" Future for the `flatten` combinator, flattening a future-of-a-future to get just\n the result of the final future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":66469,"byte_end":66517,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":67932,"byte_end":67945,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"FlattenStream","qualname":"::future::flatten_stream::FlattenStream","value":"FlattenStream {  }","parent":null,"children":[{"krate":0,"index":234}],"decl_id":null,"docs":" Future for the `flatten_stream` combinator, flattening a\n future-of-a-stream to get just the result of the final stream as a stream.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":67872,"byte_end":67920,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3152},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71034,"byte_end":71038,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::future::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":3154}],"decl_id":null,"docs":" A future which \"fuses\" a future once it's been resolved.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":70974,"byte_end":71022,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71505,"byte_end":71512,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Fuse<A>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the underlying future has finished or not.\n \n If this method returns `true`, then all future calls to `poll`\n are guaranteed to return `Ok(Async::NotReady)`. If this returns\n false, then the underlying future has not been driven to\n completion.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3158},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/into_stream.rs","byte_start":72241,"byte_end":72251,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::future::into_stream::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":3160}],"decl_id":null,"docs":" Future that forwards one element from the underlying future\n (whether it is success of error) and emits EOF after that.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":76565,"byte_end":76569,"line_start":122,"line_end":122,"column_start":6,"column_end":10},"name":"Join","qualname":"::future::join::Join","value":"Join {  }","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3168}],"decl_id":null,"docs":" Future for the `join` combinator, waiting for two futures to\n complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":73259,"byte_end":73307,"line_start":14,"line_end":14,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3193},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":76744,"byte_end":76749,"line_start":128,"line_end":128,"column_start":6,"column_end":11},"name":"Join3","qualname":"::future::join::Join3","value":"Join3 {  }","parent":null,"children":[{"krate":0,"index":3197},{"krate":0,"index":3198},{"krate":0,"index":3199}],"decl_id":null,"docs":" Future for the `join3` combinator, waiting for three futures to\n complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":73259,"byte_end":73307,"line_start":14,"line_end":14,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3229},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":76927,"byte_end":76932,"line_start":134,"line_end":134,"column_start":6,"column_end":11},"name":"Join4","qualname":"::future::join::Join4","value":"Join4 {  }","parent":null,"children":[{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3236},{"krate":0,"index":3237}],"decl_id":null,"docs":" Future for the `join4` combinator, waiting for four futures to\n complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":73259,"byte_end":73307,"line_start":14,"line_end":14,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":77113,"byte_end":77118,"line_start":140,"line_end":140,"column_start":6,"column_end":11},"name":"Join5","qualname":"::future::join::Join5","value":"Join5 {  }","parent":null,"children":[{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3280},{"krate":0,"index":3281},{"krate":0,"index":3282}],"decl_id":null,"docs":" Future for the `join5` combinator, waiting for five futures to\n complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":73259,"byte_end":73307,"line_start":14,"line_end":14,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3335},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map.rs","byte_start":78131,"byte_end":78134,"line_start":8,"line_end":8,"column_start":12,"column_end":15},"name":"Map","qualname":"::future::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":3338},{"krate":0,"index":3339}],"decl_id":null,"docs":" Future for the `map` combinator, changing the type of a future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map.rs","byte_start":78071,"byte_end":78119,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3344},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map_err.rs","byte_start":79041,"byte_end":79047,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::future::map_err::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":3347},{"krate":0,"index":3348}],"decl_id":null,"docs":" Future for the `map_err` combinator, changing the error type of a future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map_err.rs","byte_start":78981,"byte_end":79029,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3353},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/from_err.rs","byte_start":79930,"byte_end":79937,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"FromErr","qualname":"::future::from_err::FromErr","value":"FromErr {  }","parent":null,"children":[{"krate":0,"index":3356},{"krate":0,"index":3357}],"decl_id":null,"docs":" Future for the `from_err` combinator, changing the error type of a future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/from_err.rs","byte_start":79870,"byte_end":79918,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3362},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/or_else.rs","byte_start":80786,"byte_end":80792,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"OrElse","qualname":"::future::or_else::OrElse","value":"OrElse {  }","parent":null,"children":[{"krate":0,"index":3366}],"decl_id":null,"docs":" Future for the `or_else` combinator, chaining a computation onto the end of\n a future which fails with an error.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/or_else.rs","byte_start":80726,"byte_end":80774,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3372},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":81729,"byte_end":81735,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Select","qualname":"::future::select::Select","value":"Select {  }","parent":null,"children":[{"krate":0,"index":3375}],"decl_id":null,"docs":" Future for the `select` combinator, waiting for one of two futures to\n complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":81669,"byte_end":81717,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3380},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":82087,"byte_end":82097,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"SelectNext","qualname":"::future::select::SelectNext","value":"SelectNext {  }","parent":null,"children":[{"krate":0,"index":3383}],"decl_id":null,"docs":" Future yielded as the second result in a `Select` future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":82027,"byte_end":82075,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3401},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select2.rs","byte_start":84365,"byte_end":84372,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Select2","qualname":"::future::select2::Select2","value":"Select2 {  }","parent":null,"children":[{"krate":0,"index":3404}],"decl_id":null,"docs":" Future for the `select2` combinator, waiting for one of two differently-typed\n futures to complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select2.rs","byte_start":84288,"byte_end":84336,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3409},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/then.rs","byte_start":85622,"byte_end":85626,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Then","qualname":"::future::then::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":3413}],"decl_id":null,"docs":" Future for the `then` combinator, chaining computations on the end of\n another future regardless of its outcome.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/then.rs","byte_start":85562,"byte_end":85610,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3422},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86410,"byte_end":86411,"line_start":8,"line_end":8,"column_start":5,"column_end":6},"name":"A","qualname":"::future::either::Either::A","value":"Either::A(A)","parent":{"krate":0,"index":3419},"children":[],"decl_id":null,"docs":" First branch of the type\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3425},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86454,"byte_end":86455,"line_start":10,"line_end":10,"column_start":5,"column_end":6},"name":"B","qualname":"::future::either::Either::B","value":"Either::B(B)","parent":{"krate":0,"index":3419},"children":[],"decl_id":null,"docs":" Second branch of the type\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3419},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86358,"byte_end":86364,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Either","qualname":"::future::either::Either","value":"Either::{A, B}","parent":null,"children":[{"krate":0,"index":3422},{"krate":0,"index":3425}],"decl_id":null,"docs":" Combines two different futures yielding the same item and error\n types into a single type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86688,"byte_end":86693,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"name":"split","qualname":"<Either<(T, A), (T, B)>>::split","value":"fn (self) -> (T, Either<A, B>)","parent":null,"children":[],"decl_id":null,"docs":" Splits out the homogeneous type from an either of tuples.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3432},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/inspect.rs","byte_start":87796,"byte_end":87803,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::future::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":3435},{"krate":0,"index":3436}],"decl_id":null,"docs":" Do something with the item of a future, passing it on.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/inspect.rs","byte_start":87736,"byte_end":87784,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3665},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8859357,"byte_end":8859368,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"CatchUnwind","qualname":"::future::catch_unwind::CatchUnwind","value":"CatchUnwind {  }","parent":null,"children":[{"krate":0,"index":3667}],"decl_id":null,"docs":" Future for the `catch_unwind` combinator.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8859297,"byte_end":8859345,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3492},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8860866,"byte_end":8860873,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"JoinAll","qualname":"::future::join_all::JoinAll","value":"JoinAll {  }","parent":null,"children":[{"krate":0,"index":3494}],"decl_id":null,"docs":" A future which takes a list of futures and resolves with a vector of the\n completed values.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8860806,"byte_end":8860854,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":3498},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8862423,"byte_end":8862431,"line_start":76,"line_end":76,"column_start":8,"column_end":16},"name":"join_all","qualname":"::future::join_all::join_all","value":"fn <I> (i: I) -> JoinAll<I>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which represents a collection of the results of the futures\n given.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8864634,"byte_end":8864643,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SelectAll","qualname":"::future::select_all::SelectAll","value":"SelectAll {  }","parent":null,"children":[{"krate":0,"index":3684}],"decl_id":null,"docs":" Future for the `select_all` combinator, waiting for one of any of a list of\n futures to complete.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8864574,"byte_end":8864622,"line_start":14,"line_end":14,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":3515},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8864711,"byte_end":8864724,"line_start":20,"line_end":20,"column_start":10,"column_end":23},"name":"SelectAllNext","qualname":"::future::select_all::SelectAllNext","value":"A","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3517},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8865151,"byte_end":8865161,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"select_all","qualname":"::future::select_all::select_all","value":"fn <I> (iter: I) -> SelectAll<<I::Item as IntoFuture>::Future>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future which will select over a list of futures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_ok.rs","byte_start":8866860,"byte_end":8866868,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"SelectOk","qualname":"::future::select_ok::SelectOk","value":"SelectOk {  }","parent":null,"children":[{"krate":0,"index":3690}],"decl_id":null,"docs":" Future for the `select_ok` combinator, waiting for one of any of a list of\n futures to successfully complete. Unlike `select_all`, this future ignores all\n but the last error, if there are any.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_ok.rs","byte_start":8866800,"byte_end":8866848,"line_start":15,"line_end":15,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":3534},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_ok.rs","byte_start":8867416,"byte_end":8867425,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"select_ok","qualname":"::future::select_ok::select_ok","value":"fn <I> (iter: I) -> SelectOk<<I::Item as IntoFuture>::Future>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new future which will select the first successful future over a list of futures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3567},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8870074,"byte_end":8870080,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Shared","qualname":"::future::shared::Shared","value":"Shared {  }","parent":null,"children":[{"krate":0,"index":3569},{"krate":0,"index":3570}],"decl_id":null,"docs":" A future that is cloneable and can be polled in multiple threads.\n Use `Future::shared()` method to convert any future into a `Shared` future.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8870014,"byte_end":8870062,"line_start":29,"line_end":29,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3592},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871579,"byte_end":8871582,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Shared<F>>::new","value":"fn (future: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.12\", note = \"use `Future::shared` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871438,"byte_end":8871508,"line_start":83,"line_end":83,"column_start":5,"column_end":75}},{"value":"cfg(feature = \"with-deprecated\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871513,"byte_end":8871548,"line_start":84,"line_end":84,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3593},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871852,"byte_end":8871856,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"peek","qualname":"<Shared<F>>::peek","value":"fn (&self) -> Option<Result<SharedItem<F::Item>, SharedError<F::Error>>>","parent":null,"children":[],"decl_id":null,"docs":" If any clone of this `Shared` has completed execution, returns its result immediately\n without blocking. Otherwise, returns None without triggering the work represented by\n this `Shared`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877200,"byte_end":8877210,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"SharedItem","qualname":"::future::shared::SharedItem","value":"SharedItem {  }","parent":null,"children":[{"krate":0,"index":3696}],"decl_id":null,"docs":" A wrapped item of the original future that is cloneable and implements Deref\n for ease of use.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877501,"byte_end":8877512,"line_start":282,"line_end":282,"column_start":12,"column_end":23},"name":"SharedError","qualname":"::future::shared::SharedError","value":"SharedError {  }","parent":null,"children":[{"krate":0,"index":3705}],"decl_id":null,"docs":" A wrapped error of the original future that is cloneable and implements Deref\n for ease of use.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3657},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15606,"byte_end":15615,"line_start":106,"line_end":106,"column_start":14,"column_end":23},"name":"BoxFuture","qualname":"::future::BoxFuture","value":"::std::boxed::Box<Future<Item = T, Error = E> + Send>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Box<Future + Send>`\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6399,"byte_end":6426,"line_start":168,"line_end":168,"column_start":9,"column_end":36}},{"value":"deprecated(note =\n             \"removed without replacement, recommended to use a \\\n                         local extension trait or function if needed, more \\\n                         details in https://github.com/rust-lang-nursery/futures-rs/issues/228\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15345,"byte_end":15592,"line_start":103,"line_end":105,"column_start":5,"column_end":98}}]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":18863,"byte_end":18869,"line_start":178,"line_end":178,"column_start":11,"column_end":17},"name":"Future","qualname":"::future::Future","value":"Future","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":513},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" Trait for types which are a placeholder of a value that may become\n available at some later point in time.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":18804,"byte_end":18852,"line_start":177,"line_end":177,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":478},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":18972,"byte_end":18976,"line_start":181,"line_end":181,"column_start":10,"column_end":14},"name":"Item","qualname":"::future::Future::Item","value":"type Item;","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" The type of value that this future will resolved with if it is\n successful.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":479},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":19090,"byte_end":19095,"line_start":185,"line_end":185,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::Future::Error","value":"type Error;","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" The type of error that this future will resolve with if it fails in a\n normal fashion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":23802,"byte_end":23806,"line_start":273,"line_end":273,"column_start":8,"column_end":12},"name":"poll","qualname":"::future::Future::poll","value":"fn (&mut self) -> Poll<Self::Item, Self::Error>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Query this future to see if its value has become available, registering\n interest if it is not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":25000,"byte_end":25004,"line_start":297,"line_end":297,"column_start":8,"column_end":12},"name":"wait","qualname":"::future::Future::wait","value":"fn (self) -> result::Result<Self::Item, Self::Error>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Block the current thread until this future is resolved.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":24965,"byte_end":24992,"line_start":296,"line_end":296,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":26325,"byte_end":26330,"line_start":329,"line_end":329,"column_start":8,"column_end":13},"name":"boxed","qualname":"::future::Future::boxed","value":"fn (self) -> BoxFuture<Self::Item, Self::Error>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Convenience function for turning this future into a trait object which\n is also `Send`.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":25994,"byte_end":26021,"line_start":323,"line_end":323,"column_start":5,"column_end":32}},{"value":"deprecated(note =\n             \"removed without replacement, recommended to use a \\\n                         local extension trait or function if needed, more \\\n                         details in https://github.com/rust-lang-nursery/futures-rs/issues/228\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":26045,"byte_end":26292,"line_start":325,"line_end":327,"column_start":5,"column_end":98}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":26297,"byte_end":26317,"line_start":328,"line_end":328,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":27803,"byte_end":27806,"line_start":371,"line_end":371,"column_start":8,"column_end":11},"name":"map","qualname":"::future::Future::map","value":"fn <F, U> (self, f: F) -> Map<Self, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Map this future's result to a different type, returning a new future of\n the resulting type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":29209,"byte_end":29216,"line_start":411,"line_end":411,"column_start":8,"column_end":15},"name":"map_err","qualname":"::future::Future::map_err","value":"fn <F, E> (self, f: F) -> MapErr<Self, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Map this future's error to a different error, returning a new future.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":30236,"byte_end":30244,"line_start":441,"line_end":441,"column_start":8,"column_end":16},"name":"from_err","qualname":"::future::Future::from_err","value":"fn <E> (self) -> FromErr<Self, E>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Map this future's error to any error implementing `From` for\n this future's `Error`, returning a new future.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":31853,"byte_end":31857,"line_start":485,"line_end":485,"column_start":8,"column_end":12},"name":"then","qualname":"::future::Future::then","value":"fn <F, B> (self, f: F) -> Then<Self, B, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Chain on a computation for when a future finished, passing the result of\n the future to the provided closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":33429,"byte_end":33437,"line_start":526,"line_end":526,"column_start":8,"column_end":16},"name":"and_then","qualname":"::future::Future::and_then","value":"fn <F, B> (self, f: F) -> AndThen<Self, B, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Execute another future after this one has resolved successfully.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":35011,"byte_end":35018,"line_start":567,"line_end":567,"column_start":8,"column_end":15},"name":"or_else","qualname":"::future::Future::or_else","value":"fn <F, B> (self, f: F) -> OrElse<Self, B, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Execute another future if this one resolves with an error.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":37022,"byte_end":37028,"line_start":625,"line_end":625,"column_start":8,"column_end":14},"name":"select","qualname":"::future::Future::select","value":"fn <B> (self, other: B) -> Select<Self, B::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Waits for either one of two futures to complete.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":38936,"byte_end":38943,"line_start":671,"line_end":671,"column_start":8,"column_end":15},"name":"select2","qualname":"::future::Future::select2","value":"fn <B> (self, other: B) -> Select2<Self, B::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Waits for either one of two differently-typed futures to complete.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":40341,"byte_end":40345,"line_start":716,"line_end":716,"column_start":8,"column_end":12},"name":"join","qualname":"::future::Future::join","value":"fn <B> (self, other: B) -> Join<Self, B::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Joins the result of two futures, waiting for them both to complete.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":40652,"byte_end":40657,"line_start":725,"line_end":725,"column_start":8,"column_end":13},"name":"join3","qualname":"::future::Future::join3","value":"fn <B, C> (self, b: B, c: C) -> Join3<Self, B::Future, C::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Same as `join`, but with more futures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":40968,"byte_end":40973,"line_start":734,"line_end":734,"column_start":8,"column_end":13},"name":"join4","qualname":"::future::Future::join4","value":"fn <B, C, D> (self, b: B, c: C, d: D) -> Join4<Self, B::Future, C::Future, D::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Same as `join`, but with more futures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":41391,"byte_end":41396,"line_start":745,"line_end":745,"column_start":8,"column_end":13},"name":"join5","qualname":"::future::Future::join5","value":"fn <B, C, D, E> (self, b: B, c: C, d: D, e: E) -> Join5<Self, B::Future, C::Future, D::Future, E::Future>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Same as `join`, but with more futures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":42640,"byte_end":42651,"line_start":778,"line_end":778,"column_start":8,"column_end":19},"name":"into_stream","qualname":"::future::Future::into_stream","value":"fn (self) -> IntoStream<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Convert this future into a single element stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":44092,"byte_end":44099,"line_start":820,"line_end":820,"column_start":8,"column_end":15},"name":"flatten","qualname":"::future::Future::flatten","value":"fn (self) -> Flatten<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the successful result of this\n future is itself another future.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":45493,"byte_end":45507,"line_start":860,"line_end":860,"column_start":8,"column_end":22},"name":"flatten_stream","qualname":"::future::Future::flatten_stream","value":"fn (self) -> FlattenStream<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Flatten the execution of this future when the successful result of this\n future is a stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":47068,"byte_end":47072,"line_start":900,"line_end":900,"column_start":8,"column_end":12},"name":"fuse","qualname":"::future::Future::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Fuse a future such that `poll` will never again be called once it has\n completed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":47840,"byte_end":47847,"line_start":923,"line_end":923,"column_start":8,"column_end":15},"name":"inspect","qualname":"::future::Future::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Do something with the item of a future, passing it on.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":49444,"byte_end":49456,"line_start":962,"line_end":962,"column_start":8,"column_end":20},"name":"catch_unwind","qualname":"::future::Future::catch_unwind","value":"fn (self) -> CatchUnwind<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Catches unwinding panics while polling the future.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":49409,"byte_end":49436,"line_start":961,"line_end":961,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":51196,"byte_end":51202,"line_start":1011,"line_end":1011,"column_start":8,"column_end":14},"name":"shared","qualname":"::future::Future::shared","value":"fn (self) -> Shared<Self>","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Create a cloneable handle to this future where all handles will resolve\n to the same result.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":51161,"byte_end":51188,"line_start":1010,"line_end":1010,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":536},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":51865,"byte_end":51875,"line_start":1039,"line_end":1039,"column_start":11,"column_end":21},"name":"IntoFuture","qualname":"::future::IntoFuture","value":"IntoFuture","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"decl_id":null,"docs":" Class of types which can be converted into a future.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":537},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":51944,"byte_end":51950,"line_start":1041,"line_end":1041,"column_start":10,"column_end":16},"name":"Future","qualname":"::future::IntoFuture::Future","value":"type Future: Future<Item=Self::Item, Error=Self::Error>;","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" The future that this type can be converted into.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":538},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52057,"byte_end":52061,"line_start":1044,"line_end":1044,"column_start":10,"column_end":14},"name":"Item","qualname":"::future::IntoFuture::Item","value":"type Item;","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" The item that the future may resolve with.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":539},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52124,"byte_end":52129,"line_start":1046,"line_end":1046,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::IntoFuture::Error","value":"type Error;","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" The error that the future may resolve with.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52191,"byte_end":52202,"line_start":1049,"line_end":1049,"column_start":8,"column_end":19},"name":"into_future","qualname":"::future::IntoFuture::into_future","value":"fn (self) -> Self::Future","parent":{"krate":0,"index":536},"children":[],"decl_id":null,"docs":" Consumes this object and produces a future.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":554},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52751,"byte_end":52761,"line_start":1076,"line_end":1076,"column_start":11,"column_end":21},"name":"FutureFrom","qualname":"::future::FutureFrom","value":"FutureFrom<T>: Sized","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"decl_id":null,"docs":" Asynchronous conversion from a type `T`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":556},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52822,"byte_end":52828,"line_start":1078,"line_end":1078,"column_start":10,"column_end":16},"name":"Future","qualname":"::future::FutureFrom::Future","value":"type Future: Future<Item=Self, Error=Self::Error>;","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" The future for the conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":557},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52921,"byte_end":52926,"line_start":1081,"line_end":1081,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::FutureFrom::Error","value":"type Error;","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Possible errors during conversion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52995,"byte_end":53006,"line_start":1084,"line_end":1084,"column_start":8,"column_end":19},"name":"future_from","qualname":"::future::FutureFrom::future_from","value":"fn (T) -> Self::Future","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Consume the given value, beginning the conversion.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":559},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":53480,"byte_end":53488,"line_start":1095,"line_end":1095,"column_start":11,"column_end":19},"name":"Executor","qualname":"::future::Executor","value":"Executor<F: Future<Item = (), Error = ()>>","parent":null,"children":[{"krate":0,"index":561}],"decl_id":null,"docs":" A trait for types which can spawn fresh futures.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":54504,"byte_end":54511,"line_start":1116,"line_end":1116,"column_start":8,"column_end":15},"name":"execute","qualname":"::future::Executor::execute","value":"fn (&self, future: F) -> Result<(), ExecuteError<F>>","parent":{"krate":0,"index":559},"children":[],"decl_id":null,"docs":" Spawns a future to run on this `Executor`, typically in the\n \"background\".","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":562},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":54630,"byte_end":54642,"line_start":1120,"line_end":1120,"column_start":12,"column_end":24},"name":"ExecuteError","qualname":"::future::ExecuteError","value":"ExecuteError {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" Errors returned from the `Spawn::spawn` function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3713},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55086,"byte_end":55094,"line_start":1133,"line_end":1133,"column_start":5,"column_end":13},"name":"Shutdown","qualname":"::future::ExecuteErrorKind::Shutdown","value":"ExecuteErrorKind::Shutdown","parent":{"krate":0,"index":3712},"children":[],"decl_id":null,"docs":" This executor has shut down and will no longer accept new futures to\n spawn.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3715},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55243,"byte_end":55253,"line_start":1137,"line_end":1137,"column_start":5,"column_end":15},"name":"NoCapacity","qualname":"::future::ExecuteErrorKind::NoCapacity","value":"ExecuteErrorKind::NoCapacity","parent":{"krate":0,"index":3712},"children":[],"decl_id":null,"docs":" This executor has no more capacity to run more futures. Other futures\n need to finish before this executor can accept another.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3717},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55279,"byte_end":55294,"line_start":1140,"line_end":1140,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::future::ExecuteErrorKind::__Nonexhaustive","value":"ExecuteErrorKind::__Nonexhaustive","parent":{"krate":0,"index":3712},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3712},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":54971,"byte_end":54987,"line_start":1130,"line_end":1130,"column_start":10,"column_end":26},"name":"ExecuteErrorKind","qualname":"::future::ExecuteErrorKind","value":"ExecuteErrorKind::{Shutdown, NoCapacity, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":3713},{"krate":0,"index":3715},{"krate":0,"index":3717}],"decl_id":null,"docs":" Kinds of errors that can be returned from the `Execute::spawn` function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55372,"byte_end":55375,"line_start":1145,"line_end":1145,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecuteError<F>>::new","value":"fn (kind: ExecuteErrorKind, future: F) -> ExecuteError<F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ExecuteError`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55587,"byte_end":55591,"line_start":1153,"line_end":1153,"column_start":12,"column_end":16},"name":"kind","qualname":"<ExecuteError<F>>::kind","value":"fn (&self) -> ExecuteErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the associated reason for the error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55729,"byte_end":55740,"line_start":1158,"line_end":1158,"column_start":12,"column_end":23},"name":"into_future","qualname":"<ExecuteError<F>>::into_future","value":"fn (self) -> F","parent":null,"children":[],"decl_id":null,"docs":" Consumes self and returns the original future that was spawned.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":577},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":636},{"krate":0,"index":639},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":691},{"krate":0,"index":706},{"krate":0,"index":753},{"krate":0,"index":768},{"krate":0,"index":796},{"krate":0,"index":826},{"krate":0,"index":850},{"krate":0,"index":871},{"krate":0,"index":889},{"krate":0,"index":917},{"krate":0,"index":942},{"krate":0,"index":960},{"krate":0,"index":988},{"krate":0,"index":1016},{"krate":0,"index":1046},{"krate":0,"index":1074},{"krate":0,"index":1090},{"krate":0,"index":1104},{"krate":0,"index":1131},{"krate":0,"index":1155},{"krate":0,"index":1170},{"krate":0,"index":1186},{"krate":0,"index":1210},{"krate":0,"index":1244},{"krate":0,"index":1268},{"krate":0,"index":1302},{"krate":0,"index":1329},{"krate":0,"index":1350},{"krate":0,"index":1366},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1418},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4152},{"krate":0,"index":4189},{"krate":0,"index":4214},{"krate":0,"index":4243},{"krate":0,"index":4261},{"krate":0,"index":4275},{"krate":0,"index":4324},{"krate":0,"index":4371},{"krate":0,"index":4540},{"krate":0,"index":4604},{"krate":0,"index":4605},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4608},{"krate":0,"index":4609},{"krate":0,"index":4610},{"krate":0,"index":4614},{"krate":0,"index":4615},{"krate":0,"index":4618},{"krate":0,"index":4624},{"krate":0,"index":4627},{"krate":0,"index":1439},{"krate":0,"index":1509},{"krate":0,"index":1515}],"decl_id":null,"docs":" Asynchronous streams","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3726},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":132532,"byte_end":132536,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Iter","qualname":"::stream::iter::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream which is just a shim over an underlying instance of `Iterator`.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":132472,"byte_end":132520,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":587},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":133150,"byte_end":133154,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"iter","qualname":"::stream::iter::iter","value":"fn <J, T, E> (i: J) -> Iter<J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Converts an `Iterator` over `Result`s into a `Stream` which is always ready\n to yield the next value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":133133,"byte_end":133142,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3733},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_ok.rs","byte_start":133747,"byte_end":133753,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"IterOk","qualname":"::stream::iter_ok::IterOk","value":"IterOk {  }","parent":null,"children":[{"krate":0,"index":3736},{"krate":0,"index":3737}],"decl_id":null,"docs":" A stream which is just a shim over an underlying instance of `Iterator`.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_ok.rs","byte_start":133687,"byte_end":133735,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":608},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_ok.rs","byte_start":134340,"byte_end":134347,"line_start":30,"line_end":30,"column_start":8,"column_end":15},"name":"iter_ok","qualname":"::stream::iter_ok::iter_ok","value":"fn <I, E> (i: I) -> IterOk<I::IntoIter, E>","parent":null,"children":[],"decl_id":null,"docs":" Converts an `Iterator` into a `Stream` which is always ready\n to yield the next value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3742},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_result.rs","byte_start":134967,"byte_end":134977,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"IterResult","qualname":"::stream::iter_result::IterResult","value":"IterResult {  }","parent":null,"children":[{"krate":0,"index":3744}],"decl_id":null,"docs":" A stream which is just a shim over an underlying instance of `Iterator`.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_result.rs","byte_start":134907,"byte_end":134955,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_result.rs","byte_start":135589,"byte_end":135600,"line_start":28,"line_end":28,"column_start":8,"column_end":19},"name":"iter_result","qualname":"::stream::iter_result::iter_result","value":"fn <J, T, E> (i: J) -> IterResult<J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Converts an `Iterator` over `Result`s into a `Stream` which is always ready\n to yield the next value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3748},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/repeat.rs","byte_start":136367,"byte_end":136373,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::stream::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":3751},{"krate":0,"index":3752}],"decl_id":null,"docs":" Stream that produces the same element repeatedly.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/repeat.rs","byte_start":136307,"byte_end":136355,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/repeat.rs","byte_start":137010,"byte_end":137016,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"repeat","qualname":"::stream::repeat::repeat","value":"fn <T, E> (item: T) -> Repeat<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a stream which produces the same item repeatedly.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3757},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":137663,"byte_end":137670,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"AndThen","qualname":"::stream::and_then::AndThen","value":"AndThen {  }","parent":null,"children":[{"krate":0,"index":3761},{"krate":0,"index":3762},{"krate":0,"index":3763}],"decl_id":null,"docs":" A stream combinator which chains a computation onto values produced by a\n stream.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":137603,"byte_end":137651,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138163,"byte_end":138170,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AndThen<S, F, U>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138479,"byte_end":138486,"line_start":44,"line_end":44,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AndThen<S, F, U>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138781,"byte_end":138791,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AndThen<S, F, U>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3785},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chain.rs","byte_start":140823,"byte_end":140828,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Chain","qualname":"::stream::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":3788}],"decl_id":null,"docs":" An adapter for chaining the output of two streams.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chain.rs","byte_start":140763,"byte_end":140811,"line_start":23,"line_end":23,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":718},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142204,"byte_end":142211,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"Concat2","qualname":"::stream::concat::Concat2","value":"Concat2 {  }","parent":null,"children":[{"krate":0,"index":720}],"decl_id":null,"docs":" A stream combinator to concatenate the results of a stream into the first\n yielded item.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142144,"byte_end":142192,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":732},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":143537,"byte_end":143543,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"Concat","qualname":"::stream::concat::Concat","value":"Concat {  }","parent":null,"children":[{"krate":0,"index":734}],"decl_id":null,"docs":" A stream combinator to concatenate the results of a stream into the first\n yielded item.","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.18\", note = \"please use `Stream::Concat2` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":143402,"byte_end":143476,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":143477,"byte_end":143525,"line_start":62,"line_end":62,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3812},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/empty.rs","byte_start":146645,"byte_end":146650,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Empty","qualname":"::stream::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":3815}],"decl_id":null,"docs":" A stream which contains no elements.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/empty.rs","byte_start":146585,"byte_end":146633,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/empty.rs","byte_start":146832,"byte_end":146837,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"empty","qualname":"::stream::empty::empty","value":"fn <T, E> () -> Empty<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream which contains no elements.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3820},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":147368,"byte_end":147374,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Filter","qualname":"::stream::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":3823},{"krate":0,"index":3824}],"decl_id":null,"docs":" A stream combinator used to filter the results of a stream and only yield\n some values.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":147308,"byte_end":147356,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":147709,"byte_end":147716,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Filter<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148025,"byte_end":148032,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Filter<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148327,"byte_end":148337,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Filter<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3829},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":149724,"byte_end":149733,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::stream::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":3832},{"krate":0,"index":3833}],"decl_id":null,"docs":" A combinator used to filter the results of a stream and simultaneously map\n them to a different type.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":149664,"byte_end":149712,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":150084,"byte_end":150091,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FilterMap<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":150400,"byte_end":150407,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FilterMap<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":150702,"byte_end":150712,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FilterMap<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152092,"byte_end":152099,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::stream::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":3840},{"krate":0,"index":3841}],"decl_id":null,"docs":" A combinator used to flatten a stream-of-streams into one long stream of\n elements.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152032,"byte_end":152080,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152511,"byte_end":152518,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Flatten<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152827,"byte_end":152834,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Flatten<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":153129,"byte_end":153139,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Flatten<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3845},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fold.rs","byte_start":154769,"byte_end":154773,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Fold","qualname":"::stream::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852}],"decl_id":null,"docs":" A future used to collect all the results of a stream into one generic type.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fold.rs","byte_start":154709,"byte_end":154757,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3874},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/for_each.rs","byte_start":157260,"byte_end":157267,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"ForEach","qualname":"::stream::for_each::ForEach","value":"ForEach {  }","parent":null,"children":[{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3880}],"decl_id":null,"docs":" A stream combinator which executes a unit closure over each item on a\n stream.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/for_each.rs","byte_start":157200,"byte_end":157248,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3886},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":158563,"byte_end":158570,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"FromErr","qualname":"::stream::from_err::FromErr","value":"FromErr {  }","parent":null,"children":[{"krate":0,"index":3889},{"krate":0,"index":3890}],"decl_id":null,"docs":" A stream combinator to change the error type of a stream.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":158503,"byte_end":158551,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":158894,"byte_end":158901,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FromErr<S, E>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":159210,"byte_end":159217,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FromErr<S, E>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":159512,"byte_end":159522,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FromErr<S, E>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3895},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":160794,"byte_end":160798,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::stream::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":3897},{"krate":0,"index":3898}],"decl_id":null,"docs":" A stream which \"fuse\"s a stream once it's terminated.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":160734,"byte_end":160782,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":162115,"byte_end":162122,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Fuse<S>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the underlying stream has finished or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":162276,"byte_end":162283,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Fuse<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":162592,"byte_end":162599,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Fuse<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":162894,"byte_end":162904,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Fuse<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3902},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":163210,"byte_end":163222,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"StreamFuture","qualname":"::stream::future::StreamFuture","value":"StreamFuture {  }","parent":null,"children":[{"krate":0,"index":3904}],"decl_id":null,"docs":" A combinator used to temporarily convert a stream into a future.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":163150,"byte_end":163198,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":163766,"byte_end":163773,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<StreamFuture<S>>::get_ref","value":"fn (&self) -> Option<&S>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":164384,"byte_end":164391,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<StreamFuture<S>>::get_mut","value":"fn (&mut self) -> Option<&mut S>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":164984,"byte_end":164994,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<StreamFuture<S>>::into_inner","value":"fn (self) -> Option<S>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3908},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":165924,"byte_end":165931,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::stream::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":3911},{"krate":0,"index":3912}],"decl_id":null,"docs":" Do something with the items of a stream, passing it on.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":165864,"byte_end":165912,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":166313,"byte_end":166320,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Inspect<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":166629,"byte_end":166636,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Inspect<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":166931,"byte_end":166941,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Inspect<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3917},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168162,"byte_end":168172,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"InspectErr","qualname":"::stream::inspect_err::InspectErr","value":"InspectErr {  }","parent":null,"children":[{"krate":0,"index":3920},{"krate":0,"index":3921}],"decl_id":null,"docs":" Do something with the error of a stream, passing it on.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168102,"byte_end":168150,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168564,"byte_end":168571,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<InspectErr<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168880,"byte_end":168887,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<InspectErr<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":169182,"byte_end":169192,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<InspectErr<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3926},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170345,"byte_end":170348,"line_start":10,"line_end":10,"column_start":12,"column_end":15},"name":"Map","qualname":"::stream::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":3929},{"krate":0,"index":3930}],"decl_id":null,"docs":" A stream combinator which will change the type of a stream from one\n type to another.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170285,"byte_end":170333,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170673,"byte_end":170680,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Map<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170989,"byte_end":170996,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Map<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":171291,"byte_end":171301,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Map<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3935},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":172431,"byte_end":172437,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"MapErr","qualname":"::stream::map_err::MapErr","value":"MapErr {  }","parent":null,"children":[{"krate":0,"index":3938},{"krate":0,"index":3939}],"decl_id":null,"docs":" A stream combinator which will change the error type of a stream from one\n type to another.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":172371,"byte_end":172419,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":172772,"byte_end":172779,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MapErr<S, F>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173088,"byte_end":173095,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MapErr<S, F>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173390,"byte_end":173400,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MapErr<S, F>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3944},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":174669,"byte_end":174674,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Merge","qualname":"::stream::merge::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":3947},{"krate":0,"index":3948},{"krate":0,"index":3949}],"decl_id":null,"docs":" An adapter for merging the output of two streams.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":174609,"byte_end":174657,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3957},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175214,"byte_end":175219,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"First","qualname":"::stream::merge::MergedItem::First","value":"MergedItem::First(I1)","parent":{"krate":0,"index":3954},"children":[],"decl_id":null,"docs":" An item from the first stream\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3960},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175268,"byte_end":175274,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Second","qualname":"::stream::merge::MergedItem::Second","value":"MergedItem::Second(I2)","parent":{"krate":0,"index":3954},"children":[],"decl_id":null,"docs":" An item from the second stream\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3963},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175316,"byte_end":175320,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Both","qualname":"::stream::merge::MergedItem::Both","value":"MergedItem::Both(I1, I2)","parent":{"krate":0,"index":3954},"children":[],"decl_id":null,"docs":" Items from both streams\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3954},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175151,"byte_end":175161,"line_start":33,"line_end":33,"column_start":10,"column_end":20},"name":"MergedItem","qualname":"::stream::merge::MergedItem","value":"MergedItem::{First, Second, Both}","parent":null,"children":[{"krate":0,"index":3957},{"krate":0,"index":3960},{"krate":0,"index":3963}],"decl_id":null,"docs":" An item returned from a merge stream, which represents an item from one or\n both of the underlying streams.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3971},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/once.rs","byte_start":177080,"byte_end":177084,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Once","qualname":"::stream::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stream which emits single element and then EOF.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/once.rs","byte_start":177020,"byte_end":177068,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1095},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/once.rs","byte_start":177357,"byte_end":177361,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"once","qualname":"::stream::once::once","value":"fn <T, E> (item: Result<T, E>) -> Once<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stream of single element","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3980},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":178027,"byte_end":178033,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"OrElse","qualname":"::stream::or_else::OrElse","value":"OrElse {  }","parent":null,"children":[{"krate":0,"index":3984},{"krate":0,"index":3985},{"krate":0,"index":3986}],"decl_id":null,"docs":" A stream combinator which chains a computation onto errors produced by a\n stream.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":177967,"byte_end":178015,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3992},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180214,"byte_end":180222,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::stream::peek::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":3994},{"krate":0,"index":3995}],"decl_id":null,"docs":" A `Stream` that implements a `peek` method.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180154,"byte_end":180202,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":181517,"byte_end":181521,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<S>>::peek","value":"fn (&mut self) -> Poll<Option<&S::Item>, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Peek retrieves a reference to the next item in the stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3999},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/poll_fn.rs","byte_start":182155,"byte_end":182161,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"PollFn","qualname":"::stream::poll_fn::PollFn","value":"PollFn {  }","parent":null,"children":[{"krate":0,"index":4001}],"decl_id":null,"docs":" A stream which adapts a function returning `Poll`.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/poll_fn.rs","byte_start":182095,"byte_end":182143,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1159},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/poll_fn.rs","byte_start":182703,"byte_end":182710,"line_start":32,"line_end":32,"column_start":8,"column_end":15},"name":"poll_fn","qualname":"::stream::poll_fn::poll_fn","value":"fn <T, E, F> (f: F) -> PollFn<F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new stream wrapping around a function returning `Poll`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4005},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/select.rs","byte_start":183427,"byte_end":183433,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Select","qualname":"::stream::select::Select","value":"Select {  }","parent":null,"children":[{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010}],"decl_id":null,"docs":" An adapter for merging the output of two streams.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/select.rs","byte_start":183367,"byte_end":183415,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4015},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185324,"byte_end":185328,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Skip","qualname":"::stream::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":4017},{"krate":0,"index":4018}],"decl_id":null,"docs":" A stream combinator which skips a number of elements before continuing.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185264,"byte_end":185312,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185628,"byte_end":185635,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Skip<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185944,"byte_end":185951,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Skip<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":186246,"byte_end":186256,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Skip<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4022},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":187518,"byte_end":187527,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::stream::skip_while::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028},{"krate":0,"index":4029}],"decl_id":null,"docs":" A stream combinator which skips elements of a stream while a predicate\n holds.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":187458,"byte_end":187506,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":188124,"byte_end":188131,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<SkipWhile<S, P, R>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":188440,"byte_end":188447,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SkipWhile<S, P, R>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":188742,"byte_end":188752,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SkipWhile<S, P, R>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4035},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":190895,"byte_end":190899,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Take","qualname":"::stream::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4038}],"decl_id":null,"docs":" A stream combinator which returns a maximum number of elements.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":190835,"byte_end":190883,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191199,"byte_end":191206,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Take<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191515,"byte_end":191522,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Take<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191817,"byte_end":191827,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Take<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4042},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":193175,"byte_end":193184,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::stream::take_while::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4049}],"decl_id":null,"docs":" A stream combinator which takes elements from a stream while a predicate\n holds.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":193115,"byte_end":193163,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":193777,"byte_end":193784,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<TakeWhile<S, P, R>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":194093,"byte_end":194100,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TakeWhile<S, P, R>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":194395,"byte_end":194405,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TakeWhile<S, P, R>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4055},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":196497,"byte_end":196501,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Then","qualname":"::stream::then::Then","value":"Then {  }","parent":null,"children":[{"krate":0,"index":4059},{"krate":0,"index":4060},{"krate":0,"index":4061}],"decl_id":null,"docs":" A stream combinator which chains a computation onto each item produced by a\n stream.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":196437,"byte_end":196485,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1337},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/unfold.rs","byte_start":200149,"byte_end":200155,"line_start":49,"line_end":49,"column_start":8,"column_end":14},"name":"unfold","qualname":"::stream::unfold::unfold","value":"fn <T, F, Fut, It> (init: T, f: F) -> Unfold<T, F, Fut>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Stream` from a seed and a closure returning a `Future`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4067},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/unfold.rs","byte_start":200581,"byte_end":200587,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::stream::unfold::Unfold","value":"Unfold {  }","parent":null,"children":[{"krate":0,"index":4071},{"krate":0,"index":4072}],"decl_id":null,"docs":" A stream which creates futures, polls them and return their result","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/unfold.rs","byte_start":200521,"byte_end":200569,"line_start":63,"line_end":63,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4093},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/zip.rs","byte_start":202668,"byte_end":202671,"line_start":11,"line_end":11,"column_start":12,"column_end":15},"name":"Zip","qualname":"::stream::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4096},{"krate":0,"index":4097},{"krate":0,"index":4098},{"krate":0,"index":4099}],"decl_id":null,"docs":" An adapter for merging the output of two streams.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/zip.rs","byte_start":202608,"byte_end":202656,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4104},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":204444,"byte_end":204451,"line_start":9,"line_end":9,"column_start":12,"column_end":19},"name":"Forward","qualname":"::stream::forward::Forward","value":"Forward {  }","parent":null,"children":[{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4109}],"decl_id":null,"docs":" Future for the `Stream::forward` combinator, which sends a stream of values\n to a sink and then waits until the sink has fully flushed those values.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":204384,"byte_end":204432,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":205092,"byte_end":205100,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"sink_ref","qualname":"<Forward<T, U>>::sink_ref","value":"fn (&self) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n If this combinator has already been polled to completion, None will be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":205309,"byte_end":205317,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"sink_mut","qualname":"<Forward<T, U>>::sink_mut","value":"fn (&mut self) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n If this combinator has already been polled to completion, None will be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":205535,"byte_end":205545,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"stream_ref","qualname":"<Forward<T, U>>::stream_ref","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner stream.\n If this combinator has already been polled to completion, None will be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":205779,"byte_end":205789,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"stream_mut","qualname":"<Forward<T, U>>::stream_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner stream.\n If this combinator has already been polled to completion, None will be returned.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4125},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8880104,"byte_end":8880112,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"Buffered","qualname":"::stream::buffered::Buffered","value":"Buffered {  }","parent":null,"children":[{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":4129}],"decl_id":null,"docs":" An adaptor for a stream of futures to execute the futures concurrently, if\n possible.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8880044,"byte_end":8880092,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4137},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8881279,"byte_end":8881286,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Buffered<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4138},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8881604,"byte_end":8881611,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Buffered<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4139},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8881911,"byte_end":8881921,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Buffered<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4162},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8884176,"byte_end":8884191,"line_start":13,"line_end":13,"column_start":12,"column_end":27},"name":"BufferUnordered","qualname":"::stream::buffer_unordered::BufferUnordered","value":"BufferUnordered {  }","parent":null,"children":[{"krate":0,"index":4164},{"krate":0,"index":4165},{"krate":0,"index":4166}],"decl_id":null,"docs":" An adaptor for a stream of futures to execute the futures concurrently, if\n possible, delivering results as they become available.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8884116,"byte_end":8884164,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4174},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885266,"byte_end":8885273,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BufferUnordered<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885591,"byte_end":8885598,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BufferUnordered<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4176},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885898,"byte_end":8885908,"line_start":70,"line_end":70,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BufferUnordered<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4632},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8888053,"byte_end":8888064,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"CatchUnwind","qualname":"::stream::catch_unwind::CatchUnwind","value":"CatchUnwind {  }","parent":null,"children":[{"krate":0,"index":4634}],"decl_id":null,"docs":" Stream for the `catch_unwind` combinator.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8887993,"byte_end":8888041,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4650},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8890159,"byte_end":8890165,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::stream::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4654},{"krate":0,"index":4655}],"decl_id":null,"docs":" An adaptor that chunks up elements in a vector.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8890099,"byte_end":8890147,"line_start":13,"line_end":13,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4235},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8891402,"byte_end":8891409,"line_start":65,"line_end":65,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Chunks<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4236},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8891727,"byte_end":8891734,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Chunks<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4237},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8892034,"byte_end":8892044,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Chunks<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4659},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894179,"byte_end":8894186,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"Collect","qualname":"::stream::collect::Collect","value":"Collect {  }","parent":null,"children":[{"krate":0,"index":4661},{"krate":0,"index":4662}],"decl_id":null,"docs":" A future which collects all of the values of a stream into a vector.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894119,"byte_end":8894167,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4666},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8895524,"byte_end":8895528,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Wait","qualname":"::stream::wait::Wait","value":"Wait {  }","parent":null,"children":[{"krate":0,"index":4668}],"decl_id":null,"docs":" A stream combinator which converts an asynchronous stream to a **blocking\n iterator**.","sig":null,"attributes":[{"value":"must_use = \"iterators do nothing unless advanced\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8895443,"byte_end":8895495,"line_start":10,"line_end":10,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":4266},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8895698,"byte_end":8895705,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Wait<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream that this combinator is\n pulling from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4267},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8896023,"byte_end":8896030,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Wait<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream that this\n combinator is pulling from.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4268},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8896330,"byte_end":8896340,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Wait<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying stream.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4287},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8897574,"byte_end":8897581,"line_start":24,"line_end":24,"column_start":8,"column_end":15},"name":"channel","qualname":"::stream::channel::channel","value":"fn <T, E> () -> (Sender<T, E>, Receiver<T, E>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an in-memory channel implementation of the `Stream` trait.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4672},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8897885,"byte_end":8897891,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"Sender","qualname":"::stream::channel::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":4675}],"decl_id":null,"docs":" The transmission end of a channel which is used to send values.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4680},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898293,"byte_end":8898301,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::stream::channel::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":4683}],"decl_id":null,"docs":" The receiving end of a channel which implements the `Stream` trait.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898216,"byte_end":8898264,"line_start":42,"line_end":42,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4290},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898447,"byte_end":8898456,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"SendError","qualname":"::stream::channel::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type for sending, used when the receiving end of the channel is dropped\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898546,"byte_end":8898558,"line_start":53,"line_end":53,"column_start":12,"column_end":24},"name":"FutureSender","qualname":"::stream::channel::FutureSender","value":"FutureSender {  }","parent":null,"children":[{"krate":0,"index":4691}],"decl_id":null,"docs":" Future returned by `Sender::send`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899831,"byte_end":8899835,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T, E>>::send","value":"fn (self, t: Result<T, E>) -> FutureSender<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Sends a new value along this channel to the receiver.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4696},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900470,"byte_end":8900481,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"SplitStream","qualname":"::stream::split::SplitStream","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `Stream` part of the split pair\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4338},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900761,"byte_end":8900768,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"reunite","qualname":"<SplitStream<S>>::reunite","value":"fn (self, other: SplitSink<S>) -> Result<S, ReuniteError<S>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two \"halves\" of a split `Stream + Sink` back\n together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are\n a matching pair originating from the same call to `Stream::split`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901245,"byte_end":8901254,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"SplitSink","qualname":"::stream::split::SplitSink","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `Sink` part of the split pair\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4346},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901532,"byte_end":8901539,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"reunite","qualname":"<SplitSink<S>>::reunite","value":"fn (self, other: SplitStream<S>) -> Result<S, ReuniteError<S>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two \"halves\" of a split `Stream + Sink` back\n together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are\n a matching pair originating from the same call to `Stream::split`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4357},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8902895,"byte_end":8902907,"line_start":85,"line_end":85,"column_start":12,"column_end":24},"name":"ReuniteError","qualname":"::stream::split::ReuniteError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves\n of a `Stream + Split`, and thus could not be `reunite`d.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4371},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"futures_unordered","qualname":"::stream::futures_unordered","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","parent":null,"children":[{"krate":0,"index":4372},{"krate":0,"index":4373},{"krate":0,"index":4376},{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4386},{"krate":0,"index":4389},{"krate":0,"index":4392},{"krate":0,"index":4393},{"krate":0,"index":4399},{"krate":0,"index":4403},{"krate":0,"index":4406},{"krate":0,"index":4411},{"krate":0,"index":4413},{"krate":0,"index":4415},{"krate":0,"index":4421},{"krate":0,"index":4429},{"krate":0,"index":4438},{"krate":0,"index":4441},{"krate":0,"index":4444},{"krate":0,"index":4453},{"krate":0,"index":4468},{"krate":0,"index":4471},{"krate":0,"index":4474},{"krate":0,"index":5291},{"krate":0,"index":5297},{"krate":0,"index":4478},{"krate":0,"index":4484},{"krate":0,"index":4487},{"krate":0,"index":4492},{"krate":0,"index":4495},{"krate":0,"index":4500},{"krate":0,"index":4504},{"krate":0,"index":4508},{"krate":0,"index":4512},{"krate":0,"index":4514},{"krate":0,"index":4516},{"krate":0,"index":4519},{"krate":0,"index":4523},{"krate":0,"index":4525},{"krate":0,"index":4528},{"krate":0,"index":4531},{"krate":0,"index":4533},{"krate":0,"index":4535}],"decl_id":null,"docs":" An unbounded set of futures.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6399,"byte_end":6426,"line_start":168,"line_end":168,"column_start":9,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":4406},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905662,"byte_end":8905678,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"FuturesUnordered","qualname":"::stream::futures_unordered::FuturesUnordered","value":"FuturesUnordered {  }","parent":null,"children":[{"krate":0,"index":4408},{"krate":0,"index":4409},{"krate":0,"index":4410}],"decl_id":null,"docs":" An unbounded set of futures.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905602,"byte_end":8905650,"line_start":46,"line_end":46,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4443},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8908503,"byte_end":8908506,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<FuturesUnordered<T>>::new","value":"fn () -> FuturesUnordered<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `FuturesUnordered`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4446},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8909448,"byte_end":8909451,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"len","qualname":"<FuturesUnordered<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of futures contained in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4447},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8909559,"byte_end":8909567,"line_start":163,"line_end":163,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FuturesUnordered<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no futures\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4448},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8909928,"byte_end":8909932,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"push","qualname":"<FuturesUnordered<T>>::push","value":"fn (&mut self, future: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a future into the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4449},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8910963,"byte_end":8910971,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<FuturesUnordered<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each future in the set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5291},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8920708,"byte_end":8920715,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::stream::futures_unordered::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5294},{"krate":0,"index":5295},{"krate":0,"index":5296}],"decl_id":null,"docs":" Mutable iterator over all futures in the unordered set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4575},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8931255,"byte_end":8931269,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"FuturesOrdered","qualname":"::stream::futures_ordered::FuturesOrdered","value":"FuturesOrdered {  }","parent":null,"children":[{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580}],"decl_id":null,"docs":" An unbounded queue of futures.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8931195,"byte_end":8931243,"line_start":83,"line_end":83,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":4581},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932103,"byte_end":8932118,"line_start":104,"line_end":104,"column_start":8,"column_end":23},"name":"futures_ordered","qualname":"::stream::futures_ordered::futures_ordered","value":"fn <I> (futures: I) -> FuturesOrdered<<I::Item as IntoFuture>::Future>","parent":null,"children":[],"decl_id":null,"docs":" Converts a list of futures into a `Stream` of results from the futures.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4588},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932779,"byte_end":8932782,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<FuturesOrdered<T>>::new","value":"fn () -> FuturesOrdered<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `FuturesOrdered`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4589},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8933296,"byte_end":8933299,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"len","qualname":"<FuturesOrdered<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of futures contained in the queue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4590},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8933451,"byte_end":8933459,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FuturesOrdered<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue contains no futures\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4591},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8933877,"byte_end":8933881,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"push","qualname":"<FuturesOrdered<T>>::push","value":"fn (&mut self, future: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a future into the queue.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4624},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93498,"byte_end":93507,"line_start":132,"line_end":132,"column_start":14,"column_end":23},"name":"BoxStream","qualname":"::stream::BoxStream","value":"::std::boxed::Box<Stream<Item = T, Error = E> + Send>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Box<Stream + Send>`\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6399,"byte_end":6426,"line_start":168,"line_end":168,"column_start":9,"column_end":36}},{"value":"deprecated(note =\n             \"removed without replacement, recommended to use a \\\n                         local extension trait or function if needed, more \\\n                         details in https://github.com/rust-lang-nursery/futures-rs/issues/228\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93237,"byte_end":93484,"line_start":129,"line_end":131,"column_start":5,"column_end":98}}]},{"kind":"Trait","id":{"krate":0,"index":1439},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":95854,"byte_end":95860,"line_start":184,"line_end":184,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1449},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1507}],"decl_id":null,"docs":" A stream of values, not all of which may have been produced yet.","sig":null,"attributes":[{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":95795,"byte_end":95843,"line_start":183,"line_end":183,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1440},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":95932,"byte_end":95936,"line_start":186,"line_end":186,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Stream::Item","value":"type Item;","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" The type of item this stream will yield on success.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1441},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":96000,"byte_end":96005,"line_start":189,"line_end":189,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::Stream::Error","value":"type Error;","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" The type of error this stream may generate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":97316,"byte_end":97320,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"poll","qualname":"::stream::Stream::poll","value":"fn (&mut self) -> Poll<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Attempt to pull out the next value of this stream, returning `None` if\n the stream is finished.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":98773,"byte_end":98777,"line_start":245,"line_end":245,"column_start":8,"column_end":12},"name":"wait","qualname":"::stream::Stream::wait","value":"fn (self) -> Wait<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Creates an iterator which blocks the current thread until each item of\n this stream is resolved.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":98738,"byte_end":98765,"line_start":244,"line_end":244,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":100030,"byte_end":100035,"line_start":277,"line_end":277,"column_start":8,"column_end":13},"name":"boxed","qualname":"::stream::Stream::boxed","value":"fn (self) -> BoxStream<Self::Item, Self::Error>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Convenience function for turning this stream into a trait object.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":99699,"byte_end":99726,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"deprecated(note =\n             \"removed without replacement, recommended to use a \\\n                         local extension trait or function if needed, more \\\n                         details in https://github.com/rust-lang-nursery/futures-rs/issues/228\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":99750,"byte_end":99997,"line_start":273,"line_end":275,"column_start":5,"column_end":98}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":100002,"byte_end":100022,"line_start":276,"line_end":276,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":100691,"byte_end":100702,"line_start":292,"line_end":292,"column_start":8,"column_end":19},"name":"into_future","qualname":"::stream::Stream::into_future","value":"fn (self) -> StreamFuture<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Converts this stream into a `Future`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":101459,"byte_end":101462,"line_start":317,"line_end":317,"column_start":8,"column_end":11},"name":"map","qualname":"::stream::Stream::map","value":"fn <U, F> (self, f: F) -> Map<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Converts a stream of type `T` to a stream of type `U`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":102281,"byte_end":102288,"line_start":343,"line_end":343,"column_start":8,"column_end":15},"name":"map_err","qualname":"::stream::Stream::map_err","value":"fn <U, F> (self, f: F) -> MapErr<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Converts a stream of error type `T` to a stream of error type `U`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":103353,"byte_end":103359,"line_start":373,"line_end":373,"column_start":8,"column_end":14},"name":"filter","qualname":"::stream::Stream::filter","value":"fn <F> (self, f: F) -> Filter<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Filters the values produced by this stream according to the provided\n predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":104539,"byte_end":104549,"line_start":409,"line_end":409,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::stream::Stream::filter_map","value":"fn <F, B> (self, f: F) -> FilterMap<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Filters the values produced by this stream while simultaneously mapping\n them to a different type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":105963,"byte_end":105967,"line_start":448,"line_end":448,"column_start":8,"column_end":12},"name":"then","qualname":"::stream::Stream::then","value":"fn <F, U> (self, f: F) -> Then<Self, F, U>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Chain on a computation for when a value is ready, passing the resulting\n item to the provided closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":107675,"byte_end":107683,"line_start":495,"line_end":495,"column_start":8,"column_end":16},"name":"and_then","qualname":"::stream::Stream::and_then","value":"fn <F, U> (self, f: F) -> AndThen<Self, F, U>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Chain on a computation for when a value is ready, passing the successful\n results to the provided closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":108918,"byte_end":108925,"line_start":522,"line_end":522,"column_start":8,"column_end":15},"name":"or_else","qualname":"::stream::Stream::or_else","value":"fn <F, U> (self, f: F) -> OrElse<Self, F, U>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Chain on a computation for when an error happens, passing the\n erroneous result to the provided closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":110275,"byte_end":110282,"line_start":563,"line_end":563,"column_start":8,"column_end":15},"name":"collect","qualname":"::stream::Stream::collect","value":"fn (self) -> Collect<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Collect all of the values of this stream into a vector, returning a\n future representing the result of that computation.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":110240,"byte_end":110267,"line_start":562,"line_end":562,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":111487,"byte_end":111494,"line_start":599,"line_end":599,"column_start":8,"column_end":15},"name":"concat2","qualname":"::stream::Stream::concat2","value":"fn (self) -> Concat2<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Concatenate all results of a stream into a single extendable\n destination, returning a future representing the end result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":112853,"byte_end":112859,"line_start":639,"line_end":639,"column_start":8,"column_end":14},"name":"concat","qualname":"::stream::Stream::concat","value":"fn (self) -> Concat<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Concatenate all results of a stream into a single extendable\n destination, returning a future representing the end result.","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.14\", note = \"please use `Stream::concat2` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":112746,"byte_end":112820,"line_start":637,"line_end":637,"column_start":5,"column_end":79}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":112825,"byte_end":112845,"line_start":638,"line_end":638,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":113961,"byte_end":113965,"line_start":669,"line_end":669,"column_start":8,"column_end":12},"name":"fold","qualname":"::stream::Stream::fold","value":"fn <F, T, Fut> (self, init: T, f: F) -> Fold<Self, F, Fut, T>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Execute an accumulating computation over a stream, collecting all the\n values into one final result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":115390,"byte_end":115397,"line_start":711,"line_end":711,"column_start":8,"column_end":15},"name":"flatten","qualname":"::stream::Stream::flatten","value":"fn (self) -> Flatten<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Flattens a stream of streams into just one continuous stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":115942,"byte_end":115952,"line_start":726,"line_end":726,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::stream::Stream::skip_while","value":"fn <P, R> (self, pred: P) -> SkipWhile<Self, P, R>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Skip elements on this stream while the predicate provided resolves to\n `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":116510,"byte_end":116520,"line_start":740,"line_end":740,"column_start":8,"column_end":18},"name":"take_while","qualname":"::stream::Stream::take_while","value":"fn <P, R> (self, pred: P) -> TakeWhile<Self, P, R>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Take elements from this stream while the predicate provided resolves to\n `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":117499,"byte_end":117507,"line_start":762,"line_end":762,"column_start":8,"column_end":16},"name":"for_each","qualname":"::stream::Stream::for_each","value":"fn <F, U> (self, f: F) -> ForEach<Self, F, U>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Runs this stream to completion, executing the provided closure for each\n element on the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":118266,"byte_end":118274,"line_start":781,"line_end":781,"column_start":8,"column_end":16},"name":"from_err","qualname":"::stream::Stream::from_err","value":"fn <E> (self) -> FromErr<Self, E>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Map this stream's error to any error implementing `From` for\n this stream's `Error`, returning a new stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":118821,"byte_end":118825,"line_start":797,"line_end":797,"column_start":8,"column_end":12},"name":"take","qualname":"::stream::Stream::take","value":"fn (self, amt: u64) -> Take<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Creates a new stream of at most `amt` items of the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":119312,"byte_end":119316,"line_start":812,"line_end":812,"column_start":8,"column_end":12},"name":"skip","qualname":"::stream::Stream::skip","value":"fn (self, amt: u64) -> Skip<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Creates a new stream which skips `amt` items of the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":120185,"byte_end":120189,"line_start":833,"line_end":833,"column_start":8,"column_end":12},"name":"fuse","qualname":"::stream::Stream::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Fuse a stream such that `poll` will never again be called once it has\n finished.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":120928,"byte_end":120934,"line_start":858,"line_end":858,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::stream::Stream::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Borrows a stream, rather than consuming it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":122563,"byte_end":122575,"line_start":898,"line_end":898,"column_start":8,"column_end":20},"name":"catch_unwind","qualname":"::stream::Stream::catch_unwind","value":"fn (self) -> CatchUnwind<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Catches unwinding panics while polling the stream.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":122528,"byte_end":122555,"line_start":897,"line_end":897,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":123457,"byte_end":123465,"line_start":918,"line_end":918,"column_start":8,"column_end":16},"name":"buffered","qualname":"::stream::Stream::buffered","value":"fn (self, amt: usize) -> Buffered<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" An adaptor for creating a buffered list of pending futures.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":123422,"byte_end":123449,"line_start":917,"line_end":917,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":124400,"byte_end":124416,"line_start":939,"line_end":939,"column_start":8,"column_end":24},"name":"buffer_unordered","qualname":"::stream::Stream::buffer_unordered","value":"fn (self, amt: usize) -> BufferUnordered<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" An adaptor for creating a buffered list of pending futures (unordered).","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":124365,"byte_end":124392,"line_start":938,"line_end":938,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":124972,"byte_end":124977,"line_start":953,"line_end":953,"column_start":8,"column_end":13},"name":"merge","qualname":"::stream::Stream::merge","value":"fn <S> (self, other: S) -> Merge<Self, S>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" An adapter for merging the output of two streams.","sig":null,"attributes":[{"value":"deprecated(note = \"functionality provided by `select` now\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":124877,"byte_end":124939,"line_start":951,"line_end":951,"column_start":5,"column_end":67}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":124944,"byte_end":124964,"line_start":952,"line_end":952,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":125441,"byte_end":125444,"line_start":965,"line_end":965,"column_start":8,"column_end":11},"name":"zip","qualname":"::stream::Stream::zip","value":"fn <S> (self, other: S) -> Zip<Self, S>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" An adapter for zipping two streams together.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":126354,"byte_end":126359,"line_start":991,"line_end":991,"column_start":8,"column_end":13},"name":"chain","qualname":"::stream::Stream::chain","value":"fn <S> (self, other: S) -> Chain<Self, S>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Adapter for chaining two stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":126683,"byte_end":126691,"line_start":1001,"line_end":1001,"column_start":8,"column_end":16},"name":"peekable","qualname":"::stream::Stream::peekable","value":"fn (self) -> Peekable<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Creates a new stream which exposes a `peek` method.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":127745,"byte_end":127751,"line_start":1028,"line_end":1028,"column_start":8,"column_end":14},"name":"chunks","qualname":"::stream::Stream::chunks","value":"fn (self, capacity: usize) -> Chunks<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" An adaptor for chunking up items of the stream inside a vector.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":127710,"byte_end":127737,"line_start":1027,"line_end":1027,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":128429,"byte_end":128435,"line_start":1045,"line_end":1045,"column_start":8,"column_end":14},"name":"select","qualname":"::stream::Stream::select","value":"fn <S> (self, other: S) -> Select<Self, S>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Creates a stream that selects the next element from either this stream\n or the provided one, whichever is ready first.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":129365,"byte_end":129372,"line_start":1066,"line_end":1066,"column_start":8,"column_end":15},"name":"forward","qualname":"::stream::Stream::forward","value":"fn <S> (self, sink: S) -> Forward<Self, S>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" A future that completes after the given stream has been fully processed\n into the sink, including flushing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":130032,"byte_end":130037,"line_start":1084,"line_end":1084,"column_start":8,"column_end":13},"name":"split","qualname":"::stream::Stream::split","value":"fn (self) -> (SplitSink<Self>, SplitStream<Self>)","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Splits this `Stream + Sink` object into separate `Stream` and `Sink`\n objects.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":129997,"byte_end":130024,"line_start":1083,"line_end":1083,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":130477,"byte_end":130484,"line_start":1095,"line_end":1095,"column_start":8,"column_end":15},"name":"inspect","qualname":"::stream::Stream::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Do something with each item of this stream, afterwards passing it on.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":130907,"byte_end":130918,"line_start":1107,"line_end":1107,"column_start":8,"column_end":19},"name":"inspect_err","qualname":"::stream::Stream::inspect_err","value":"fn <F> (self, f: F) -> InspectErr<Self, F>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Do something with the error of this stream, afterwards passing it on.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1515},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":131882,"byte_end":131899,"line_start":1135,"line_end":1135,"column_start":8,"column_end":25},"name":"futures_unordered","qualname":"::stream::futures_unordered","value":"fn <I> (futures: I) -> FuturesUnordered<<I::Item as IntoFuture>::Future>","parent":null,"children":[],"decl_id":null,"docs":" Converts a list of futures into a `Stream` of results from the futures.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":131847,"byte_end":131874,"line_start":1134,"line_end":1134,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":1518},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sink","qualname":"::sink","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1572},{"krate":0,"index":1613},{"krate":0,"index":1631},{"krate":0,"index":1663},{"krate":0,"index":1683},{"krate":0,"index":1709},{"krate":0,"index":1742},{"krate":0,"index":4822},{"krate":0,"index":4852},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4871},{"krate":0,"index":4874},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1820}],"decl_id":null,"docs":" Asynchronous sinks","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4710},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227133,"byte_end":227137,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"With","qualname":"::sink::with::With","value":"With {  }","parent":null,"children":[{"krate":0,"index":4715},{"krate":0,"index":4716},{"krate":0,"index":4717},{"krate":0,"index":4718}],"decl_id":null,"docs":" Sink for the `Sink::with` combinator, chaining a computation to run *prior*\n to pushing a value into the underlying sink.\n","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227075,"byte_end":227121,"line_start":11,"line_end":11,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":228490,"byte_end":228497,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<With<S, U, F, Fut>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":228601,"byte_end":228608,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<With<S, U, F, Fut>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":228899,"byte_end":228909,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<With<S, U, F, Fut>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sink.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4750},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":231279,"byte_end":231290,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"WithFlatMap","qualname":"::sink::with_flat_map::WithFlatMap","value":"WithFlatMap {  }","parent":null,"children":[{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4758},{"krate":0,"index":4759}],"decl_id":null,"docs":" Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator\n to run prior to pushing a value into the underlying sink\n","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":231221,"byte_end":231267,"line_start":10,"line_end":10,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":232028,"byte_end":232035,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<WithFlatMap<S, U, F, St>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":232139,"byte_end":232146,"line_start":51,"line_end":51,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<WithFlatMap<S, U, F, St>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":232437,"byte_end":232447,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<WithFlatMap<S, U, F, St>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sink.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4766},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":234720,"byte_end":234725,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Flush","qualname":"::sink::flush::Flush","value":"Flush {  }","parent":null,"children":[{"krate":0,"index":4768}],"decl_id":null,"docs":" Future for the `Sink::flush` combinator, which polls the sink until all data\n has been flushed.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":234660,"byte_end":234708,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":234918,"byte_end":234925,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Flush<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":235100,"byte_end":235107,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Flush<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1625},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":235294,"byte_end":235304,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Flush<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consume the `Flush` and return the inner sink.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4772},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236087,"byte_end":236098,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"SinkFromErr","qualname":"::sink::from_err::SinkFromErr","value":"SinkFromErr {  }","parent":null,"children":[{"krate":0,"index":4775},{"krate":0,"index":4776}],"decl_id":null,"docs":" A sink combinator to change the error type of a sink.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236027,"byte_end":236075,"line_start":9,"line_end":9,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236374,"byte_end":236381,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<SinkFromErr<S, E>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236485,"byte_end":236492,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SinkFromErr<S, E>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1645},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236783,"byte_end":236793,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SinkFromErr<S, E>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sink.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4785},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":237860,"byte_end":237864,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"name":"Send","qualname":"::sink::send::Send","value":"Send {  }","parent":null,"children":[{"krate":0,"index":4787},{"krate":0,"index":4788}],"decl_id":null,"docs":" Future for the `Sink::send` combinator, which sends a value to a sink and\n then waits until the sink has fully flushed.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":237800,"byte_end":237848,"line_start":7,"line_end":7,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238149,"byte_end":238156,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Send<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238326,"byte_end":238333,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Send<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4792},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":239656,"byte_end":239663,"line_start":9,"line_end":9,"column_start":12,"column_end":19},"name":"SendAll","qualname":"::sink::send_all::SendAll","value":"SendAll {  }","parent":null,"children":[{"krate":0,"index":4795},{"krate":0,"index":4796},{"krate":0,"index":4797}],"decl_id":null,"docs":" Future for the `Sink::send_all` combinator, which sends a stream of values\n to a sink and then waits until the sink has fully flushed those values.\n","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":239596,"byte_end":239644,"line_start":8,"line_end":8,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":4802},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242255,"byte_end":242265,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"SinkMapErr","qualname":"::sink::map_err::SinkMapErr","value":"SinkMapErr {  }","parent":null,"children":[{"krate":0,"index":4805},{"krate":0,"index":4806}],"decl_id":null,"docs":" Sink for the `Sink::sink_map_err` combinator.\n","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242197,"byte_end":242243,"line_start":7,"line_end":7,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242492,"byte_end":242499,"line_start":19,"line_end":19,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<SinkMapErr<S, E>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242603,"byte_end":242610,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SinkMapErr<S, E>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242901,"byte_end":242911,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SinkMapErr<S, E>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sink.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1754},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244243,"byte_end":244249,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Fanout","qualname":"::sink::fanout::Fanout","value":"Fanout {  }","parent":null,"children":[{"krate":0,"index":1757},{"krate":0,"index":1758}],"decl_id":null,"docs":" Sink that clones incoming items and forwards them to two sinks at the same time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244599,"byte_end":244609,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Fanout<A, B>>::into_inner","value":"fn (self) -> (A, B)","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sinks.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4881},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936039,"byte_end":8936045,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::sink::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4885}],"decl_id":null,"docs":" Sink for the `Sink::buffer` combinator, which buffers up to some fixed\n number of values when the underlying sink is unable to accept them.\n","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8935981,"byte_end":8936027,"line_start":11,"line_end":11,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4836},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936446,"byte_end":8936453,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Buffer<S>>::get_ref","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4837},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936557,"byte_end":8936564,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Buffer<S>>::get_mut","value":"fn (&mut self) -> &mut S","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the inner sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936855,"byte_end":8936865,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Buffer<S>>::into_inner","value":"fn (self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Consumes this combinator, returning the underlying sink.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4889},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8938971,"byte_end":8938975,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Wait","qualname":"::sink::wait::Wait","value":"Wait {  }","parent":null,"children":[{"krate":0,"index":4891}],"decl_id":null,"docs":" A sink combinator which converts an asynchronous sink to a **blocking\n sink**.","sig":null,"attributes":[{"value":"must_use = \"sinks do nothing unless used\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8938898,"byte_end":8938942,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":4859},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8939780,"byte_end":8939784,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"send","qualname":"<Wait<S>>::send","value":"fn (&mut self, value: S::SinkItem) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Sends a value to this sink, blocking the current thread until it's able\n to do so.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4860},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8940273,"byte_end":8940278,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"flush","qualname":"<Wait<S>>::flush","value":"fn (&mut self) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Flushes any buffered data in this sink, blocking the current thread\n until it's entirely flushed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4861},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8940675,"byte_end":8940680,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"close","qualname":"<Wait<S>>::close","value":"fn (&mut self) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Close this sink, blocking the current thread until it's entirely closed.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4871},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209168,"byte_end":209175,"line_start":55,"line_end":55,"column_start":14,"column_end":21},"name":"BoxSink","qualname":"::sink::BoxSink","value":"::std::boxed::Box<Sink<SinkItem = T, SinkError = E> + ::core::marker::Send>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Box<Sink + Send>`\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6399,"byte_end":6426,"line_start":168,"line_end":168,"column_start":9,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":1793},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":211519,"byte_end":211523,"line_start":117,"line_end":117,"column_start":11,"column_end":15},"name":"Sink","qualname":"::sink::Sink","value":"Sink","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1804},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818}],"decl_id":null,"docs":" A `Sink` is a value into which other values can be sent, asynchronously.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1794},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":211584,"byte_end":211592,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"SinkItem","qualname":"::sink::Sink::SinkItem","value":"type SinkItem;","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" The type of value that the sink accepts.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1795},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":211673,"byte_end":211682,"line_start":122,"line_end":122,"column_start":10,"column_end":19},"name":"SinkError","qualname":"::sink::Sink::SinkError","value":"type SinkError;","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" The type of value produced by the sink when an error occurs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":213645,"byte_end":213655,"line_start":162,"line_end":162,"column_start":8,"column_end":18},"name":"start_send","qualname":"::sink::Sink::start_send","value":"fn (&mut self, item: Self::SinkItem) -> StartSend<Self::SinkItem, Self::SinkError>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Begin the process of sending a value to the sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":215984,"byte_end":215997,"line_start":213,"line_end":213,"column_start":8,"column_end":21},"name":"poll_complete","qualname":"::sink::Sink::poll_complete","value":"fn (&mut self) -> Poll<(), Self::SinkError>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Flush all output from this sink, if necessary.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":219376,"byte_end":219381,"line_start":281,"line_end":281,"column_start":8,"column_end":13},"name":"close","qualname":"::sink::Sink::close","value":"fn (&mut self) -> Poll<(), Self::SinkError>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" A method to indicate that no more values will ever be pushed into this\n sink.","sig":null,"attributes":[{"value":"cfg(feature = \"with-deprecated\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":219333,"byte_end":219368,"line_start":280,"line_end":280,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":219983,"byte_end":219987,"line_start":296,"line_end":296,"column_start":8,"column_end":12},"name":"wait","qualname":"::sink::Sink::wait","value":"fn (self) -> Wait<Self>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Creates a new object which will produce a synchronous sink.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":219948,"byte_end":219975,"line_start":295,"line_end":295,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":220642,"byte_end":220646,"line_start":313,"line_end":313,"column_start":8,"column_end":12},"name":"with","qualname":"::sink::Sink::with","value":"fn <U, F, Fut> (self, f: F) -> With<Self, U, F, Fut>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Composes a function *in front of* the sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":221985,"byte_end":221998,"line_start":352,"line_end":352,"column_start":8,"column_end":21},"name":"with_flat_map","qualname":"::sink::Sink::with_flat_map","value":"fn <U, F, St> (self, f: F) -> WithFlatMap<Self, U, F, St>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Composes a function *in front of* the sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":222731,"byte_end":222743,"line_start":375,"line_end":375,"column_start":8,"column_end":20},"name":"sink_map_err","qualname":"::sink::Sink::sink_map_err","value":"fn <F, E> (self, f: F) -> SinkMapErr<Self, F>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Transforms the error returned by the sink.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":223125,"byte_end":223138,"line_start":386,"line_end":386,"column_start":8,"column_end":21},"name":"sink_from_err","qualname":"::sink::Sink::sink_from_err","value":"fn <E> (self) -> from_err::SinkFromErr<Self, E>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Map this sink's error to any error implementing `From` for this sink's\n `Error`, returning a new sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":223925,"byte_end":223931,"line_start":406,"line_end":406,"column_start":8,"column_end":14},"name":"buffer","qualname":"::sink::Sink::buffer","value":"fn (self, amt: usize) -> Buffer<Self>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Adds a fixed-size buffer to the current sink.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":223890,"byte_end":223917,"line_start":405,"line_end":405,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":224219,"byte_end":224225,"line_start":416,"line_end":416,"column_start":8,"column_end":14},"name":"fanout","qualname":"::sink::Sink::fanout","value":"fn <S> (self, other: S) -> Fanout<Self, S>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" Fanout items to multiple sinks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":224763,"byte_end":224768,"line_start":430,"line_end":430,"column_start":8,"column_end":13},"name":"flush","qualname":"::sink::Sink::flush","value":"fn (self) -> Flush<Self>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" A future that completes when the sink has finished processing all\n pending requests.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":225228,"byte_end":225232,"line_start":444,"line_end":444,"column_start":8,"column_end":12},"name":"send","qualname":"::sink::Sink::send","value":"fn (self, item: Self::SinkItem) -> Send<Self>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" A future that completes after the given item has been fully processed\n into the sink, including flushing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":226089,"byte_end":226097,"line_start":464,"line_end":464,"column_start":8,"column_end":16},"name":"send_all","qualname":"::sink::Sink::send_all","value":"fn <S> (self, stream: S) -> SendAll<Self, S>","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":" A future that completes after the given stream has been fully processed\n into the sink, including flushing.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1907},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":281435,"byte_end":281445,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"AtomicTask","qualname":"::task_impl::atomic_task::AtomicTask","value":"AtomicTask {  }","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909}],"decl_id":null,"docs":" A synchronization primitive for task notification.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286618,"byte_end":286621,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicTask>::new","value":"fn () -> AtomicTask","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicTask` initialized with the given `Task`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":287042,"byte_end":287050,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicTask>::register","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Registers the current task to be notified on calls to `notify`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":288003,"byte_end":288016,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"register_task","qualname":"<AtomicTask>::register_task","value":"fn (&self, task: Task) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Registers the provided task to be notified on calls to `notify`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":290943,"byte_end":290949,"line_start":237,"line_end":237,"column_start":12,"column_end":18},"name":"notify","qualname":"<AtomicTask>::notify","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Notifies the task that last called `register`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1966},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":296701,"byte_end":296705,"line_start":134,"line_end":134,"column_start":15,"column_end":19},"name":"init","qualname":"::task_impl::core::init","value":"fn (get: fn() -> *mut u8, set: fn(*mut u8)) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Initialize the `futures` task system.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4924},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327415,"byte_end":327423,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"LocalKey","qualname":"::task_impl::std::data::LocalKey","value":"LocalKey { __key, __init }","parent":null,"children":[{"krate":0,"index":4926},{"krate":0,"index":4927}],"decl_id":null,"docs":" A key for task-local data stored in a future's task.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4926},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327615,"byte_end":327620,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"__key","qualname":"::task_impl::std::data::LocalKey::__key","value":"fn() -> core::any::TypeId","parent":{"krate":0,"index":4924},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4927},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327665,"byte_end":327671,"line_start":65,"line_end":65,"column_start":9,"column_end":15},"name":"__init","qualname":"::task_impl::std::data::LocalKey::__init","value":"fn() -> T","parent":{"krate":0,"index":4924},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":329064,"byte_end":329068,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"with","qualname":"<LocalKey<T>>::with","value":"fn <F, R> (&'static self, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Access this task-local key, running the provided closure with a\n reference to the value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4931},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333083,"byte_end":333089,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"TaskRc","qualname":"::task_impl::std::task_rc::TaskRc","value":"TaskRc {  }","parent":null,"children":[{"krate":0,"index":4933},{"krate":0,"index":4934}],"decl_id":null,"docs":" A reference to a piece of data that's accessible only within a specific\n `Task`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":334043,"byte_end":334046,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<TaskRc<A>>::new","value":"fn (a: A) -> TaskRc<A>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new piece of task-local data into this task, returning a\n reference to it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":334738,"byte_end":334742,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"name":"with","qualname":"<TaskRc<A>>::with","value":"fn <F, R> (&self, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Operate with a reference to the underlying data.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2087},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":298687,"byte_end":298697,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"is_in_task","qualname":"::task_impl::std::is_in_task","value":"fn () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether the caller is running in a task (and so can use task_local!).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":303705,"byte_end":303716,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"poll_future","qualname":"<Spawn<F>>::poll_future","value":"fn (&mut self, unpark: Arc<Unpark>) -> Poll<F::Item, F::Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `poll_future_notify` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":303597,"byte_end":303668,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":303673,"byte_end":303693,"line_start":221,"line_end":221,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":304174,"byte_end":304185,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"wait_future","qualname":"<Spawn<F>>::wait_future","value":"fn (&mut self) -> Result<F::Item, F::Error>","parent":null,"children":[],"decl_id":null,"docs":" Waits for the internal future to complete, blocking this thread's\n execution until it does.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":304585,"byte_end":304592,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"execute","qualname":"<Spawn<F>>::execute","value":"fn (self, exec: Arc<Executor>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":304535,"byte_end":304548,"line_start":246,"line_end":246,"column_start":5,"column_end":18}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":304553,"byte_end":304573,"line_start":247,"line_end":247,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305358,"byte_end":305369,"line_start":269,"line_end":269,"column_start":12,"column_end":23},"name":"poll_stream","qualname":"<Spawn<S>>::poll_stream","value":"fn (&mut self, unpark: Arc<Unpark>) -> Poll<Option<S::Item>, S::Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `poll_stream_notify` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305231,"byte_end":305302,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305307,"byte_end":305327,"line_start":267,"line_end":267,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305654,"byte_end":305665,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"wait_stream","qualname":"<Spawn<S>>::wait_stream","value":"fn (&mut self) -> Option<Result<S::Item, S::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait_future`, except only waits for the next element to arrive on\n the underlying stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306285,"byte_end":306295,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"start_send","qualname":"<Spawn<S>>::start_send","value":"fn (&mut self, value: S::SinkItem, unpark: &Arc<Unpark>) -> StartSend<S::SinkItem, S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `start_send_notify` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306178,"byte_end":306248,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306253,"byte_end":306273,"line_start":294,"line_end":294,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306624,"byte_end":306634,"line_start":303,"line_end":303,"column_start":12,"column_end":22},"name":"poll_flush","qualname":"<Spawn<S>>::poll_flush","value":"fn (&mut self, unpark: &Arc<Unpark>) -> Poll<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `poll_flush_notify` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306498,"byte_end":306568,"line_start":300,"line_end":300,"column_start":5,"column_end":75}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306573,"byte_end":306593,"line_start":301,"line_end":301,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":307112,"byte_end":307121,"line_start":313,"line_end":313,"column_start":12,"column_end":21},"name":"wait_send","qualname":"<Spawn<S>>::wait_send","value":"fn (&mut self, mut value: S::SinkItem) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until it's able to send `value` on this sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":307905,"byte_end":307915,"line_start":335,"line_end":335,"column_start":12,"column_end":22},"name":"wait_flush","qualname":"<Spawn<S>>::wait_flush","value":"fn (&mut self) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until it's able to flush this sink.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":308475,"byte_end":308485,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"wait_close","qualname":"<Spawn<S>>::wait_close","value":"fn (&mut self) -> Result<(), S::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until it's able to close this sink.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2144},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":309200,"byte_end":309206,"line_start":373,"line_end":373,"column_start":11,"column_end":17},"name":"Unpark","qualname":"::task_impl::std::Unpark","value":"Unpark: Send + Sync","parent":null,"children":[{"krate":0,"index":2145}],"decl_id":null,"docs":" A trait which represents a sink of notifications that a future is ready to\n make progress.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Notify` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":309130,"byte_end":309189,"line_start":372,"line_end":372,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":309469,"byte_end":309475,"line_start":379,"line_end":379,"column_start":8,"column_end":14},"name":"unpark","qualname":"::task_impl::std::Unpark::unpark","value":"fn (&self) -> ()","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" Indicates that an associated future and/or task are ready to make\n progress.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2146},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310045,"byte_end":310053,"line_start":393,"line_end":393,"column_start":11,"column_end":19},"name":"Executor","qualname":"::task_impl::std::Executor","value":"Executor: Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":2147}],"decl_id":null,"docs":" A trait representing requests to poll futures.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310000,"byte_end":310013,"line_start":391,"line_end":391,"column_start":1,"column_end":14}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310014,"byte_end":310034,"line_start":392,"line_end":392,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310154,"byte_end":310161,"line_start":395,"line_end":395,"column_start":8,"column_end":15},"name":"execute","qualname":"::task_impl::std::Executor::execute","value":"fn (&self, r: Run) -> ()","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Requests that `Run` is executed soon on the given executor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2148},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310291,"byte_end":310294,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"Run","qualname":"::task_impl::std::Run","value":"Run {  }","parent":null,"children":[{"krate":0,"index":2149},{"krate":0,"index":2150}],"decl_id":null,"docs":" Units of work submitted to an `Executor`, currently only created\n internally.\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310266,"byte_end":310279,"line_start":400,"line_end":400,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310619,"byte_end":310622,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"run","qualname":"<Run>::run","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Actually run the task (invoking `poll` on its future) on the current\n thread.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2175},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":315468,"byte_end":315485,"line_start":573,"line_end":573,"column_start":8,"column_end":25},"name":"with_unpark_event","qualname":"::task_impl::std::with_unpark_event","value":"fn <F, R> (event: UnparkEvent, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" For the duration of the given callback, add an \"unpark event\" to be\n triggered when the task handle is used to unpark the task.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `FuturesUnordered` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":315370,"byte_end":315439,"line_start":571,"line_end":571,"column_start":1,"column_end":70}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":315440,"byte_end":315460,"line_start":572,"line_end":572,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":4992},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316228,"byte_end":316239,"line_start":597,"line_end":597,"column_start":12,"column_end":23},"name":"UnparkEvent","qualname":"::task_impl::std::UnparkEvent","value":"UnparkEvent {  }","parent":null,"children":[{"krate":0,"index":4993},{"krate":0,"index":4994}],"decl_id":null,"docs":" A set insertion to trigger upon `unpark`.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `FuturesUnordered` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316126,"byte_end":316195,"line_start":595,"line_end":595,"column_start":1,"column_end":70}},{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316196,"byte_end":316216,"line_start":596,"line_end":596,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316502,"byte_end":316505,"line_start":607,"line_end":607,"column_start":12,"column_end":15},"name":"new","qualname":"<UnparkEvent>::new","value":"fn (set: Arc<EventSet>, id: usize) -> UnparkEvent","parent":null,"children":[],"decl_id":null,"docs":" Construct an unpark event that will insert `id` into `set` when\n triggered.\n","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `FuturesUnordered` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316421,"byte_end":316490,"line_start":606,"line_end":606,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2184},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":317285,"byte_end":317293,"line_start":634,"line_end":634,"column_start":11,"column_end":19},"name":"EventSet","qualname":"::task_impl::std::EventSet","value":"EventSet: Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":2185}],"decl_id":null,"docs":" A concurrent set which allows for the insertion of `usize` values.","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.18\", note =\n             \"recommended to use `FuturesUnordered` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":317189,"byte_end":317274,"line_start":633,"line_end":633,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":317367,"byte_end":317373,"line_start":636,"line_end":636,"column_start":8,"column_end":14},"name":"insert","qualname":"::task_impl::std::EventSet::insert","value":"fn (&self, id: usize) -> ()","parent":{"krate":0,"index":2184},"children":[],"decl_id":null,"docs":" Insert the given ID into the set\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4997},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":254145,"byte_end":254149,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"Task","qualname":"::task_impl::Task","value":"Task {  }","parent":null,"children":[{"krate":0,"index":4998},{"krate":0,"index":4999},{"krate":0,"index":5000}],"decl_id":null,"docs":" A handle to a \"task\", which represents a single lightweight \"thread\" of\n execution driving a future to completion.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2220},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":255414,"byte_end":255421,"line_start":117,"line_end":117,"column_start":8,"column_end":15},"name":"current","qualname":"::task_impl::current","value":"fn () -> Task","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the current task to call `notify` at a later date.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2222},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":255742,"byte_end":255746,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"park","qualname":"::task_impl::park","value":"fn () -> Task","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `current`\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":255690,"byte_end":255734,"line_start":131,"line_end":131,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2224},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":256268,"byte_end":256274,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"notify","qualname":"<Task>::notify","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Indicate that the task should attempt to poll its future in a timely\n fashion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":256429,"byte_end":256435,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"unpark","qualname":"<Task>::unpark","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `notify`\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":256374,"byte_end":256417,"line_start":151,"line_end":151,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":258591,"byte_end":258601,"line_start":193,"line_end":193,"column_start":12,"column_end":22},"name":"is_current","qualname":"<Task>::is_current","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` when called from within the context of the task.","sig":null,"attributes":[{"value":"deprecated(note = \"intended to be removed, see docs for details\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":258511,"byte_end":258579,"line_start":192,"line_end":192,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":259674,"byte_end":259693,"line_start":216,"line_end":216,"column_start":12,"column_end":31},"name":"will_notify_current","qualname":"<Task>::will_notify_current","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" This function is intended as a performance optimization for structures\n which store a `Task` internally.","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":259642,"byte_end":259662,"line_start":215,"line_end":215,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":260571,"byte_end":260576,"line_start":241,"line_end":241,"column_start":12,"column_end":17},"name":"Spawn","qualname":"::task_impl::Spawn","value":"Spawn {  }","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236}],"decl_id":null,"docs":" Representation of a spawned future/stream.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2237},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261165,"byte_end":261170,"line_start":257,"line_end":257,"column_start":8,"column_end":13},"name":"spawn","qualname":"::task_impl::spawn","value":"fn <T> (obj: T) -> Spawn<T>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a future or stream, returning it and the new task responsible for\n running it to completion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261397,"byte_end":261404,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Spawn<T>>::get_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get a shared reference to the object the Spawn is wrapping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261525,"byte_end":261532,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Spawn<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the object the Spawn is wrapping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261650,"byte_end":261660,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Spawn<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consume the Spawn, returning its inner object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261830,"byte_end":261844,"line_start":283,"line_end":283,"column_start":12,"column_end":26},"name":"poll_fn_notify","qualname":"<Spawn<T>>::poll_fn_notify","value":"fn <N, F, R> (&mut self, notify: &N, id: usize, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Calls the provided closure, scheduling notifications to be sent to the\n `notify` argument.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":263780,"byte_end":263798,"line_start":323,"line_end":323,"column_start":12,"column_end":30},"name":"poll_future_notify","qualname":"<Spawn<T>>::poll_future_notify","value":"fn <N> (&mut self, notify: &N, id: usize) -> Poll<T::Item, T::Error>","parent":null,"children":[],"decl_id":null,"docs":" Polls the internal future, scheduling notifications to be sent to the\n `notify` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2252},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":264148,"byte_end":264166,"line_start":333,"line_end":333,"column_start":12,"column_end":30},"name":"poll_stream_notify","qualname":"<Spawn<T>>::poll_stream_notify","value":"fn <N> (&mut self, notify: &N, id: usize) -> Poll<Option<T::Item>, T::Error>","parent":null,"children":[],"decl_id":null,"docs":" Like `poll_future_notify`, except polls the underlying stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":264754,"byte_end":264771,"line_start":348,"line_end":348,"column_start":12,"column_end":29},"name":"start_send_notify","qualname":"<Spawn<T>>::start_send_notify","value":"fn <N> (&mut self, value: T::SinkItem, notify: &N, id: usize) -> StartSend<T::SinkItem, T::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Invokes the underlying `start_send` method with this task in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":265424,"byte_end":265441,"line_start":364,"line_end":364,"column_start":12,"column_end":29},"name":"poll_flush_notify","qualname":"<Spawn<T>>::poll_flush_notify","value":"fn <N> (&mut self, notify: &N, id: usize) -> Poll<(), T::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Invokes the underlying `poll_complete` method with this task in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":266019,"byte_end":266031,"line_start":379,"line_end":379,"column_start":12,"column_end":24},"name":"close_notify","qualname":"<Spawn<T>>::close_notify","value":"fn <N> (&mut self, notify: &N, id: usize) -> Poll<(), T::SinkError>","parent":null,"children":[],"decl_id":null,"docs":" Invokes the underlying `close` method with this task in place.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2271},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":267730,"byte_end":267736,"line_start":426,"line_end":426,"column_start":11,"column_end":17},"name":"Notify","qualname":"::task_impl::Notify","value":"Notify: Send + Sync","parent":null,"children":[{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274}],"decl_id":null,"docs":" A trait which represents a sink of notifications that a future is ready to\n make progress.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":268622,"byte_end":268628,"line_start":444,"line_end":444,"column_start":8,"column_end":14},"name":"notify","qualname":"::task_impl::Notify::notify","value":"fn (&self, id: usize) -> ()","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" Indicates that an associated future and/or task are ready to make\n progress.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":269777,"byte_end":269785,"line_start":466,"line_end":466,"column_start":8,"column_end":16},"name":"clone_id","qualname":"::task_impl::Notify::clone_id","value":"fn (&self, id: usize) -> usize","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" This function is called whenever a new copy of `id` is needed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":270287,"byte_end":270294,"line_start":477,"line_end":477,"column_start":8,"column_end":15},"name":"drop_id","qualname":"::task_impl::Notify::drop_id","value":"fn (&self, id: usize) -> ()","parent":{"krate":0,"index":2271},"children":[],"decl_id":null,"docs":" All instances of `Task` store an `id` that they're going to internally\n notify with, and this function is called when the `Task` is dropped.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2275},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":271475,"byte_end":271486,"line_start":503,"line_end":503,"column_start":8,"column_end":19},"name":"with_notify","qualname":"::task_impl::with_notify","value":"fn <F, T, R> (notify: &T, id: usize, f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Sets the `NotifyHandle` of the current task for the duration of the provided\n closure.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2281},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":274445,"byte_end":274457,"line_start":566,"line_end":566,"column_start":18,"column_end":30},"name":"UnsafeNotify","qualname":"::task_impl::UnsafeNotify","value":"UnsafeNotify: Notify","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283}],"decl_id":null,"docs":" An unsafe trait for implementing custom forms of memory management behind a\n `Task`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":275272,"byte_end":275281,"line_start":582,"line_end":582,"column_start":15,"column_end":24},"name":"clone_raw","qualname":"::task_impl::UnsafeNotify::clone_raw","value":"fn (&self) -> NotifyHandle","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":276338,"byte_end":276346,"line_start":607,"line_end":607,"column_start":15,"column_end":23},"name":"drop_raw","qualname":"::task_impl::UnsafeNotify::drop_raw","value":"fn (&self) -> ()","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" Drops this instance of `UnsafeNotify`, deallocating resources\n associated with it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2284},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277654,"byte_end":277666,"line_start":633,"line_end":633,"column_start":12,"column_end":24},"name":"NotifyHandle","qualname":"::task_impl::NotifyHandle","value":"NotifyHandle {  }","parent":null,"children":[{"krate":0,"index":2285}],"decl_id":null,"docs":" A `NotifyHandle` is the core value through which notifications are routed\n in the `futures` crate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278308,"byte_end":278311,"line_start":651,"line_end":651,"column_start":19,"column_end":22},"name":"new","qualname":"<NotifyHandle>::new","value":"fn (inner: *mut UnsafeNotify) -> NotifyHandle","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `NotifyHandle` directly.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278280,"byte_end":278289,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278488,"byte_end":278494,"line_start":656,"line_end":656,"column_start":12,"column_end":18},"name":"notify","qualname":"<NotifyHandle>::notify","value":"fn (&self, id: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invokes the underlying instance of `Notify` with the provided `id`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2330},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task.rs","parent":null,"children":[{"krate":0,"index":2331},{"krate":0,"index":2338},{"krate":0,"index":2344},{"krate":0,"index":2349}],"decl_id":null,"docs":" Tasks used to drive a future computation","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2350},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"executor","qualname":"::executor","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/executor.rs","parent":null,"children":[{"krate":0,"index":2351},{"krate":0,"index":2355},{"krate":0,"index":2360}],"decl_id":null,"docs":" Executors","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2363},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2469},{"krate":0,"index":2700},{"krate":0,"index":2782}],"decl_id":null,"docs":" Future-aware synchronization","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7277,"byte_end":7304,"line_start":208,"line_end":208,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":2364},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::sync::oneshot","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2374},{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":5012},{"krate":0,"index":5015},{"krate":0,"index":5018},{"krate":0,"index":5021},{"krate":0,"index":5024},{"krate":0,"index":5030},{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2396},{"krate":0,"index":2402},{"krate":0,"index":5033},{"krate":0,"index":5042},{"krate":0,"index":5041},{"krate":0,"index":5039},{"krate":0,"index":5037},{"krate":0,"index":5035},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2413},{"krate":0,"index":2418},{"krate":0,"index":2421},{"krate":0,"index":2425},{"krate":0,"index":2429},{"krate":0,"index":2433},{"krate":0,"index":2436},{"krate":0,"index":2440},{"krate":0,"index":2444},{"krate":0,"index":2450},{"krate":0,"index":2454},{"krate":0,"index":2458},{"krate":0,"index":2463},{"krate":0,"index":2466}],"decl_id":null,"docs":" A one-shot, futures-aware channel\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5012},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":340305,"byte_end":340313,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5014}],"decl_id":null,"docs":" A future representing the completion of a computation happening elsewhere in\n memory.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":340228,"byte_end":340276,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":340543,"byte_end":340549,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5020}],"decl_id":null,"docs":" Represents the completion half of a oneshot through which the result of a\n computation is signaled.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2383},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":343116,"byte_end":343123,"line_start":97,"line_end":97,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::oneshot::channel","value":"fn <T> () -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new futures-aware, one-shot channel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":351969,"byte_end":351977,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"complete","qualname":"<Sender<T>>::complete","value":"fn (self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `send`\", since = \"0.1.11\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":351839,"byte_end":351898,"line_start":323,"line_end":323,"column_start":5,"column_end":64}},{"value":"cfg(feature = \"with-deprecated\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":351922,"byte_end":351957,"line_start":325,"line_end":325,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":352545,"byte_end":352549,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"fn (self, t: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Completes this oneshot with a successful result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":353908,"byte_end":353919,"line_start":371,"line_end":371,"column_start":12,"column_end":23},"name":"poll_cancel","qualname":"<Sender<T>>::poll_cancel","value":"fn (&mut self) -> Poll<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Polls this `Sender` half to detect whether the `Receiver` this has\n paired with has gone away.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":354708,"byte_end":354719,"line_start":388,"line_end":388,"column_start":12,"column_end":23},"name":"is_canceled","qualname":"<Sender<T>>::is_canceled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests to see whether this `Sender`'s corresponding `Receiver`\n has gone away.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5033},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355022,"byte_end":355030,"line_start":402,"line_end":402,"column_start":12,"column_end":20},"name":"Canceled","qualname":"::sync::oneshot::Canceled","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>`\n is dropped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355696,"byte_end":355701,"line_start":423,"line_end":423,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Gracefully close this receiver, preventing sending any future messages.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":356240,"byte_end":356248,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"fn (&mut self) -> Result<Option<T>, Canceled>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a message outside of the context of a task.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2421},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":357120,"byte_end":357131,"line_start":468,"line_end":468,"column_start":12,"column_end":23},"name":"SpawnHandle","qualname":"::sync::oneshot::SpawnHandle","value":"SpawnHandle {  }","parent":null,"children":[{"krate":0,"index":2424}],"decl_id":null,"docs":" Handle returned from the `spawn` function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2429},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":357348,"byte_end":357355,"line_start":478,"line_end":478,"column_start":12,"column_end":19},"name":"Execute","qualname":"::sync::oneshot::Execute","value":"Execute {  }","parent":null,"children":[{"krate":0,"index":2431},{"krate":0,"index":2432}],"decl_id":null,"docs":" Type of future which `Execute` instances below must be able to spawn.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2433},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":358738,"byte_end":358743,"line_start":509,"line_end":509,"column_start":8,"column_end":13},"name":"spawn","qualname":"::sync::oneshot::spawn","value":"fn <F, E> (future: F, executor: &E) -> SpawnHandle<F::Item, F::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `future` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the completion of the future.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2436},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":359457,"byte_end":359465,"line_start":529,"line_end":529,"column_start":8,"column_end":16},"name":"spawn_fn","qualname":"::sync::oneshot::spawn_fn","value":"fn <F, R, E> (f: F, executor: &E) -> SpawnHandle<R::Item, R::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a function `f` onto the `Spawn` instance provided `s`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2443},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360007,"byte_end":360013,"line_start":543,"line_end":543,"column_start":12,"column_end":18},"name":"forget","qualname":"<SpawnHandle<T, E>>::forget","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drop this future without canceling the underlying future.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2469},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::sync::mpsc","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2492},{"krate":0,"index":2500},{"krate":0,"index":5058},{"krate":0,"index":5063},{"krate":0,"index":5066},{"krate":0,"index":5070},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":5073},{"krate":0,"index":5076},{"krate":0,"index":5079},{"krate":0,"index":5083},{"krate":0,"index":5086},{"krate":0,"index":5097},{"krate":0,"index":5093},{"krate":0,"index":5090},{"krate":0,"index":5100},{"krate":0,"index":5110},{"krate":0,"index":5106},{"krate":0,"index":5103},{"krate":0,"index":5113},{"krate":0,"index":5128},{"krate":0,"index":5124},{"krate":0,"index":5121},{"krate":0,"index":2534},{"krate":0,"index":2537},{"krate":0,"index":2540},{"krate":0,"index":2543},{"krate":0,"index":2546},{"krate":0,"index":2549},{"krate":0,"index":2552},{"krate":0,"index":2555},{"krate":0,"index":5131},{"krate":0,"index":5139},{"krate":0,"index":5142},{"krate":0,"index":5148},{"krate":0,"index":5146},{"krate":0,"index":5145},{"krate":0,"index":5150},{"krate":0,"index":5153},{"krate":0,"index":2563},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":5155},{"krate":0,"index":5158},{"krate":0,"index":2574},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2583},{"krate":0,"index":2596},{"krate":0,"index":2604},{"krate":0,"index":2609},{"krate":0,"index":2616},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2630},{"krate":0,"index":2633},{"krate":0,"index":2640},{"krate":0,"index":2645},{"krate":0,"index":2648},{"krate":0,"index":2651},{"krate":0,"index":2656},{"krate":0,"index":2661},{"krate":0,"index":2665},{"krate":0,"index":2668},{"krate":0,"index":2671},{"krate":0,"index":2677},{"krate":0,"index":2681},{"krate":0,"index":2686},{"krate":0,"index":2689},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2699}],"decl_id":null,"docs":" A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5058},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366013,"byte_end":366019,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"name":"Sender","qualname":"::sync::mpsc::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5060},{"krate":0,"index":5061},{"krate":0,"index":5062}],"decl_id":null,"docs":" The transmission end of a channel which is used to send values.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5066},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366628,"byte_end":366643,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::sync::mpsc::UnboundedSender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of a channel which is used to send values.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5073},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367028,"byte_end":367036,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::sync::mpsc::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5075}],"decl_id":null,"docs":" The receiving end of a channel which implements the `Stream` trait.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5079},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367352,"byte_end":367369,"line_start":133,"line_end":133,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::sync::mpsc::UnboundedReceiver","value":"","parent":null,"children":[],"decl_id":null,"docs":" The receiving end of a channel which implements the `Stream` trait.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5086},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367515,"byte_end":367524,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"SendError","qualname":"::sync::mpsc::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type for sending, used when the receiving end of a channel is\n dropped\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5100},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367616,"byte_end":367628,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"name":"TrySendError","qualname":"::sync::mpsc::TrySendError","value":"TrySendError {  }","parent":null,"children":[{"krate":0,"index":5102}],"decl_id":null,"docs":" Error type returned from `try_send`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2545},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368362,"byte_end":368372,"line_start":175,"line_end":175,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SendError<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":369257,"byte_end":369264,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"is_full","qualname":"<TrySendError<T>>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the channel being full\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2559},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":369506,"byte_end":369521,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<TrySendError<T>>::is_disconnected","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the receiver being dropped\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":369764,"byte_end":369774,"line_start":230,"line_end":230,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2577},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":372781,"byte_end":372788,"line_start":335,"line_end":335,"column_start":8,"column_end":15},"name":"channel","qualname":"::sync::mpsc::channel","value":"fn <T> (buffer: usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an in-memory channel implementation of the `Stream` trait with\n bounded capacity.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2579},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":373722,"byte_end":373731,"line_start":354,"line_end":354,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::sync::mpsc::unbounded","value":"fn <T> () -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an in-memory channel implementation of the `Stream` trait with\n unbounded capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":375093,"byte_end":375101,"line_start":401,"line_end":401,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"fn (&mut self, msg: T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a message on this `Sender<T>` without blocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2593},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":381928,"byte_end":381938,"line_start":594,"line_end":594,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<Sender<T>>::poll_ready","value":"fn (&mut self) -> Poll<(), SendError<()>>","parent":null,"children":[],"decl_id":null,"docs":" Polls the channel to determine if there is guaranteed to be capacity to send at least one\n item without waiting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":382251,"byte_end":382260,"line_start":604,"line_end":604,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":384556,"byte_end":384565,"line_start":674,"line_end":674,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<UnboundedSender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":384953,"byte_end":384957,"line_start":685,"line_end":685,"column_start":12,"column_end":16},"name":"send","qualname":"<UnboundedSender<T>>::send","value":"fn (&self, msg: T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends the provided message along this channel.","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `unbounded_send`\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":384871,"byte_end":384922,"line_start":683,"line_end":683,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":385304,"byte_end":385318,"line_start":694,"line_end":694,"column_start":12,"column_end":26},"name":"unbounded_send","qualname":"<UnboundedSender<T>>::unbounded_send","value":"fn (&self, msg: T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends the provided message along this channel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":388090,"byte_end":388095,"line_start":796,"line_end":796,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":395028,"byte_end":395033,"line_start":994,"line_end":994,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2656},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":395721,"byte_end":395732,"line_start":1017,"line_end":1017,"column_start":12,"column_end":23},"name":"SpawnHandle","qualname":"::sync::mpsc::SpawnHandle","value":"SpawnHandle {  }","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660}],"decl_id":null,"docs":" Handle returned from the `spawn` function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2661},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":395921,"byte_end":395928,"line_start":1023,"line_end":1023,"column_start":12,"column_end":19},"name":"Execute","qualname":"::sync::mpsc::Execute","value":"Execute {  }","parent":null,"children":[{"krate":0,"index":2663},{"krate":0,"index":2664}],"decl_id":null,"docs":" Type of future which `Executor` instances must be able to execute for `spawn`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2665},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":396865,"byte_end":396870,"line_start":1045,"line_end":1045,"column_start":8,"column_end":13},"name":"spawn","qualname":"::sync::mpsc::spawn","value":"fn <S, E> (stream: S, executor: &E, buffer: usize) -> SpawnHandle<S::Item, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `stream` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the remote stream.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2668},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":398175,"byte_end":398190,"line_start":1079,"line_end":1079,"column_start":8,"column_end":23},"name":"spawn_unbounded","qualname":"::sync::mpsc::spawn_unbounded","value":"fn <S, E> (stream: S, executor: &E) -> SpawnHandle<S::Item, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `stream` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the remote stream, with unbounded buffering.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5160},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407766,"byte_end":407772,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"BiLock","qualname":"::sync::bilock::BiLock","value":"BiLock {  }","parent":null,"children":[{"krate":0,"index":5162}],"decl_id":null,"docs":" A type of futures-powered synchronization primitive which is a mutex between\n two possible owners.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2726},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":408288,"byte_end":408291,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<BiLock<T>>::new","value":"fn (t: T) -> (BiLock<T>, BiLock<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BiLock` protecting the provided data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":409396,"byte_end":409405,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"poll_lock","qualname":"<BiLock<T>>::poll_lock","value":"fn (&self) -> Async<BiLockGuard<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire this lock, returning `NotReady` if it can't be\n acquired.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":411672,"byte_end":411676,"line_start":131,"line_end":131,"column_start":12,"column_end":16},"name":"lock","qualname":"<BiLock<T>>::lock","value":"fn (self) -> BiLockAcquire<T>","parent":null,"children":[],"decl_id":null,"docs":" Perform a \"blocking lock\" of this lock, consuming this lock handle and\n returning a future to the acquired lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":411994,"byte_end":412001,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"reunite","qualname":"<BiLock<T>>::reunite","value":"fn (self, other: Self) -> Result<T, ReuniteError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to put the two \"halves\" of a `BiLock<T>` back together and\n recover the original value. Succeeds only if the two `BiLock<T>`s\n originated from the same call to `BiLock::new`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2737},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413338,"byte_end":413350,"line_start":184,"line_end":184,"column_start":12,"column_end":24},"name":"ReuniteError","qualname":"::sync::bilock::ReuniteError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error indicating two `BiLock<T>`s were not two halves of a whole, and\n thus could not be `reunite`d.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5173},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414177,"byte_end":414188,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"BiLockGuard","qualname":"::sync::bilock::BiLockGuard","value":"BiLockGuard {  }","parent":null,"children":[{"krate":0,"index":5176}],"decl_id":null,"docs":" Returned RAII guard from the `poll_lock` method.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5181},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414788,"byte_end":414801,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"BiLockAcquire","qualname":"::sync::bilock::BiLockAcquire","value":"BiLockAcquire {  }","parent":null,"children":[{"krate":0,"index":5183}],"decl_id":null,"docs":" Future returned by `BiLock::lock` which will resolve when the lock is\n acquired.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5187},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415637,"byte_end":415651,"line_start":264,"line_end":264,"column_start":12,"column_end":26},"name":"BiLockAcquired","qualname":"::sync::bilock::BiLockAcquired","value":"BiLockAcquired {  }","parent":null,"children":[{"krate":0,"index":5189}],"decl_id":null,"docs":" Resolved value of the `BiLockAcquire<T>` future.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415793,"byte_end":415799,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"unlock","qualname":"<BiLockAcquired<T>>::unlock","value":"fn (mut self) -> BiLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Recovers the original `BiLock<T>`, unlocking this lock.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2787},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unsync","qualname":"::unsync","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mod.rs","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2927}],"decl_id":null,"docs":" Future-aware single-threaded synchronization","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7319,"byte_end":7346,"line_start":210,"line_end":210,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":2788},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::unsync::mpsc","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","parent":null,"children":[{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795},{"krate":0,"index":2798},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2815},{"krate":0,"index":2817},{"krate":0,"index":5193},{"krate":0,"index":5199},{"krate":0,"index":5202},{"krate":0,"index":5205},{"krate":0,"index":2819},{"krate":0,"index":2822},{"krate":0,"index":2825},{"krate":0,"index":2832},{"krate":0,"index":5208},{"krate":0,"index":5211},{"krate":0,"index":5214},{"krate":0,"index":5222},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2843},{"krate":0,"index":5225},{"krate":0,"index":5229},{"krate":0,"index":2846},{"krate":0,"index":2849},{"krate":0,"index":2856},{"krate":0,"index":2864},{"krate":0,"index":5232},{"krate":0,"index":5236},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2876},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2885},{"krate":0,"index":2888},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2899},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2915},{"krate":0,"index":2919},{"krate":0,"index":2924}],"decl_id":null,"docs":" A multi-producer, single-consumer, futures-aware, FIFO queue with back\n pressure, for use communicating between tasks on the same thread.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2815},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":417638,"byte_end":417645,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"channel","qualname":"::unsync::mpsc::channel","value":"fn <T> (buffer: usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a bounded in-memory channel with buffered storage.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5202},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":418403,"byte_end":418409,"line_start":56,"line_end":56,"column_start":12,"column_end":18},"name":"Sender","qualname":"::unsync::mpsc::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5204}],"decl_id":null,"docs":" The transmission end of a channel.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5208},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":420609,"byte_end":420617,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::unsync::mpsc::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5210}],"decl_id":null,"docs":" The receiving end of a channel which implements the `Stream` trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":421120,"byte_end":421125,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":422880,"byte_end":422895,"line_start":206,"line_end":206,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::unsync::mpsc::UnboundedSender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of an unbounded channel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":424178,"byte_end":424182,"line_start":254,"line_end":254,"column_start":12,"column_end":16},"name":"send","qualname":"<UnboundedSender<T>>::send","value":"fn (&self, msg: T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends the provided message along this channel.","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `unbounded_send`\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":424096,"byte_end":424147,"line_start":252,"line_end":252,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":424529,"byte_end":424543,"line_start":263,"line_end":263,"column_start":12,"column_end":26},"name":"unbounded_send","qualname":"<UnboundedSender<T>>::unbounded_send","value":"fn (&self, msg: T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends the provided message along this channel.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5232},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425093,"byte_end":425110,"line_start":282,"line_end":282,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::unsync::mpsc::UnboundedReceiver","value":"","parent":null,"children":[],"decl_id":null,"docs":" The receiving end of an unbounded channel.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425366,"byte_end":425371,"line_start":289,"line_end":289,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2876},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425750,"byte_end":425759,"line_start":306,"line_end":306,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::unsync::mpsc::unbounded","value":"fn <T> () -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded in-memory channel with buffered storage.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2878},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426003,"byte_end":426012,"line_start":313,"line_end":313,"column_start":12,"column_end":21},"name":"SendError","qualname":"::unsync::mpsc::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type for sending, used when the receiving end of a channel is\n dropped\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2893},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426619,"byte_end":426629,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SendError<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2894},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":427146,"byte_end":427157,"line_start":351,"line_end":351,"column_start":12,"column_end":23},"name":"SpawnHandle","qualname":"::unsync::mpsc::SpawnHandle","value":"SpawnHandle {  }","parent":null,"children":[{"krate":0,"index":2897},{"krate":0,"index":2898}],"decl_id":null,"docs":" Handle returned from the `spawn` function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2899},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":427349,"byte_end":427356,"line_start":357,"line_end":357,"column_start":12,"column_end":19},"name":"Execute","qualname":"::unsync::mpsc::Execute","value":"Execute {  }","parent":null,"children":[{"krate":0,"index":2901},{"krate":0,"index":2902}],"decl_id":null,"docs":" Type of future which `Executor` instances must be able to execute for `spawn`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2903},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":428293,"byte_end":428298,"line_start":379,"line_end":379,"column_start":8,"column_end":13},"name":"spawn","qualname":"::unsync::mpsc::spawn","value":"fn <S, E> (stream: S, executor: &E, buffer: usize) -> SpawnHandle<S::Item, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `stream` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the remote stream.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2906},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":429758,"byte_end":429773,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"spawn_unbounded","qualname":"::unsync::mpsc::spawn_unbounded","value":"fn <S, E> (stream: S, executor: &E) -> SpawnHandle<S::Item, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `stream` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the remote stream, with unbounded buffering.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2927},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::unsync::oneshot","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","parent":null,"children":[{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2939},{"krate":0,"index":2944},{"krate":0,"index":2947},{"krate":0,"index":5239},{"krate":0,"index":5242},{"krate":0,"index":5245},{"krate":0,"index":5248},{"krate":0,"index":5251},{"krate":0,"index":5259},{"krate":0,"index":2949},{"krate":0,"index":5262},{"krate":0,"index":5267},{"krate":0,"index":2950},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2961},{"krate":0,"index":2966},{"krate":0,"index":2969},{"krate":0,"index":2974},{"krate":0,"index":2979},{"krate":0,"index":2982},{"krate":0,"index":2986},{"krate":0,"index":2990},{"krate":0,"index":2996},{"krate":0,"index":3000},{"krate":0,"index":3005}],"decl_id":null,"docs":" A one-shot, futures-aware channel","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2947},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":431966,"byte_end":431973,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"channel","qualname":"::unsync::oneshot::channel","value":"fn <T> () -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new futures-aware, one-shot channel.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5239},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":432597,"byte_end":432603,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"Sender","qualname":"::unsync::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":5241}],"decl_id":null,"docs":" Represents the completion half of a oneshot through which the result of a\n computation is signaled.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5245},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":433003,"byte_end":433011,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::unsync::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":5247}],"decl_id":null,"docs":" A future representing the completion of a computation happening elsewhere in\n memory.","sig":null,"attributes":[{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":432943,"byte_end":432991,"line_start":51,"line_end":51,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":433819,"byte_end":433823,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"fn (self, val: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Completes this oneshot with a successful result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2953},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":434997,"byte_end":435008,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"poll_cancel","qualname":"<Sender<T>>::poll_cancel","value":"fn (&mut self) -> Poll<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Polls this `Sender` half to detect whether the `Receiver` this has\n paired with has gone away.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":435993,"byte_end":436004,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"is_canceled","qualname":"<Sender<T>>::is_canceled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests to see whether this `Sender`'s corresponding `Receiver`\n has gone away.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":436906,"byte_end":436911,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Gracefully close this receiver, preventing sending any future messages.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2969},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":439022,"byte_end":439033,"line_start":226,"line_end":226,"column_start":12,"column_end":23},"name":"SpawnHandle","qualname":"::unsync::oneshot::SpawnHandle","value":"SpawnHandle {  }","parent":null,"children":[{"krate":0,"index":2972},{"krate":0,"index":2973}],"decl_id":null,"docs":" Handle returned from the `spawn` function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2974},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":439194,"byte_end":439201,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"Execute","qualname":"::unsync::oneshot::Execute","value":"Execute {  }","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978}],"decl_id":null,"docs":" Type of future which `Spawn` instances below must be able to spawn.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2979},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":440333,"byte_end":440338,"line_start":259,"line_end":259,"column_start":8,"column_end":13},"name":"spawn","qualname":"::unsync::oneshot::spawn","value":"fn <F, E> (future: F, executor: &E) -> SpawnHandle<F::Item, F::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a `future` onto the instance of `Executor` provided, `executor`,\n returning a handle representing the completion of the future.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2982},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441073,"byte_end":441081,"line_start":281,"line_end":281,"column_start":8,"column_end":16},"name":"spawn_fn","qualname":"::unsync::oneshot::spawn_fn","value":"fn <F, R, E> (f: F, executor: &E) -> SpawnHandle<R::Item, R::Error>","parent":null,"children":[],"decl_id":null,"docs":" Spawns a function `f` onto the `Spawn` instance provided `s`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441623,"byte_end":441629,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"forget","qualname":"<SpawnHandle<T, E>>::forget","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drop this future without canceling the underlying future.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3008},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":9117,"byte_end":9124,"line_start":260,"line_end":260,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","parent":null,"children":[{"krate":0,"index":3009},{"krate":0,"index":3017}],"decl_id":null,"docs":" A \"prelude\" for crates using the `futures` crate.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10346,"byte_end":10351,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10995,"byte_end":11000,"line_start":57,"line_end":57,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11613,"byte_end":11622,"line_start":77,"line_end":77,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/empty.rs","byte_start":56763,"byte_end":56768,"line_start":24,"line_end":24,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":58105,"byte_end":58109,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":58771,"byte_end":58775,"line_start":74,"line_end":74,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/poll_fn.rs","byte_start":59791,"byte_end":59797,"line_start":36,"line_end":36,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":61784,"byte_end":61796,"line_start":68,"line_end":68,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":62006,"byte_end":62018,"line_start":77,"line_end":77,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":64420,"byte_end":64426,"line_start":84,"line_end":84,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/option.rs","byte_start":64966,"byte_end":64972,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/and_then.rs","byte_start":65855,"byte_end":65862,"line_start":23,"line_end":23,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":66663,"byte_end":66670,"line_start":14,"line_end":14,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":67155,"byte_end":67162,"line_start":35,"line_end":35,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":68073,"byte_end":68086,"line_start":17,"line_end":17,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":68913,"byte_end":68926,"line_start":52,"line_end":52,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71180,"byte_end":71184,"line_start":22,"line_end":22,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71596,"byte_end":71600,"line_start":34,"line_end":34,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/into_stream.rs","byte_start":72424,"byte_end":72434,"line_start":18,"line_end":18,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":77255,"byte_end":77264,"line_start":150,"line_end":150,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map.rs","byte_start":78353,"byte_end":78356,"line_start":22,"line_end":22,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map_err.rs","byte_start":79271,"byte_end":79277,"line_start":22,"line_end":22,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/from_err.rs","byte_start":80183,"byte_end":80190,"line_start":24,"line_end":24,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/or_else.rs","byte_start":81076,"byte_end":81082,"line_start":23,"line_end":23,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":82467,"byte_end":82473,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":83674,"byte_end":83684,"line_start":73,"line_end":73,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select2.rs","byte_start":84520,"byte_end":84527,"line_start":20,"line_end":20,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/then.rs","byte_start":85892,"byte_end":85896,"line_start":23,"line_end":23,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86477,"byte_end":86483,"line_start":13,"line_end":13,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86889,"byte_end":86895,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":87239,"byte_end":87245,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/inspect.rs","byte_start":88058,"byte_end":88065,"line_start":23,"line_end":23,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/chain.rs","byte_start":88694,"byte_end":88699,"line_start":12,"line_end":12,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8859571,"byte_end":8859582,"line_start":24,"line_end":24,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3476}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8860207,"byte_end":8860223,"line_start":44,"line_end":44,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8861023,"byte_end":8861030,"line_start":29,"line_end":29,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8862668,"byte_end":8862675,"line_start":86,"line_end":86,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3503},{"krate":0,"index":3504},{"krate":0,"index":3505}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8865485,"byte_end":8865494,"line_start":45,"line_end":45,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3522},{"krate":0,"index":3523},{"krate":0,"index":3524}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_ok.rs","byte_start":8867747,"byte_end":8867755,"line_start":43,"line_end":43,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3539},{"krate":0,"index":3540},{"krate":0,"index":3541}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8870165,"byte_end":8870171,"line_start":35,"line_end":35,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3573}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871375,"byte_end":8871381,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3592},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8872887,"byte_end":8872893,"line_start":123,"line_end":123,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8873815,"byte_end":8873820,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3608}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8875632,"byte_end":8875638,"line_start":208,"line_end":208,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3612}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8875893,"byte_end":8875899,"line_start":219,"line_end":219,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3615}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876080,"byte_end":8876088,"line_start":226,"line_end":226,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3617}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876570,"byte_end":8876575,"line_start":241,"line_end":241,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876700,"byte_end":8876705,"line_start":247,"line_end":247,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876829,"byte_end":8876834,"line_start":253,"line_end":253,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3624}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877260,"byte_end":8877270,"line_start":271,"line_end":271,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3627},{"krate":0,"index":3628}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877563,"byte_end":8877574,"line_start":286,"line_end":286,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3631},{"krate":0,"index":3632}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877693,"byte_end":8877704,"line_start":294,"line_end":294,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3635}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877856,"byte_end":8877867,"line_start":302,"line_end":302,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3638},{"krate":0,"index":3639}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15734,"byte_end":15737,"line_start":108,"line_end":108,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52260,"byte_end":52261,"line_start":1052,"line_end":1052,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52426,"byte_end":52432,"line_start":1062,"line_end":1062,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55307,"byte_end":55319,"line_start":1143,"line_end":1143,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55806,"byte_end":55818,"line_start":1163,"line_end":1163,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":133292,"byte_end":133296,"line_start":36,"line_end":36,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_ok.rs","byte_start":134526,"byte_end":134532,"line_start":39,"line_end":39,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_result.rs","byte_start":135773,"byte_end":135783,"line_start":37,"line_end":37,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/repeat.rs","byte_start":137169,"byte_end":137175,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138008,"byte_end":138015,"line_start":30,"line_end":30,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138931,"byte_end":138938,"line_start":58,"line_end":58,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":139398,"byte_end":139405,"line_start":77,"line_end":77,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chain.rs","byte_start":141056,"byte_end":141061,"line_start":34,"line_end":34,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142291,"byte_end":142298,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142722,"byte_end":142729,"line_start":37,"line_end":37,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":143644,"byte_end":143650,"line_start":70,"line_end":70,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":144102,"byte_end":144108,"line_start":89,"line_end":89,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":144974,"byte_end":144984,"line_start":127,"line_end":127,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/empty.rs","byte_start":146929,"byte_end":146934,"line_start":22,"line_end":22,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":147583,"byte_end":147589,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148462,"byte_end":148468,"line_start":51,"line_end":51,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148922,"byte_end":148928,"line_start":70,"line_end":70,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":149955,"byte_end":149964,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":150837,"byte_end":150846,"line_start":51,"line_end":51,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":151303,"byte_end":151312,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152387,"byte_end":152394,"line_start":28,"line_end":28,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":153261,"byte_end":153268,"line_start":54,"line_end":54,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":153725,"byte_end":153732,"line_start":73,"line_end":73,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fold.rs","byte_start":155477,"byte_end":155481,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/for_each.rs","byte_start":157618,"byte_end":157625,"line_start":28,"line_end":28,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":158767,"byte_end":158774,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":159612,"byte_end":159619,"line_start":51,"line_end":51,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":160016,"byte_end":160023,"line_start":65,"line_end":65,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":160917,"byte_end":160921,"line_start":17,"line_end":17,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":161457,"byte_end":161461,"line_start":40,"line_end":40,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":161832,"byte_end":161836,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":163351,"byte_end":163363,"line_start":17,"line_end":17,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":165072,"byte_end":165084,"line_start":57,"line_end":57,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":166186,"byte_end":166193,"line_start":23,"line_end":23,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":167066,"byte_end":167073,"line_start":49,"line_end":49,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":167536,"byte_end":167543,"line_start":68,"line_end":68,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168434,"byte_end":168444,"line_start":23,"line_end":23,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":169317,"byte_end":169327,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":169790,"byte_end":169800,"line_start":68,"line_end":68,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170550,"byte_end":170553,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":171426,"byte_end":171429,"line_start":51,"line_end":51,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":171886,"byte_end":171889,"line_start":70,"line_end":70,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":172646,"byte_end":172652,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173525,"byte_end":173531,"line_start":51,"line_end":51,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173988,"byte_end":173994,"line_start":70,"line_end":70,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175357,"byte_end":175362,"line_start":42,"line_end":42,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/once.rs","byte_start":177450,"byte_end":177454,"line_start":24,"line_end":24,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":178439,"byte_end":178445,"line_start":31,"line_end":31,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":178920,"byte_end":178926,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180495,"byte_end":180503,"line_start":25,"line_end":25,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180968,"byte_end":180976,"line_start":44,"line_end":44,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":181261,"byte_end":181269,"line_start":57,"line_end":57,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/poll_fn.rs","byte_start":182837,"byte_end":182843,"line_start":39,"line_end":39,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/select.rs","byte_start":183786,"byte_end":183792,"line_start":28,"line_end":28,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185507,"byte_end":185511,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":186378,"byte_end":186382,"line_start":49,"line_end":49,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":186830,"byte_end":186834,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":187961,"byte_end":187970,"line_start":30,"line_end":30,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":188880,"byte_end":188889,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":189373,"byte_end":189382,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191078,"byte_end":191082,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191949,"byte_end":191953,"line_start":49,"line_end":49,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":192410,"byte_end":192414,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":193614,"byte_end":193623,"line_start":30,"line_end":30,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":194533,"byte_end":194542,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":195026,"byte_end":195035,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":196906,"byte_end":196910,"line_start":31,"line_end":31,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":197386,"byte_end":197390,"line_start":50,"line_end":50,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/unfold.rs","byte_start":200702,"byte_end":200708,"line_start":69,"line_end":69,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/zip.rs","byte_start":203078,"byte_end":203081,"line_start":29,"line_end":29,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":204828,"byte_end":204835,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":206608,"byte_end":206615,"line_start":78,"line_end":78,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8880293,"byte_end":8880301,"line_start":22,"line_end":22,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4132}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8881074,"byte_end":8881082,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4137},{"krate":0,"index":4138},{"krate":0,"index":4139}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8882056,"byte_end":8882064,"line_start":78,"line_end":78,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4142},{"krate":0,"index":4143},{"krate":0,"index":4144},{"krate":0,"index":4145},{"krate":0,"index":4146}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8882553,"byte_end":8882561,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4149},{"krate":0,"index":4150},{"krate":0,"index":4151}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8884374,"byte_end":8884389,"line_start":22,"line_end":22,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4169}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885054,"byte_end":8885069,"line_start":47,"line_end":47,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4176}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885983,"byte_end":8885998,"line_start":75,"line_end":75,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8887209,"byte_end":8887224,"line_start":112,"line_end":112,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4188}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8888376,"byte_end":8888387,"line_start":33,"line_end":33,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4205},{"krate":0,"index":4206},{"krate":0,"index":4207}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8889568,"byte_end":8889584,"line_start":64,"line_end":64,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4211},{"krate":0,"index":4212},{"krate":0,"index":4213}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8890671,"byte_end":8890677,"line_start":37,"line_end":37,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8891124,"byte_end":8891130,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8892119,"byte_end":8892125,"line_start":87,"line_end":87,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894393,"byte_end":8894400,"line_start":27,"line_end":27,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4255}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894527,"byte_end":8894534,"line_start":33,"line_end":33,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4258},{"krate":0,"index":4259},{"krate":0,"index":4260}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8895577,"byte_end":8895581,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4266},{"krate":0,"index":4267},{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8896522,"byte_end":8896526,"line_start":47,"line_end":47,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4273},{"krate":0,"index":4274}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898641,"byte_end":8898650,"line_start":57,"line_end":57,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4298}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898843,"byte_end":8898852,"line_start":65,"line_end":65,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4302}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899012,"byte_end":8899021,"line_start":71,"line_end":71,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4306}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899170,"byte_end":8899178,"line_start":80,"line_end":80,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899588,"byte_end":8899594,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4316}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899965,"byte_end":8899977,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4320},{"krate":0,"index":4321},{"krate":0,"index":4322}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900506,"byte_end":8900517,"line_start":12,"line_end":12,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4338}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900892,"byte_end":8900903,"line_start":21,"line_end":21,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4341},{"krate":0,"index":4342},{"krate":0,"index":4343}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901279,"byte_end":8901288,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4346}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901755,"byte_end":8901764,"line_start":48,"line_end":48,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8902974,"byte_end":8902986,"line_start":87,"line_end":87,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4364}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8903176,"byte_end":8903188,"line_start":95,"line_end":95,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4367}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8903378,"byte_end":8903390,"line_start":101,"line_end":101,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4370}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905789,"byte_end":8905805,"line_start":53,"line_end":53,"column_start":31,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905842,"byte_end":8905858,"line_start":54,"line_end":54,"column_start":31,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8908116,"byte_end":8908132,"line_start":116,"line_end":116,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4440}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8908230,"byte_end":8908246,"line_start":122,"line_end":122,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4443}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8909284,"byte_end":8909300,"line_start":154,"line_end":154,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4448},{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8913587,"byte_end":8913603,"line_start":270,"line_end":270,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4457}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8916842,"byte_end":8916846,"line_start":343,"line_end":343,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4466}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8918722,"byte_end":8918738,"line_start":389,"line_end":389,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4470}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8918881,"byte_end":8918897,"line_start":395,"line_end":395,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4473}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8920365,"byte_end":8920381,"line_start":425,"line_end":425,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4476}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8920853,"byte_end":8920860,"line_start":445,"line_end":445,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4481},{"krate":0,"index":4482},{"krate":0,"index":4483}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8921392,"byte_end":8921399,"line_start":466,"line_end":466,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8921419,"byte_end":8921424,"line_start":468,"line_end":468,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4491}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8923273,"byte_end":8923278,"line_start":529,"line_end":529,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4494}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924196,"byte_end":8924208,"line_start":553,"line_end":553,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4503}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924328,"byte_end":8924340,"line_start":559,"line_end":559,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4507}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924786,"byte_end":8924793,"line_start":573,"line_end":573,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924824,"byte_end":8924831,"line_start":574,"line_end":574,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924858,"byte_end":8924865,"line_start":576,"line_end":576,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4518}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8925151,"byte_end":8925158,"line_start":587,"line_end":587,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4521},{"krate":0,"index":4522}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8925700,"byte_end":8925704,"line_start":606,"line_end":606,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4527}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8926854,"byte_end":8926858,"line_start":635,"line_end":635,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4530}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8927974,"byte_end":8927985,"line_start":670,"line_end":670,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4539}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928474,"byte_end":8928486,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4561}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928591,"byte_end":8928603,"line_start":21,"line_end":21,"column_start":16,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928634,"byte_end":8928646,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4566}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928769,"byte_end":8928781,"line_start":29,"line_end":29,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4569}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928962,"byte_end":8928974,"line_start":36,"line_end":36,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4572},{"krate":0,"index":4573},{"krate":0,"index":4574}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932405,"byte_end":8932419,"line_start":117,"line_end":117,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4585}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932515,"byte_end":8932529,"line_start":123,"line_end":123,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590},{"krate":0,"index":4591}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8934132,"byte_end":8934146,"line_start":169,"line_end":169,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4596}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8935158,"byte_end":8935172,"line_start":201,"line_end":201,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4599}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8935352,"byte_end":8935366,"line_start":209,"line_end":209,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4602}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93626,"byte_end":93629,"line_start":134,"line_end":134,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4629},{"krate":0,"index":4630},{"krate":0,"index":4631}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227441,"byte_end":227446,"line_start":30,"line_end":30,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1539}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227999,"byte_end":228003,"line_start":55,"line_end":55,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":228270,"byte_end":228274,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":229992,"byte_end":229996,"line_start":124,"line_end":124,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":231842,"byte_end":231853,"line_start":39,"line_end":39,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":233211,"byte_end":233222,"line_start":83,"line_end":83,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":233518,"byte_end":233529,"line_start":96,"line_end":96,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":234846,"byte_end":234851,"line_start":16,"line_end":16,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":235436,"byte_end":235441,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236293,"byte_end":236304,"line_start":24,"line_end":24,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236854,"byte_end":236865,"line_start":44,"line_end":44,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":237434,"byte_end":237445,"line_start":64,"line_end":64,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238078,"byte_end":238082,"line_start":20,"line_end":20,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238723,"byte_end":238727,"line_start":40,"line_end":40,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":240041,"byte_end":240048,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":241089,"byte_end":241096,"line_start":59,"line_end":59,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242412,"byte_end":242422,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242975,"byte_end":242985,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":243695,"byte_end":243705,"line_start":57,"line_end":57,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244346,"byte_end":244352,"line_start":15,"line_end":15,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244728,"byte_end":244734,"line_start":25,"line_end":25,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":245181,"byte_end":245187,"line_start":44,"line_end":44,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":246919,"byte_end":246929,"line_start":98,"line_end":98,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936373,"byte_end":8936379,"line_start":28,"line_end":28,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4836},{"krate":0,"index":4837},{"krate":0,"index":4838},{"krate":0,"index":4839}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8937322,"byte_end":8937328,"line_start":61,"line_end":61,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4842},{"krate":0,"index":4843},{"krate":0,"index":4844}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8937527,"byte_end":8937533,"line_start":70,"line_end":70,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4849},{"krate":0,"index":4850},{"krate":0,"index":4851}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8939121,"byte_end":8939125,"line_start":22,"line_end":22,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4859},{"krate":0,"index":4860},{"krate":0,"index":4861}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":208574,"byte_end":208577,"line_start":34,"line_end":34,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4866},{"krate":0,"index":4867},{"krate":0,"index":4868},{"krate":0,"index":4869},{"krate":0,"index":4870}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209359,"byte_end":209362,"line_start":58,"line_end":58,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4876},{"krate":0,"index":4877},{"krate":0,"index":4878},{"krate":0,"index":4879},{"krate":0,"index":4880}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249255,"byte_end":249259,"line_start":36,"line_end":36,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249296,"byte_end":249300,"line_start":37,"line_end":37,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249316,"byte_end":249320,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250147,"byte_end":250154,"line_start":66,"line_end":66,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250411,"byte_end":250418,"line_start":75,"line_end":75,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250785,"byte_end":250792,"line_start":86,"line_end":86,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286529,"byte_end":286539,"line_start":137,"line_end":137,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286741,"byte_end":286745,"line_start":142,"line_end":142,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292150,"byte_end":292160,"line_start":270,"line_end":270,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292245,"byte_end":292255,"line_start":276,"line_end":276,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292383,"byte_end":292393,"line_start":282,"line_end":282,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292418,"byte_end":292428,"line_start":283,"line_end":283,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293113,"byte_end":293127,"line_start":33,"line_end":33,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293310,"byte_end":293324,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1952},{"krate":0,"index":1953}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293664,"byte_end":293676,"line_start":57,"line_end":57,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293800,"byte_end":293810,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":294042,"byte_end":294052,"line_start":75,"line_end":75,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1961}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":294245,"byte_end":294255,"line_start":83,"line_end":83,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1963}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":297709,"byte_end":297714,"line_start":176,"line_end":176,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1979}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":320819,"byte_end":320830,"line_start":25,"line_end":25,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":320867,"byte_end":320878,"line_start":26,"line_end":26,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":321585,"byte_end":321596,"line_start":45,"line_end":45,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":326672,"byte_end":326673,"line_start":43,"line_end":43,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327742,"byte_end":327750,"line_start":72,"line_end":72,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327836,"byte_end":327844,"line_start":78,"line_end":78,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":328124,"byte_end":328132,"line_start":93,"line_end":93,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333239,"byte_end":333245,"line_start":72,"line_end":72,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333282,"byte_end":333288,"line_start":73,"line_end":73,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333304,"byte_end":333310,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":334995,"byte_end":335001,"line_start":122,"line_end":122,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":299879,"byte_end":299884,"line_start":70,"line_end":70,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":300814,"byte_end":300828,"line_start":119,"line_end":119,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":301247,"byte_end":301261,"line_start":134,"line_end":134,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":302159,"byte_end":302171,"line_start":166,"line_end":166,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2114},{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":302933,"byte_end":302943,"line_start":197,"line_end":197,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":303563,"byte_end":303568,"line_start":218,"line_end":218,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2121},{"krate":0,"index":2123},{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305216,"byte_end":305221,"line_start":265,"line_end":265,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306144,"byte_end":306149,"line_start":291,"line_end":291,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310509,"byte_end":310512,"line_start":413,"line_end":413,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2155}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":311464,"byte_end":311467,"line_start":441,"line_end":441,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":311660,"byte_end":311668,"line_start":450,"line_end":450,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":312242,"byte_end":312254,"line_start":479,"line_end":479,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2168},{"krate":0,"index":2172}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":313644,"byte_end":313656,"line_start":523,"line_end":523,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2174}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316312,"byte_end":316323,"line_start":603,"line_end":603,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2180},{"krate":0,"index":2181}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316746,"byte_end":316757,"line_start":620,"line_end":620,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2183}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":318186,"byte_end":318196,"line_start":658,"line_end":658,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":318938,"byte_end":318948,"line_start":684,"line_end":684,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":319388,"byte_end":319400,"line_start":698,"line_end":698,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2201}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":254266,"byte_end":254270,"line_start":93,"line_end":93,"column_start":21,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":255781,"byte_end":255785,"line_start":136,"line_end":136,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":259889,"byte_end":259893,"line_start":224,"line_end":224,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261307,"byte_end":261312,"line_start":265,"line_end":265,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2249},{"krate":0,"index":2252},{"krate":0,"index":2255},{"krate":0,"index":2258},{"krate":0,"index":2261},{"krate":0,"index":2264}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":266714,"byte_end":266719,"line_start":403,"line_end":403,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277723,"byte_end":277735,"line_start":637,"line_end":637,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277760,"byte_end":277772,"line_start":638,"line_end":638,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277782,"byte_end":277794,"line_start":640,"line_end":640,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278768,"byte_end":278780,"line_start":669,"line_end":669,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278921,"byte_end":278933,"line_start":678,"line_end":678,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2296}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279076,"byte_end":279088,"line_start":685,"line_end":685,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2298}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279300,"byte_end":279309,"line_start":696,"line_end":696,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279759,"byte_end":279768,"line_start":713,"line_end":713,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279968,"byte_end":279980,"line_start":721,"line_end":721,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2314}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/resultstream.rs","byte_start":336074,"byte_end":336081,"line_start":33,"line_end":33,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":343355,"byte_end":343360,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":351823,"byte_end":351829,"line_start":322,"line_end":322,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":354796,"byte_end":354802,"line_start":393,"line_end":393,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355055,"byte_end":355063,"line_start":404,"line_end":404,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355191,"byte_end":355199,"line_start":410,"line_end":410,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2408}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355282,"byte_end":355290,"line_start":416,"line_end":416,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2412}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":356351,"byte_end":356359,"line_start":443,"line_end":443,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":356510,"byte_end":356518,"line_start":452,"line_end":452,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":359671,"byte_end":359682,"line_start":537,"line_end":537,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360103,"byte_end":360114,"line_start":548,"line_end":548,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360536,"byte_end":360547,"line_start":562,"line_end":562,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2453}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360701,"byte_end":360712,"line_start":569,"line_end":569,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2457}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360815,"byte_end":360822,"line_start":575,"line_end":575,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":361549,"byte_end":361556,"line_start":599,"line_end":599,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2465}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":361748,"byte_end":361755,"line_start":607,"line_end":607,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2468}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404090,"byte_end":404095,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404133,"byte_end":404138,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404155,"byte_end":404159,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2523}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404355,"byte_end":404360,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":406115,"byte_end":406120,"line_start":140,"line_end":140,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2531}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366723,"byte_end":366738,"line_start":114,"line_end":114,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367787,"byte_end":367796,"line_start":152,"line_end":152,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2536}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367983,"byte_end":367992,"line_start":160,"line_end":160,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368151,"byte_end":368160,"line_start":166,"line_end":166,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2542}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368266,"byte_end":368275,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2545}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368433,"byte_end":368445,"line_start":180,"line_end":180,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2548}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368635,"byte_end":368647,"line_start":188,"line_end":188,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368928,"byte_end":368940,"line_start":198,"line_end":198,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":369155,"byte_end":369167,"line_start":208,"line_end":208,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2557},{"krate":0,"index":2559},{"krate":0,"index":2561}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":371727,"byte_end":371737,"line_start":305,"line_end":305,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2576}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":374546,"byte_end":374552,"line_start":391,"line_end":391,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":383348,"byte_end":383354,"line_start":639,"line_end":639,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2603}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":384450,"byte_end":384465,"line_start":672,"line_end":672,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":385421,"byte_end":385436,"line_start":699,"line_end":699,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2615}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":386243,"byte_end":386258,"line_start":734,"line_end":734,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":386376,"byte_end":386382,"line_start":741,"line_end":741,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2629}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":387572,"byte_end":387578,"line_start":774,"line_end":774,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":387870,"byte_end":387878,"line_start":791,"line_end":791,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":392270,"byte_end":392278,"line_start":923,"line_end":923,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":393791,"byte_end":393799,"line_start":960,"line_end":960,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":394799,"byte_end":394816,"line_start":989,"line_end":989,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":395099,"byte_end":395116,"line_start":999,"line_end":999,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":398654,"byte_end":398665,"line_start":1095,"line_end":1095,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399166,"byte_end":399177,"line_start":1110,"line_end":1110,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399338,"byte_end":399345,"line_start":1117,"line_end":1117,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399745,"byte_end":399752,"line_start":1133,"line_end":1133,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399927,"byte_end":399932,"line_start":1146,"line_end":1146,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2691}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400277,"byte_end":400282,"line_start":1157,"line_end":1157,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400319,"byte_end":400324,"line_start":1158,"line_end":1158,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400337,"byte_end":400342,"line_start":1160,"line_end":1160,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2697}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407933,"byte_end":407938,"line_start":44,"line_end":44,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407975,"byte_end":407980,"line_start":45,"line_end":45,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407996,"byte_end":408002,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2729},{"krate":0,"index":2730}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":412981,"byte_end":412986,"line_start":170,"line_end":170,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413126,"byte_end":413131,"line_start":176,"line_end":176,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2736}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413409,"byte_end":413421,"line_start":186,"line_end":186,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2744}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413611,"byte_end":413623,"line_start":194,"line_end":194,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413797,"byte_end":413809,"line_start":200,"line_end":200,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414253,"byte_end":414264,"line_start":216,"line_end":216,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2754},{"krate":0,"index":2755}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414425,"byte_end":414436,"line_start":223,"line_end":223,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414588,"byte_end":414599,"line_start":229,"line_end":229,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414859,"byte_end":414872,"line_start":242,"line_end":242,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415698,"byte_end":415712,"line_start":268,"line_end":268,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2771}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415946,"byte_end":415960,"line_start":279,"line_end":279,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2774},{"krate":0,"index":2775}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":416131,"byte_end":416145,"line_start":286,"line_end":286,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":416307,"byte_end":416321,"line_start":292,"line_end":292,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2781}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":418464,"byte_end":418470,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2821}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419251,"byte_end":419257,"line_start":84,"line_end":84,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2824}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419366,"byte_end":419372,"line_start":90,"line_end":90,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419742,"byte_end":419748,"line_start":107,"line_end":107,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":420900,"byte_end":420908,"line_start":142,"line_end":142,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2837}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":421688,"byte_end":421696,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":422679,"byte_end":422687,"line_start":196,"line_end":196,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":422930,"byte_end":422945,"line_start":208,"line_end":208,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":423047,"byte_end":423062,"line_start":214,"line_end":214,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":423821,"byte_end":423836,"line_start":246,"line_end":246,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2866},{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425137,"byte_end":425154,"line_start":284,"line_end":284,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425437,"byte_end":425454,"line_start":294,"line_end":294,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426044,"byte_end":426053,"line_start":315,"line_end":315,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2884}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426240,"byte_end":426249,"line_start":323,"line_end":323,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2887}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426408,"byte_end":426417,"line_start":329,"line_end":329,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426523,"byte_end":426532,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2893}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430239,"byte_end":430250,"line_start":431,"line_end":431,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430754,"byte_end":430765,"line_start":446,"line_end":446,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2918}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430929,"byte_end":430936,"line_start":453,"line_end":453,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2923}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":431336,"byte_end":431343,"line_start":469,"line_end":469,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2926}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":433289,"byte_end":433295,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2954}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":436088,"byte_end":436094,"line_start":138,"line_end":138,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2957}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":436492,"byte_end":436500,"line_start":155,"line_end":155,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2960}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":437373,"byte_end":437381,"line_start":178,"line_end":178,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":438419,"byte_end":438427,"line_start":210,"line_end":210,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441287,"byte_end":441298,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2989}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441706,"byte_end":441717,"line_start":300,"line_end":300,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":442133,"byte_end":442144,"line_start":314,"line_end":314,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2999}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":442305,"byte_end":442312,"line_start":321,"line_end":321,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":443051,"byte_end":443058,"line_start":345,"line_end":345,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3007}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6532,"byte_end":6538,"line_start":177,"line_end":177,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":45}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6587,"byte_end":6593,"line_start":180,"line_end":180,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":577}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":92531,"byte_end":92548,"line_start":110,"line_end":110,"column_start":13,"column_end":30},"ref_id":{"krate":0,"index":4371}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":6628,"byte_end":6632,"line_start":183,"line_end":183,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1518}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7253,"byte_end":7257,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2330}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7267,"byte_end":7275,"line_start":207,"line_end":207,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2350}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7313,"byte_end":7317,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2363}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339673,"byte_end":339680,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2364}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mod.rs","byte_start":339690,"byte_end":339694,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2469}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lib.rs","byte_start":7355,"byte_end":7361,"line_start":211,"line_end":211,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2787}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mod.rs","byte_start":416630,"byte_end":416634,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2788}},{"kind":"Mod","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mod.rs","byte_start":416644,"byte_end":416651,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2927}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10346,"byte_end":10351,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":10995,"byte_end":11000,"line_start":57,"line_end":57,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3018},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/poll.rs","byte_start":11613,"byte_end":11622,"line_start":77,"line_end":77,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/empty.rs","byte_start":56763,"byte_end":56768,"line_start":24,"line_end":24,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3056},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":58105,"byte_end":58109,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/lazy.rs","byte_start":58771,"byte_end":58775,"line_start":74,"line_end":74,"column_start":23,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3064},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/poll_fn.rs","byte_start":59791,"byte_end":59797,"line_start":36,"line_end":36,"column_start":26,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3087},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":61784,"byte_end":61796,"line_start":68,"line_end":68,"column_start":23,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3093},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/result.rs","byte_start":62006,"byte_end":62018,"line_start":77,"line_end":77,"column_start":35,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3093},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/loop_fn.rs","byte_start":64420,"byte_end":64426,"line_start":84,"line_end":84,"column_start":29,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3118},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/option.rs","byte_start":64966,"byte_end":64972,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":29038},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/and_then.rs","byte_start":65855,"byte_end":65862,"line_start":23,"line_end":23,"column_start":26,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3127},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":66663,"byte_end":66670,"line_start":14,"line_end":14,"column_start":24,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten.rs","byte_start":67155,"byte_end":67162,"line_start":35,"line_end":35,"column_start":20,"column_end":27},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":211},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":68073,"byte_end":68086,"line_start":17,"line_end":17,"column_start":24,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/flatten_stream.rs","byte_start":68913,"byte_end":68926,"line_start":52,"line_end":52,"column_start":20,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":232},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71180,"byte_end":71184,"line_start":22,"line_end":22,"column_start":17,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/fuse.rs","byte_start":71596,"byte_end":71600,"line_start":34,"line_end":34,"column_start":28,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3152},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/into_stream.rs","byte_start":72424,"byte_end":72434,"line_start":18,"line_end":18,"column_start":28,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3158},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join.rs","byte_start":77255,"byte_end":77264,"line_start":150,"line_end":150,"column_start":17,"column_end":26},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map.rs","byte_start":78353,"byte_end":78356,"line_start":22,"line_end":22,"column_start":26,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3335},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/map_err.rs","byte_start":79271,"byte_end":79277,"line_start":22,"line_end":22,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3344},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/from_err.rs","byte_start":80183,"byte_end":80190,"line_start":24,"line_end":24,"column_start":45,"column_end":52},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3353},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/or_else.rs","byte_start":81076,"byte_end":81082,"line_start":23,"line_end":23,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3362},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":82467,"byte_end":82473,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3372},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select.rs","byte_start":83674,"byte_end":83684,"line_start":73,"line_end":73,"column_start":23,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3380},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select2.rs","byte_start":84520,"byte_end":84527,"line_start":20,"line_end":20,"column_start":23,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/then.rs","byte_start":85892,"byte_end":85896,"line_start":23,"line_end":23,"column_start":26,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3409},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86477,"byte_end":86483,"line_start":13,"line_end":13,"column_start":15,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":86889,"byte_end":86895,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3419},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/either.rs","byte_start":87239,"byte_end":87245,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3419},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/inspect.rs","byte_start":88058,"byte_end":88065,"line_start":23,"line_end":23,"column_start":23,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3432},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/chain.rs","byte_start":88694,"byte_end":88699,"line_start":12,"line_end":12,"column_start":15,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8859571,"byte_end":8859582,"line_start":24,"line_end":24,"column_start":20,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3665},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/catch_unwind.rs","byte_start":8860207,"byte_end":8860223,"line_start":44,"line_end":44,"column_start":28,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":4,"index":3646},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8861023,"byte_end":8861030,"line_start":29,"line_end":29,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3492},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/join_all.rs","byte_start":8862668,"byte_end":8862675,"line_start":86,"line_end":86,"column_start":20,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3492},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_all.rs","byte_start":8865485,"byte_end":8865494,"line_start":45,"line_end":45,"column_start":20,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3682},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/select_ok.rs","byte_start":8867747,"byte_end":8867755,"line_start":43,"line_end":43,"column_start":20,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3688},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8870165,"byte_end":8870171,"line_start":35,"line_end":35,"column_start":24,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3567},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8871375,"byte_end":8871381,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8872887,"byte_end":8872893,"line_start":123,"line_end":123,"column_start":20,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3567},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8873815,"byte_end":8873820,"line_start":152,"line_end":152,"column_start":31,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3602},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8875632,"byte_end":8875638,"line_start":208,"line_end":208,"column_start":19,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3567},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8875893,"byte_end":8875899,"line_start":219,"line_end":219,"column_start":18,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3567},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876080,"byte_end":8876088,"line_start":226,"line_end":226,"column_start":17,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3580},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876570,"byte_end":8876575,"line_start":241,"line_end":241,"column_start":25,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3574},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876700,"byte_end":8876705,"line_start":247,"line_end":247,"column_start":25,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3574},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8876829,"byte_end":8876834,"line_start":253,"line_end":253,"column_start":24,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3574},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877260,"byte_end":8877270,"line_start":271,"line_end":271,"column_start":24,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3694},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877563,"byte_end":8877574,"line_start":286,"line_end":286,"column_start":24,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3703},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877693,"byte_end":8877704,"line_start":294,"line_end":294,"column_start":26,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3703},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/shared.rs","byte_start":8877856,"byte_end":8877867,"line_start":302,"line_end":302,"column_start":26,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3703},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":15734,"byte_end":15737,"line_start":108,"line_end":108,"column_start":55,"column_end":58},"kind":{"Impl":{"id":53}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52260,"byte_end":52261,"line_start":1052,"line_end":1052,"column_start":32,"column_end":33},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":542},"to":{"krate":0,"index":536}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52426,"byte_end":52432,"line_start":1062,"line_end":1062,"column_start":35,"column_end":41},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":29129},"to":{"krate":0,"index":536}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":52766,"byte_end":52771,"line_start":1076,"line_end":1076,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1539},"to":{"krate":0,"index":554}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55307,"byte_end":55319,"line_start":1143,"line_end":1143,"column_start":9,"column_end":21},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/future/mod.rs","byte_start":55806,"byte_end":55818,"line_start":1163,"line_end":1163,"column_start":24,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter.rs","byte_start":133292,"byte_end":133296,"line_start":36,"line_end":36,"column_start":26,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3726},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_ok.rs","byte_start":134526,"byte_end":134532,"line_start":39,"line_end":39,"column_start":23,"column_end":29},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3733},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/iter_result.rs","byte_start":135773,"byte_end":135783,"line_start":37,"line_end":37,"column_start":26,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3742},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/repeat.rs","byte_start":137169,"byte_end":137175,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3748},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138008,"byte_end":138015,"line_start":30,"line_end":30,"column_start":15,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":138931,"byte_end":138938,"line_start":58,"line_end":58,"column_start":44,"column_end":51},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3757},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/and_then.rs","byte_start":139398,"byte_end":139405,"line_start":77,"line_end":77,"column_start":26,"column_end":33},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3757},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chain.rs","byte_start":141056,"byte_end":141061,"line_start":34,"line_end":34,"column_start":25,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3785},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142291,"byte_end":142298,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":718},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":142722,"byte_end":142729,"line_start":37,"line_end":37,"column_start":20,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":718},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":143644,"byte_end":143650,"line_start":70,"line_end":70,"column_start":26,"column_end":32},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":732},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":144102,"byte_end":144108,"line_start":89,"line_end":89,"column_start":20,"column_end":26},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":732},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/concat.rs","byte_start":144974,"byte_end":144984,"line_start":127,"line_end":127,"column_start":20,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3793},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/empty.rs","byte_start":146929,"byte_end":146934,"line_start":22,"line_end":22,"column_start":23,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3812},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":147583,"byte_end":147589,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148462,"byte_end":148468,"line_start":51,"line_end":51,"column_start":29,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter.rs","byte_start":148922,"byte_end":148928,"line_start":70,"line_end":70,"column_start":23,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":149955,"byte_end":149964,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":150837,"byte_end":150846,"line_start":51,"line_end":51,"column_start":29,"column_end":38},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3829},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/filter_map.rs","byte_start":151303,"byte_end":151312,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3829},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":152387,"byte_end":152394,"line_start":28,"line_end":28,"column_start":17,"column_end":24},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":153261,"byte_end":153268,"line_start":54,"line_end":54,"column_start":26,"column_end":33},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3838},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/flatten.rs","byte_start":153725,"byte_end":153732,"line_start":73,"line_end":73,"column_start":20,"column_end":27},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3838},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fold.rs","byte_start":155477,"byte_end":155481,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3845},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/for_each.rs","byte_start":157618,"byte_end":157625,"line_start":28,"line_end":28,"column_start":26,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3874},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":158767,"byte_end":158774,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":159612,"byte_end":159619,"line_start":51,"line_end":51,"column_start":47,"column_end":54},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3886},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/from_err.rs","byte_start":160016,"byte_end":160023,"line_start":65,"line_end":65,"column_start":52,"column_end":59},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3886},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":160917,"byte_end":160921,"line_start":17,"line_end":17,"column_start":26,"column_end":30},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3895},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":161457,"byte_end":161461,"line_start":40,"line_end":40,"column_start":28,"column_end":32},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3895},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/fuse.rs","byte_start":161832,"byte_end":161836,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":163351,"byte_end":163363,"line_start":17,"line_end":17,"column_start":9,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/future.rs","byte_start":165072,"byte_end":165084,"line_start":57,"line_end":57,"column_start":28,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3902},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":166186,"byte_end":166193,"line_start":23,"line_end":23,"column_start":20,"column_end":27},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":167066,"byte_end":167073,"line_start":49,"line_end":49,"column_start":29,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3908},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect.rs","byte_start":167536,"byte_end":167543,"line_start":68,"line_end":68,"column_start":23,"column_end":30},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3908},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":168434,"byte_end":168444,"line_start":23,"line_end":23,"column_start":20,"column_end":30},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":169317,"byte_end":169327,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3917},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/inspect_err.rs","byte_start":169790,"byte_end":169800,"line_start":68,"line_end":68,"column_start":23,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3917},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":170550,"byte_end":170553,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":171426,"byte_end":171429,"line_start":51,"line_end":51,"column_start":29,"column_end":32},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3926},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map.rs","byte_start":171886,"byte_end":171889,"line_start":70,"line_end":70,"column_start":26,"column_end":29},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3926},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":172646,"byte_end":172652,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173525,"byte_end":173531,"line_start":51,"line_end":51,"column_start":29,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3935},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/map_err.rs","byte_start":173988,"byte_end":173994,"line_start":70,"line_end":70,"column_start":26,"column_end":32},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3935},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/merge.rs","byte_start":175357,"byte_end":175362,"line_start":42,"line_end":42,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3944},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/once.rs","byte_start":177450,"byte_end":177454,"line_start":24,"line_end":24,"column_start":23,"column_end":27},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3971},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":178439,"byte_end":178445,"line_start":31,"line_end":31,"column_start":32,"column_end":38},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3980},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/or_else.rs","byte_start":178920,"byte_end":178926,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3980},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180495,"byte_end":180503,"line_start":25,"line_end":25,"column_start":26,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3992},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":180968,"byte_end":180976,"line_start":44,"line_end":44,"column_start":28,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3992},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/peek.rs","byte_start":181261,"byte_end":181269,"line_start":57,"line_end":57,"column_start":17,"column_end":25},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/poll_fn.rs","byte_start":182837,"byte_end":182843,"line_start":39,"line_end":39,"column_start":26,"column_end":32},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3999},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/select.rs","byte_start":183786,"byte_end":183792,"line_start":28,"line_end":28,"column_start":25,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4005},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":185507,"byte_end":185511,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":4015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":186378,"byte_end":186382,"line_start":49,"line_end":49,"column_start":26,"column_end":30},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4015},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip.rs","byte_start":186830,"byte_end":186834,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4015},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":187961,"byte_end":187970,"line_start":30,"line_end":30,"column_start":15,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":4022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":188880,"byte_end":188889,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":4022},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/skip_while.rs","byte_start":189373,"byte_end":189382,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4022},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191078,"byte_end":191082,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":4035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":191949,"byte_end":191953,"line_start":49,"line_end":49,"column_start":26,"column_end":30},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4035},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take.rs","byte_start":192410,"byte_end":192414,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4035},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":193614,"byte_end":193623,"line_start":30,"line_end":30,"column_start":15,"column_end":24},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":194533,"byte_end":194542,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":4042},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/take_while.rs","byte_start":195026,"byte_end":195035,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":4042},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":196906,"byte_end":196910,"line_start":31,"line_end":31,"column_start":32,"column_end":36},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":4055},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/then.rs","byte_start":197386,"byte_end":197390,"line_start":50,"line_end":50,"column_start":26,"column_end":30},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":4055},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/unfold.rs","byte_start":200702,"byte_end":200708,"line_start":69,"line_end":69,"column_start":33,"column_end":39},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":4067},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/zip.rs","byte_start":203078,"byte_end":203081,"line_start":29,"line_end":29,"column_start":25,"column_end":28},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":4093},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":204828,"byte_end":204835,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/forward.rs","byte_start":206608,"byte_end":206615,"line_start":78,"line_end":78,"column_start":23,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":4104},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8880293,"byte_end":8880301,"line_start":22,"line_end":22,"column_start":24,"column_end":32},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4125},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8881074,"byte_end":8881082,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8882056,"byte_end":8882064,"line_start":78,"line_end":78,"column_start":26,"column_end":34},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":4125},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffered.rs","byte_start":8882553,"byte_end":8882561,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4125},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8884374,"byte_end":8884389,"line_start":22,"line_end":22,"column_start":24,"column_end":39},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4162},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885054,"byte_end":8885069,"line_start":47,"line_end":47,"column_start":9,"column_end":24},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":4162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8885983,"byte_end":8885998,"line_start":75,"line_end":75,"column_start":20,"column_end":35},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4162},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/buffer_unordered.rs","byte_start":8887209,"byte_end":8887224,"line_start":112,"line_end":112,"column_start":26,"column_end":41},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4162},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8888376,"byte_end":8888387,"line_start":33,"line_end":33,"column_start":20,"column_end":31},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4632},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/catch_unwind.rs","byte_start":8889568,"byte_end":8889584,"line_start":64,"line_end":64,"column_start":28,"column_end":44},"kind":{"Impl":{"id":139}},"from":{"krate":4,"index":3646},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8890671,"byte_end":8890677,"line_start":37,"line_end":37,"column_start":26,"column_end":32},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4650},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8891124,"byte_end":8891130,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/chunks.rs","byte_start":8892119,"byte_end":8892125,"line_start":87,"line_end":87,"column_start":20,"column_end":26},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4650},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894393,"byte_end":8894400,"line_start":27,"line_end":27,"column_start":17,"column_end":24},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/collect.rs","byte_start":8894527,"byte_end":8894534,"line_start":33,"line_end":33,"column_start":20,"column_end":27},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4659},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8895577,"byte_end":8895581,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/wait.rs","byte_start":8896522,"byte_end":8896526,"line_start":47,"line_end":47,"column_start":30,"column_end":34},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4666},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898641,"byte_end":8898650,"line_start":57,"line_end":57,"column_start":27,"column_end":36},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":4290},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8898843,"byte_end":8898852,"line_start":65,"line_end":65,"column_start":29,"column_end":38},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4290},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899012,"byte_end":8899021,"line_start":71,"line_end":71,"column_start":22,"column_end":31},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4290},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899170,"byte_end":8899178,"line_start":80,"line_end":80,"column_start":23,"column_end":31},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4680},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899588,"byte_end":8899594,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":4672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/channel.rs","byte_start":8899965,"byte_end":8899977,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":4688},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900506,"byte_end":8900517,"line_start":12,"line_end":12,"column_start":9,"column_end":20},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":4696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8900892,"byte_end":8900903,"line_start":21,"line_end":21,"column_start":28,"column_end":39},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":4696},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901279,"byte_end":8901288,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8901755,"byte_end":8901764,"line_start":48,"line_end":48,"column_start":24,"column_end":33},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4703},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8902974,"byte_end":8902986,"line_start":87,"line_end":87,"column_start":24,"column_end":36},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4357},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8903176,"byte_end":8903188,"line_start":95,"line_end":95,"column_start":26,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4357},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/split.rs","byte_start":8903378,"byte_end":8903390,"line_start":101,"line_end":101,"column_start":24,"column_end":36},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4357},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905789,"byte_end":8905805,"line_start":53,"line_end":53,"column_start":31,"column_end":47},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8905842,"byte_end":8905858,"line_start":54,"line_end":54,"column_start":31,"column_end":47},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8908116,"byte_end":8908132,"line_start":116,"line_end":116,"column_start":21,"column_end":37},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8908230,"byte_end":8908246,"line_start":122,"line_end":122,"column_start":9,"column_end":25},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8909284,"byte_end":8909300,"line_start":154,"line_end":154,"column_start":9,"column_end":25},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8913587,"byte_end":8913603,"line_start":270,"line_end":270,"column_start":20,"column_end":36},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4406},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8916842,"byte_end":8916846,"line_start":343,"line_end":343,"column_start":38,"column_end":42},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4458},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8918722,"byte_end":8918738,"line_start":389,"line_end":389,"column_start":26,"column_end":42},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8918881,"byte_end":8918897,"line_start":395,"line_end":395,"column_start":18,"column_end":34},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8920365,"byte_end":8920381,"line_start":425,"line_end":425,"column_start":37,"column_end":53},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4406},"to":{"krate":1,"index":3804}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8920853,"byte_end":8920860,"line_start":445,"line_end":445,"column_start":26,"column_end":33},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5291},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8921392,"byte_end":8921399,"line_start":466,"line_end":466,"column_start":35,"column_end":42},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":5291},"to":{"krate":1,"index":3796}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8921419,"byte_end":8921424,"line_start":468,"line_end":468,"column_start":9,"column_end":14},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8923273,"byte_end":8923278,"line_start":529,"line_end":529,"column_start":18,"column_end":23},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4415},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924196,"byte_end":8924208,"line_start":553,"line_end":553,"column_start":23,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4495},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924328,"byte_end":8924340,"line_start":559,"line_end":559,"column_start":43,"column_end":55},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924786,"byte_end":8924793,"line_start":573,"line_end":573,"column_start":25,"column_end":32},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4508},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924824,"byte_end":8924831,"line_start":574,"line_end":574,"column_start":25,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4508},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8924858,"byte_end":8924865,"line_start":576,"line_end":576,"column_start":20,"column_end":27},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4508},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8925151,"byte_end":8925158,"line_start":587,"line_end":587,"column_start":33,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4508},"to":{"krate":0,"index":2281}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8925700,"byte_end":8925704,"line_start":606,"line_end":606,"column_start":9,"column_end":13},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8926854,"byte_end":8926858,"line_start":635,"line_end":635,"column_start":18,"column_end":22},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4421},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_unordered.rs","byte_start":8927974,"byte_end":8927985,"line_start":670,"line_end":670,"column_start":19,"column_end":30},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4536},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928474,"byte_end":8928486,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5284},"to":{"krate":1,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928591,"byte_end":8928603,"line_start":21,"line_end":21,"column_start":16,"column_end":28},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":5284},"to":{"krate":1,"index":2044}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928634,"byte_end":8928646,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":5284},"to":{"krate":1,"index":2076}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928769,"byte_end":8928781,"line_start":29,"line_end":29,"column_start":17,"column_end":29},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5284},"to":{"krate":1,"index":2065}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8928962,"byte_end":8928974,"line_start":36,"line_end":36,"column_start":20,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5284},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932405,"byte_end":8932419,"line_start":117,"line_end":117,"column_start":21,"column_end":35},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4575},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8932515,"byte_end":8932529,"line_start":123,"line_end":123,"column_start":9,"column_end":23},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8934132,"byte_end":8934146,"line_start":169,"line_end":169,"column_start":20,"column_end":34},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4575},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8935158,"byte_end":8935172,"line_start":201,"line_end":201,"column_start":26,"column_end":40},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4575},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/futures_ordered.rs","byte_start":8935352,"byte_end":8935366,"line_start":209,"line_end":209,"column_start":37,"column_end":51},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4575},"to":{"krate":1,"index":3804}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/stream/mod.rs","byte_start":93626,"byte_end":93629,"line_start":134,"line_end":134,"column_start":55,"column_end":58},"kind":{"Impl":{"id":193}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227441,"byte_end":227446,"line_start":30,"line_end":30,"column_start":14,"column_end":19},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":227999,"byte_end":228003,"line_start":55,"line_end":55,"column_start":31,"column_end":35},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4710},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":228270,"byte_end":228274,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with.rs","byte_start":229992,"byte_end":229996,"line_start":124,"line_end":124,"column_start":29,"column_end":33},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4710},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":231842,"byte_end":231853,"line_start":39,"line_end":39,"column_start":19,"column_end":30},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":233211,"byte_end":233222,"line_start":83,"line_end":83,"column_start":30,"column_end":41},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4750},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/with_flat_map.rs","byte_start":233518,"byte_end":233529,"line_start":96,"line_end":96,"column_start":28,"column_end":39},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4750},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":234846,"byte_end":234851,"line_start":16,"line_end":16,"column_start":15,"column_end":20},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/flush.rs","byte_start":235436,"byte_end":235441,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4766},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236293,"byte_end":236304,"line_start":24,"line_end":24,"column_start":12,"column_end":23},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":236854,"byte_end":236865,"line_start":44,"line_end":44,"column_start":21,"column_end":32},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4772},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/from_err.rs","byte_start":237434,"byte_end":237445,"line_start":64,"line_end":64,"column_start":51,"column_end":62},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4772},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238078,"byte_end":238082,"line_start":20,"line_end":20,"column_start":15,"column_end":19},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4785},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send.rs","byte_start":238723,"byte_end":238727,"line_start":40,"line_end":40,"column_start":26,"column_end":30},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4785},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":240041,"byte_end":240048,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":4792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/send_all.rs","byte_start":241089,"byte_end":241096,"line_start":59,"line_end":59,"column_start":23,"column_end":30},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242412,"byte_end":242422,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":242975,"byte_end":242985,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4802},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/map_err.rs","byte_start":243695,"byte_end":243705,"line_start":57,"line_end":57,"column_start":31,"column_end":41},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4802},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244346,"byte_end":244352,"line_start":15,"line_end":15,"column_start":24,"column_end":30},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":244728,"byte_end":244734,"line_start":25,"line_end":25,"column_start":50,"column_end":56},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1754},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":245181,"byte_end":245187,"line_start":44,"line_end":44,"column_start":21,"column_end":27},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1754},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/fanout.rs","byte_start":246919,"byte_end":246929,"line_start":98,"line_end":98,"column_start":15,"column_end":25},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":4815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8936373,"byte_end":8936379,"line_start":28,"line_end":28,"column_start":15,"column_end":21},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":4881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8937322,"byte_end":8937328,"line_start":61,"line_end":61,"column_start":20,"column_end":26},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":4881},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/buffer.rs","byte_start":8937527,"byte_end":8937533,"line_start":70,"line_end":70,"column_start":24,"column_end":30},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":4881},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/wait.rs","byte_start":8939121,"byte_end":8939125,"line_start":22,"line_end":22,"column_start":15,"column_end":19},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":4889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":208574,"byte_end":208577,"line_start":34,"line_end":34,"column_start":34,"column_end":37},"kind":{"Impl":{"id":221}},"from":{"krate":5,"index":3763},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sink/mod.rs","byte_start":209359,"byte_end":209362,"line_start":58,"line_end":58,"column_start":51,"column_end":54},"kind":{"Impl":{"id":222}},"from":{"krate":5,"index":90},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249255,"byte_end":249259,"line_start":36,"line_end":36,"column_start":31,"column_end":35},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4895},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249296,"byte_end":249300,"line_start":37,"line_end":37,"column_start":31,"column_end":35},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":4895},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":249316,"byte_end":249320,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":4895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250147,"byte_end":250154,"line_start":66,"line_end":66,"column_start":23,"column_end":30},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1864},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250411,"byte_end":250418,"line_start":75,"line_end":75,"column_start":26,"column_end":33},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1864},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/lock.rs","byte_start":250785,"byte_end":250792,"line_start":86,"line_end":86,"column_start":22,"column_end":29},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1864},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286529,"byte_end":286539,"line_start":137,"line_end":137,"column_start":6,"column_end":16},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286705,"byte_end":286709,"line_start":141,"line_end":141,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":1915}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":286741,"byte_end":286745,"line_start":142,"line_end":142,"column_start":29,"column_end":33},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":4997},"to":{"krate":0,"index":1915}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292150,"byte_end":292160,"line_start":270,"line_end":270,"column_start":18,"column_end":28},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1907},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292245,"byte_end":292255,"line_start":276,"line_end":276,"column_start":21,"column_end":31},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1907},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292383,"byte_end":292393,"line_start":282,"line_end":282,"column_start":22,"column_end":32},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1907},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/atomic_task.rs","byte_start":292418,"byte_end":292428,"line_start":283,"line_end":283,"column_start":22,"column_end":32},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1907},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293113,"byte_end":293127,"line_start":33,"line_end":33,"column_start":10,"column_end":24},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":4902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293310,"byte_end":293324,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":4911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293664,"byte_end":293676,"line_start":57,"line_end":57,"column_start":6,"column_end":18},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":4920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":293800,"byte_end":293810,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":294042,"byte_end":294052,"line_start":75,"line_end":75,"column_start":16,"column_end":26},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1943},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":294245,"byte_end":294255,"line_start":83,"line_end":83,"column_start":15,"column_end":25},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1943},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/core.rs","byte_start":297709,"byte_end":297714,"line_start":176,"line_end":176,"column_start":19,"column_end":24},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1974},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":320819,"byte_end":320830,"line_start":25,"line_end":25,"column_start":31,"column_end":42},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2016},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":320867,"byte_end":320878,"line_start":26,"line_end":26,"column_start":31,"column_end":42},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2016},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/unpark_mutex.rs","byte_start":321585,"byte_end":321596,"line_start":45,"line_end":45,"column_start":9,"column_end":20},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":326639,"byte_end":326643,"line_start":42,"line_end":42,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":326672,"byte_end":326673,"line_start":43,"line_end":43,"column_start":26,"column_end":27},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2050},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327742,"byte_end":327750,"line_start":72,"line_end":72,"column_start":18,"column_end":26},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2051},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":327836,"byte_end":327844,"line_start":78,"line_end":78,"column_start":17,"column_end":25},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2051},"to":{"krate":1,"index":7129}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/data.rs","byte_start":328124,"byte_end":328132,"line_start":93,"line_end":93,"column_start":25,"column_end":33},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":4924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333239,"byte_end":333245,"line_start":72,"line_end":72,"column_start":31,"column_end":37},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":4931},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333282,"byte_end":333288,"line_start":73,"line_end":73,"column_start":31,"column_end":37},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":4931},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":333304,"byte_end":333310,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":4931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/task_rc.rs","byte_start":334995,"byte_end":335001,"line_start":122,"line_end":122,"column_start":19,"column_end":25},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":4931},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":299879,"byte_end":299884,"line_start":70,"line_end":70,"column_start":23,"column_end":28},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2099},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":300814,"byte_end":300828,"line_start":119,"line_end":119,"column_start":10,"column_end":24},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":301247,"byte_end":301261,"line_start":134,"line_end":134,"column_start":10,"column_end":24},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":302159,"byte_end":302171,"line_start":166,"line_end":166,"column_start":6,"column_end":18},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":4977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":302933,"byte_end":302943,"line_start":197,"line_end":197,"column_start":6,"column_end":16},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":4968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":303563,"byte_end":303568,"line_start":218,"line_end":218,"column_start":17,"column_end":22},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":305216,"byte_end":305221,"line_start":265,"line_end":265,"column_start":17,"column_end":22},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":306144,"byte_end":306149,"line_start":291,"line_end":291,"column_start":15,"column_end":20},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":309208,"byte_end":309212,"line_start":373,"line_end":373,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2144}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":309215,"byte_end":309219,"line_start":373,"line_end":373,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2144}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310055,"byte_end":310059,"line_start":393,"line_end":393,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310062,"byte_end":310066,"line_start":393,"line_end":393,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":310509,"byte_end":310512,"line_start":413,"line_end":413,"column_start":6,"column_end":9},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":311464,"byte_end":311467,"line_start":441,"line_end":441,"column_start":21,"column_end":24},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":2148},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":311660,"byte_end":311668,"line_start":450,"line_end":450,"column_start":17,"column_end":25},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2151},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":312242,"byte_end":312254,"line_start":479,"line_end":479,"column_start":6,"column_end":18},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":313644,"byte_end":313656,"line_start":523,"line_end":523,"column_start":17,"column_end":29},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2160},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316312,"byte_end":316323,"line_start":603,"line_end":603,"column_start":6,"column_end":17},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":4992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":316746,"byte_end":316757,"line_start":620,"line_end":620,"column_start":21,"column_end":32},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":4992},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":317295,"byte_end":317299,"line_start":634,"line_end":634,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2184}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":317302,"byte_end":317306,"line_start":634,"line_end":634,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2184}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":318186,"byte_end":318196,"line_start":658,"line_end":658,"column_start":38,"column_end":48},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2186},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":318938,"byte_end":318948,"line_start":684,"line_end":684,"column_start":51,"column_end":61},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2186},"to":{"krate":0,"index":2281}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/std/mod.rs","byte_start":319388,"byte_end":319400,"line_start":698,"line_end":698,"column_start":26,"column_end":38},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":254238,"byte_end":254242,"line_start":92,"line_end":92,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2218}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":254266,"byte_end":254270,"line_start":93,"line_end":93,"column_start":21,"column_end":25},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":4997},"to":{"krate":0,"index":2218}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":255781,"byte_end":255785,"line_start":136,"line_end":136,"column_start":6,"column_end":10},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":4997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":259889,"byte_end":259893,"line_start":224,"line_end":224,"column_start":21,"column_end":25},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":4997},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":261307,"byte_end":261312,"line_start":265,"line_end":265,"column_start":17,"column_end":22},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":266714,"byte_end":266719,"line_start":403,"line_end":403,"column_start":45,"column_end":50},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2232},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":267738,"byte_end":267742,"line_start":426,"line_end":426,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":267745,"byte_end":267749,"line_start":426,"line_end":426,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":274459,"byte_end":274465,"line_start":566,"line_end":566,"column_start":32,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":2271},"to":{"krate":0,"index":2281}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277723,"byte_end":277735,"line_start":637,"line_end":637,"column_start":22,"column_end":34},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277760,"byte_end":277772,"line_start":638,"line_end":638,"column_start":22,"column_end":34},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":277782,"byte_end":277794,"line_start":640,"line_end":640,"column_start":6,"column_end":18},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278768,"byte_end":278780,"line_start":669,"line_end":669,"column_start":16,"column_end":28},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":278921,"byte_end":278933,"line_start":678,"line_end":678,"column_start":21,"column_end":33},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279076,"byte_end":279088,"line_start":685,"line_end":685,"column_start":15,"column_end":27},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279300,"byte_end":279309,"line_start":696,"line_end":696,"column_start":28,"column_end":37},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2299},"to":{"krate":0,"index":2271}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279759,"byte_end":279768,"line_start":713,"line_end":713,"column_start":51,"column_end":60},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2299},"to":{"krate":0,"index":2281}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/task_impl/mod.rs","byte_start":279968,"byte_end":279980,"line_start":721,"line_end":721,"column_start":38,"column_end":50},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/resultstream.rs","byte_start":336074,"byte_end":336081,"line_start":33,"line_end":33,"column_start":31,"column_end":38},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5003},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":343355,"byte_end":343360,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":351823,"byte_end":351829,"line_start":322,"line_end":322,"column_start":9,"column_end":15},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":354796,"byte_end":354802,"line_start":393,"line_end":393,"column_start":18,"column_end":24},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5018},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355055,"byte_end":355063,"line_start":404,"line_end":404,"column_start":23,"column_end":31},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5033},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355191,"byte_end":355199,"line_start":410,"line_end":410,"column_start":16,"column_end":24},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":5033},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":355282,"byte_end":355290,"line_start":416,"line_end":416,"column_start":9,"column_end":17},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":356351,"byte_end":356359,"line_start":443,"line_end":443,"column_start":20,"column_end":28},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":5012},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":356510,"byte_end":356518,"line_start":452,"line_end":452,"column_start":18,"column_end":26},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":5012},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":359671,"byte_end":359682,"line_start":537,"line_end":537,"column_start":12,"column_end":23},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360103,"byte_end":360114,"line_start":548,"line_end":548,"column_start":23,"column_end":34},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2421},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360536,"byte_end":360547,"line_start":562,"line_end":562,"column_start":51,"column_end":62},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2421},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360701,"byte_end":360712,"line_start":569,"line_end":569,"column_start":21,"column_end":32},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2421},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":360815,"byte_end":360822,"line_start":575,"line_end":575,"column_start":28,"column_end":35},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2429},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":361549,"byte_end":361556,"line_start":599,"line_end":599,"column_start":45,"column_end":52},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/oneshot.rs","byte_start":361748,"byte_end":361755,"line_start":607,"line_end":607,"column_start":26,"column_end":33},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404090,"byte_end":404095,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5051},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404133,"byte_end":404138,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5051},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404155,"byte_end":404159,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":404355,"byte_end":404360,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":5051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/queue.rs","byte_start":406115,"byte_end":406120,"line_start":140,"line_end":140,"column_start":18,"column_end":23},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":5051},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366679,"byte_end":366683,"line_start":113,"line_end":113,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2532}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366686,"byte_end":366690,"line_start":113,"line_end":113,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2532}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366693,"byte_end":366698,"line_start":113,"line_end":113,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":1,"index":2179},"to":{"krate":0,"index":2532}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":366723,"byte_end":366738,"line_start":114,"line_end":114,"column_start":22,"column_end":37},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5066},"to":{"krate":0,"index":2532}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367787,"byte_end":367796,"line_start":152,"line_end":152,"column_start":24,"column_end":33},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":5086},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":367983,"byte_end":367992,"line_start":160,"line_end":160,"column_start":26,"column_end":35},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":5086},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368151,"byte_end":368160,"line_start":166,"line_end":166,"column_start":24,"column_end":33},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5086},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368266,"byte_end":368275,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":5086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368433,"byte_end":368445,"line_start":180,"line_end":180,"column_start":24,"column_end":36},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5100},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368635,"byte_end":368647,"line_start":188,"line_end":188,"column_start":26,"column_end":38},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":5100},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":368928,"byte_end":368940,"line_start":198,"line_end":198,"column_start":24,"column_end":36},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":5100},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":369155,"byte_end":369167,"line_start":208,"line_end":208,"column_start":9,"column_end":21},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":5100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":371727,"byte_end":371737,"line_start":305,"line_end":305,"column_start":6,"column_end":16},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":374546,"byte_end":374552,"line_start":391,"line_end":391,"column_start":9,"column_end":15},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":5058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":383348,"byte_end":383354,"line_start":639,"line_end":639,"column_start":18,"column_end":24},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5058},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":384450,"byte_end":384465,"line_start":672,"line_end":672,"column_start":9,"column_end":24},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":385421,"byte_end":385436,"line_start":699,"line_end":699,"column_start":18,"column_end":33},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":5066},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":386243,"byte_end":386258,"line_start":734,"line_end":734,"column_start":19,"column_end":34},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":5066},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":386376,"byte_end":386382,"line_start":741,"line_end":741,"column_start":19,"column_end":25},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":5058},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":387572,"byte_end":387578,"line_start":774,"line_end":774,"column_start":18,"column_end":24},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":5058},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":387870,"byte_end":387878,"line_start":791,"line_end":791,"column_start":9,"column_end":17},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":5073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":392270,"byte_end":392278,"line_start":923,"line_end":923,"column_start":20,"column_end":28},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":5073},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":393791,"byte_end":393799,"line_start":960,"line_end":960,"column_start":18,"column_end":26},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":5073},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":394799,"byte_end":394816,"line_start":989,"line_end":989,"column_start":9,"column_end":26},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":5079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":395099,"byte_end":395116,"line_start":999,"line_end":999,"column_start":20,"column_end":37},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":5079},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":398654,"byte_end":398665,"line_start":1095,"line_end":1095,"column_start":23,"column_end":34},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2656},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399166,"byte_end":399177,"line_start":1110,"line_end":1110,"column_start":27,"column_end":38},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2656},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399338,"byte_end":399345,"line_start":1117,"line_end":1117,"column_start":28,"column_end":35},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2661},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399745,"byte_end":399752,"line_start":1133,"line_end":1133,"column_start":32,"column_end":39},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":2661},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":399927,"byte_end":399932,"line_start":1146,"line_end":1146,"column_start":9,"column_end":14},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":5131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400277,"byte_end":400282,"line_start":1157,"line_end":1157,"column_start":31,"column_end":36},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":5131},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400319,"byte_end":400324,"line_start":1158,"line_end":1158,"column_start":31,"column_end":36},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":5131},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/mpsc/mod.rs","byte_start":400337,"byte_end":400342,"line_start":1160,"line_end":1160,"column_start":6,"column_end":11},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":5142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407933,"byte_end":407938,"line_start":44,"line_end":44,"column_start":31,"column_end":36},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":5166},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407975,"byte_end":407980,"line_start":45,"line_end":45,"column_start":31,"column_end":36},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":5166},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":407996,"byte_end":408002,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":5160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":412981,"byte_end":412986,"line_start":170,"line_end":170,"column_start":9,"column_end":14},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":5166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413126,"byte_end":413131,"line_start":176,"line_end":176,"column_start":18,"column_end":23},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":5166},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413409,"byte_end":413421,"line_start":186,"line_end":186,"column_start":24,"column_end":36},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":2737},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413611,"byte_end":413623,"line_start":194,"line_end":194,"column_start":26,"column_end":38},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":2737},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":413797,"byte_end":413809,"line_start":200,"line_end":200,"column_start":24,"column_end":36},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":2737},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414253,"byte_end":414264,"line_start":216,"line_end":216,"column_start":23,"column_end":34},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":5173},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414425,"byte_end":414436,"line_start":223,"line_end":223,"column_start":26,"column_end":37},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":5173},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414588,"byte_end":414599,"line_start":229,"line_end":229,"column_start":22,"column_end":33},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":5173},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":414859,"byte_end":414872,"line_start":242,"line_end":242,"column_start":20,"column_end":33},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":5181},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415698,"byte_end":415712,"line_start":268,"line_end":268,"column_start":9,"column_end":23},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":5187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":415946,"byte_end":415960,"line_start":279,"line_end":279,"column_start":19,"column_end":33},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":5187},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":416131,"byte_end":416145,"line_start":286,"line_end":286,"column_start":22,"column_end":36},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":5187},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/sync/bilock.rs","byte_start":416307,"byte_end":416321,"line_start":292,"line_end":292,"column_start":18,"column_end":32},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":5187},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":418464,"byte_end":418470,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":5202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419251,"byte_end":419257,"line_start":84,"line_end":84,"column_start":19,"column_end":25},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":5202},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419366,"byte_end":419372,"line_start":90,"line_end":90,"column_start":18,"column_end":24},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":5202},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":419742,"byte_end":419748,"line_start":107,"line_end":107,"column_start":18,"column_end":24},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":5202},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":420900,"byte_end":420908,"line_start":142,"line_end":142,"column_start":9,"column_end":17},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":5208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":421688,"byte_end":421696,"line_start":164,"line_end":164,"column_start":20,"column_end":28},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":5208},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":422679,"byte_end":422687,"line_start":196,"line_end":196,"column_start":18,"column_end":26},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":5208},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":422930,"byte_end":422945,"line_start":208,"line_end":208,"column_start":19,"column_end":34},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":5225},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":423047,"byte_end":423062,"line_start":214,"line_end":214,"column_start":18,"column_end":33},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":5225},"to":{"krate":0,"index":1793}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":423821,"byte_end":423836,"line_start":246,"line_end":246,"column_start":9,"column_end":24},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":5225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425137,"byte_end":425154,"line_start":284,"line_end":284,"column_start":9,"column_end":26},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":5232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":425437,"byte_end":425454,"line_start":294,"line_end":294,"column_start":20,"column_end":37},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":5232},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426044,"byte_end":426053,"line_start":315,"line_end":315,"column_start":24,"column_end":33},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2878},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426240,"byte_end":426249,"line_start":323,"line_end":323,"column_start":26,"column_end":35},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2878},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426408,"byte_end":426417,"line_start":329,"line_end":329,"column_start":24,"column_end":33},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2878},"to":{"krate":4,"index":1623}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":426523,"byte_end":426532,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430239,"byte_end":430250,"line_start":431,"line_end":431,"column_start":23,"column_end":34},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2894},"to":{"krate":0,"index":1439}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430754,"byte_end":430765,"line_start":446,"line_end":446,"column_start":27,"column_end":38},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2894},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":430929,"byte_end":430936,"line_start":453,"line_end":453,"column_start":28,"column_end":35},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2899},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/mpsc.rs","byte_start":431336,"byte_end":431343,"line_start":469,"line_end":469,"column_start":32,"column_end":39},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2899},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":433289,"byte_end":433295,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":5239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":436088,"byte_end":436094,"line_start":138,"line_end":138,"column_start":18,"column_end":24},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":5239},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":436492,"byte_end":436500,"line_start":155,"line_end":155,"column_start":9,"column_end":17},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":5245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":437373,"byte_end":437381,"line_start":178,"line_end":178,"column_start":20,"column_end":28},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":5245},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":438419,"byte_end":438427,"line_start":210,"line_end":210,"column_start":18,"column_end":26},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":5245},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441287,"byte_end":441298,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":441706,"byte_end":441717,"line_start":300,"line_end":300,"column_start":23,"column_end":34},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2969},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":442133,"byte_end":442144,"line_start":314,"line_end":314,"column_start":51,"column_end":62},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2969},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":442305,"byte_end":442312,"line_start":321,"line_end":321,"column_start":28,"column_end":35},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2974},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.29/src/unsync/oneshot.rs","byte_start":443051,"byte_end":443058,"line_start":345,"line_end":345,"column_start":45,"column_end":52},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2974},"to":{"krate":1,"index":7479}}]}