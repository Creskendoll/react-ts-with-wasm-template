{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32","program":"/home/ken/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","js_sys","/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=e9e674945d85a893","-C","extra-filename=-e9e674945d85a893","--out-dir","/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps","-L","dependency=/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps","--extern","wasm_bindgen=/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps/libwasm_bindgen-1b072582444cdf83.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ken/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ken/Documents/RustStuff/tilor/target/rls/debug/deps/libjs_sys-e9e674945d85a893.rmeta"},"prelude":{"crate_id":{"name":"js_sys","disambiguator":[8933618047892496216,835136075230304984]},"crate_root":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src","external_crates":[{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":15,"id":{"name":"wasm_bindgen","disambiguator":[13072452021431140335,16056773306849629200]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":16,"id":{"name":"wasm_bindgen_macro","disambiguator":[12259047975113807171,6302381302689521145]}},{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[8192225388863340420,3173580909043468535]}}],"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":0,"byte_end":240984,"line_start":1,"line_end":4898,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":0,"byte_end":240984,"line_start":1,"line_end":4898,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":325},{"krate":0,"index":334},{"krate":0,"index":332},{"krate":0,"index":329},{"krate":0,"index":327},{"krate":0,"index":143},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":16},{"krate":0,"index":409},{"krate":0,"index":418},{"krate":0,"index":416},{"krate":0,"index":413},{"krate":0,"index":411},{"krate":0,"index":336},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":492},{"krate":0,"index":420},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":20},{"krate":0,"index":599},{"krate":0,"index":606},{"krate":0,"index":603},{"krate":0,"index":601},{"krate":0,"index":533},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":762},{"krate":0,"index":771},{"krate":0,"index":769},{"krate":0,"index":766},{"krate":0,"index":764},{"krate":0,"index":608},{"krate":0,"index":660},{"krate":0,"index":663},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":849},{"krate":0,"index":858},{"krate":0,"index":856},{"krate":0,"index":853},{"krate":0,"index":851},{"krate":0,"index":773},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":927},{"krate":0,"index":936},{"krate":0,"index":934},{"krate":0,"index":931},{"krate":0,"index":929},{"krate":0,"index":860},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":1042},{"krate":0,"index":1051},{"krate":0,"index":1049},{"krate":0,"index":1046},{"krate":0,"index":1044},{"krate":0,"index":938},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":30},{"krate":0,"index":1120},{"krate":0,"index":1129},{"krate":0,"index":1127},{"krate":0,"index":1124},{"krate":0,"index":1122},{"krate":0,"index":1053},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1213},{"krate":0,"index":1222},{"krate":0,"index":1220},{"krate":0,"index":1217},{"krate":0,"index":1215},{"krate":0,"index":1131},{"krate":0,"index":1183},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1289},{"krate":0,"index":1293},{"krate":0,"index":1291},{"krate":0,"index":1233},{"krate":0,"index":1286},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":1416},{"krate":0,"index":1425},{"krate":0,"index":1423},{"krate":0,"index":1420},{"krate":0,"index":1418},{"krate":0,"index":1352},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":63},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1497},{"krate":0,"index":1551},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578},{"krate":0,"index":1581},{"krate":0,"index":1584},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":65},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":1864},{"krate":0,"index":1873},{"krate":0,"index":1871},{"krate":0,"index":1868},{"krate":0,"index":1866},{"krate":0,"index":1632},{"krate":0,"index":1684},{"krate":0,"index":1687},{"krate":0,"index":1690},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1714},{"krate":0,"index":1717},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1753},{"krate":0,"index":1756},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1765},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":1774},{"krate":0,"index":1777},{"krate":0,"index":1780},{"krate":0,"index":1783},{"krate":0,"index":1786},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1858},{"krate":0,"index":1861},{"krate":0,"index":2020},{"krate":0,"index":2024},{"krate":0,"index":2022},{"krate":0,"index":1875},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2014},{"krate":0,"index":2017},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":2084},{"krate":0,"index":2088},{"krate":0,"index":2086},{"krate":0,"index":2026},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2157},{"krate":0,"index":2166},{"krate":0,"index":2164},{"krate":0,"index":2161},{"krate":0,"index":2159},{"krate":0,"index":2090},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2154},{"krate":0,"index":2235},{"krate":0,"index":2244},{"krate":0,"index":2242},{"krate":0,"index":2239},{"krate":0,"index":2237},{"krate":0,"index":2168},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2232},{"krate":0,"index":75},{"krate":0,"index":2426},{"krate":0,"index":2435},{"krate":0,"index":2433},{"krate":0,"index":2430},{"krate":0,"index":2428},{"krate":0,"index":2284},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2348},{"krate":0,"index":2351},{"krate":0,"index":2354},{"krate":0,"index":2357},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":2366},{"krate":0,"index":2369},{"krate":0,"index":2372},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2387},{"krate":0,"index":2390},{"krate":0,"index":2393},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2423},{"krate":0,"index":2516},{"krate":0,"index":2525},{"krate":0,"index":2523},{"krate":0,"index":2520},{"krate":0,"index":2518},{"krate":0,"index":2437},{"krate":0,"index":2489},{"krate":0,"index":2492},{"krate":0,"index":2495},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2504},{"krate":0,"index":2507},{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2603},{"krate":0,"index":2612},{"krate":0,"index":2610},{"krate":0,"index":2607},{"krate":0,"index":2605},{"krate":0,"index":2536},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2600},{"krate":0,"index":2681},{"krate":0,"index":2690},{"krate":0,"index":2688},{"krate":0,"index":2685},{"krate":0,"index":2683},{"krate":0,"index":2614},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2675},{"krate":0,"index":2678},{"krate":0,"index":2759},{"krate":0,"index":2768},{"krate":0,"index":2766},{"krate":0,"index":2763},{"krate":0,"index":2761},{"krate":0,"index":2692},{"krate":0,"index":2744},{"krate":0,"index":2747},{"krate":0,"index":2750},{"krate":0,"index":2753},{"krate":0,"index":2756},{"krate":0,"index":2843},{"krate":0,"index":2852},{"krate":0,"index":2850},{"krate":0,"index":2847},{"krate":0,"index":2845},{"krate":0,"index":2770},{"krate":0,"index":2822},{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2924},{"krate":0,"index":2933},{"krate":0,"index":2931},{"krate":0,"index":2928},{"krate":0,"index":2926},{"krate":0,"index":2854},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":3726},{"krate":0,"index":3733},{"krate":0,"index":3730},{"krate":0,"index":3728},{"krate":0,"index":3487},{"krate":0,"index":3540},{"krate":0,"index":3543},{"krate":0,"index":3546},{"krate":0,"index":3549},{"krate":0,"index":3552},{"krate":0,"index":3555},{"krate":0,"index":3558},{"krate":0,"index":3561},{"krate":0,"index":3564},{"krate":0,"index":3567},{"krate":0,"index":3570},{"krate":0,"index":3573},{"krate":0,"index":3576},{"krate":0,"index":3579},{"krate":0,"index":3582},{"krate":0,"index":3585},{"krate":0,"index":3588},{"krate":0,"index":3591},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":3603},{"krate":0,"index":3606},{"krate":0,"index":3609},{"krate":0,"index":3612},{"krate":0,"index":3615},{"krate":0,"index":3618},{"krate":0,"index":3621},{"krate":0,"index":3624},{"krate":0,"index":3627},{"krate":0,"index":3630},{"krate":0,"index":3633},{"krate":0,"index":3636},{"krate":0,"index":3639},{"krate":0,"index":3642},{"krate":0,"index":3645},{"krate":0,"index":3648},{"krate":0,"index":3651},{"krate":0,"index":3654},{"krate":0,"index":3657},{"krate":0,"index":3660},{"krate":0,"index":3663},{"krate":0,"index":3666},{"krate":0,"index":3669},{"krate":0,"index":3672},{"krate":0,"index":3675},{"krate":0,"index":3678},{"krate":0,"index":3681},{"krate":0,"index":3684},{"krate":0,"index":3687},{"krate":0,"index":3690},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3699},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3708},{"krate":0,"index":3711},{"krate":0,"index":3714},{"krate":0,"index":3717},{"krate":0,"index":3720},{"krate":0,"index":3723},{"krate":0,"index":81},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":3833},{"krate":0,"index":3837},{"krate":0,"index":3835},{"krate":0,"index":3735},{"krate":0,"index":3788},{"krate":0,"index":3791},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3809},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3818},{"krate":0,"index":3821},{"krate":0,"index":3824},{"krate":0,"index":3827},{"krate":0,"index":3830},{"krate":0,"index":114},{"krate":0,"index":4236},{"krate":0,"index":4240},{"krate":0,"index":4238},{"krate":0,"index":4151},{"krate":0,"index":4203},{"krate":0,"index":4206},{"krate":0,"index":4209},{"krate":0,"index":4212},{"krate":0,"index":4215},{"krate":0,"index":4218},{"krate":0,"index":4221},{"krate":0,"index":4224},{"krate":0,"index":4227},{"krate":0,"index":4230},{"krate":0,"index":4233},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":4490},{"krate":0,"index":4494},{"krate":0,"index":4492},{"krate":0,"index":4393},{"krate":0,"index":4445},{"krate":0,"index":4448},{"krate":0,"index":4451},{"krate":0,"index":4454},{"krate":0,"index":4457},{"krate":0,"index":4460},{"krate":0,"index":4463},{"krate":0,"index":4466},{"krate":0,"index":4469},{"krate":0,"index":4472},{"krate":0,"index":4475},{"krate":0,"index":4478},{"krate":0,"index":4481},{"krate":0,"index":4484},{"krate":0,"index":4487},{"krate":0,"index":4312},{"krate":0,"index":4318},{"krate":0,"index":4593},{"krate":0,"index":4597},{"krate":0,"index":4595},{"krate":0,"index":4496},{"krate":0,"index":4548},{"krate":0,"index":4551},{"krate":0,"index":4554},{"krate":0,"index":4557},{"krate":0,"index":4560},{"krate":0,"index":4563},{"krate":0,"index":4566},{"krate":0,"index":4569},{"krate":0,"index":4572},{"krate":0,"index":4575},{"krate":0,"index":4578},{"krate":0,"index":4581},{"krate":0,"index":4584},{"krate":0,"index":4587},{"krate":0,"index":4590},{"krate":0,"index":4321},{"krate":0,"index":4327},{"krate":0,"index":4696},{"krate":0,"index":4700},{"krate":0,"index":4698},{"krate":0,"index":4599},{"krate":0,"index":4651},{"krate":0,"index":4654},{"krate":0,"index":4657},{"krate":0,"index":4660},{"krate":0,"index":4663},{"krate":0,"index":4666},{"krate":0,"index":4669},{"krate":0,"index":4672},{"krate":0,"index":4675},{"krate":0,"index":4678},{"krate":0,"index":4681},{"krate":0,"index":4684},{"krate":0,"index":4687},{"krate":0,"index":4690},{"krate":0,"index":4693},{"krate":0,"index":4330},{"krate":0,"index":4336},{"krate":0,"index":4799},{"krate":0,"index":4803},{"krate":0,"index":4801},{"krate":0,"index":4702},{"krate":0,"index":4754},{"krate":0,"index":4757},{"krate":0,"index":4760},{"krate":0,"index":4763},{"krate":0,"index":4766},{"krate":0,"index":4769},{"krate":0,"index":4772},{"krate":0,"index":4775},{"krate":0,"index":4778},{"krate":0,"index":4781},{"krate":0,"index":4784},{"krate":0,"index":4787},{"krate":0,"index":4790},{"krate":0,"index":4793},{"krate":0,"index":4796},{"krate":0,"index":4339},{"krate":0,"index":4345},{"krate":0,"index":4902},{"krate":0,"index":4906},{"krate":0,"index":4904},{"krate":0,"index":4805},{"krate":0,"index":4857},{"krate":0,"index":4860},{"krate":0,"index":4863},{"krate":0,"index":4866},{"krate":0,"index":4869},{"krate":0,"index":4872},{"krate":0,"index":4875},{"krate":0,"index":4878},{"krate":0,"index":4881},{"krate":0,"index":4884},{"krate":0,"index":4887},{"krate":0,"index":4890},{"krate":0,"index":4893},{"krate":0,"index":4896},{"krate":0,"index":4899},{"krate":0,"index":4348},{"krate":0,"index":4354},{"krate":0,"index":5005},{"krate":0,"index":5009},{"krate":0,"index":5007},{"krate":0,"index":4908},{"krate":0,"index":4960},{"krate":0,"index":4963},{"krate":0,"index":4966},{"krate":0,"index":4969},{"krate":0,"index":4972},{"krate":0,"index":4975},{"krate":0,"index":4978},{"krate":0,"index":4981},{"krate":0,"index":4984},{"krate":0,"index":4987},{"krate":0,"index":4990},{"krate":0,"index":4993},{"krate":0,"index":4996},{"krate":0,"index":4999},{"krate":0,"index":5002},{"krate":0,"index":4357},{"krate":0,"index":4363},{"krate":0,"index":5108},{"krate":0,"index":5112},{"krate":0,"index":5110},{"krate":0,"index":5011},{"krate":0,"index":5063},{"krate":0,"index":5066},{"krate":0,"index":5069},{"krate":0,"index":5072},{"krate":0,"index":5075},{"krate":0,"index":5078},{"krate":0,"index":5081},{"krate":0,"index":5084},{"krate":0,"index":5087},{"krate":0,"index":5090},{"krate":0,"index":5093},{"krate":0,"index":5096},{"krate":0,"index":5099},{"krate":0,"index":5102},{"krate":0,"index":5105},{"krate":0,"index":4366},{"krate":0,"index":4372},{"krate":0,"index":5211},{"krate":0,"index":5215},{"krate":0,"index":5213},{"krate":0,"index":5114},{"krate":0,"index":5166},{"krate":0,"index":5169},{"krate":0,"index":5172},{"krate":0,"index":5175},{"krate":0,"index":5178},{"krate":0,"index":5181},{"krate":0,"index":5184},{"krate":0,"index":5187},{"krate":0,"index":5190},{"krate":0,"index":5193},{"krate":0,"index":5196},{"krate":0,"index":5199},{"krate":0,"index":5202},{"krate":0,"index":5205},{"krate":0,"index":5208},{"krate":0,"index":4375},{"krate":0,"index":4381},{"krate":0,"index":5314},{"krate":0,"index":5318},{"krate":0,"index":5316},{"krate":0,"index":5217},{"krate":0,"index":5269},{"krate":0,"index":5272},{"krate":0,"index":5275},{"krate":0,"index":5278},{"krate":0,"index":5281},{"krate":0,"index":5284},{"krate":0,"index":5287},{"krate":0,"index":5290},{"krate":0,"index":5293},{"krate":0,"index":5296},{"krate":0,"index":5299},{"krate":0,"index":5302},{"krate":0,"index":5305},{"krate":0,"index":5308},{"krate":0,"index":5311},{"krate":0,"index":4384},{"krate":0,"index":4390}],"decl_id":null,"docs":" Bindings to JavaScript's standard, built-in objects, including their methods\n and properties.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":2153,"byte_end":2163,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"decode_uri","qualname":"::decode_uri","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURI()` function decodes a Uniform Resource Identifier (URI)\n previously created by `encodeURI` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":2585,"byte_end":2605,"line_start":61,"line_end":61,"column_start":12,"column_end":32},"name":"decode_uri_component","qualname":"::decode_uri_component","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component\n previously created by encodeURIComponent or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":3178,"byte_end":3188,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"encode_uri","qualname":"::encode_uri","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURI()` function encodes a Uniform Resource Identifier (URI)\n by replacing each instance of certain characters by one, two, three, or\n four escape sequences representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two\n \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":3771,"byte_end":3791,"line_start":80,"line_end":80,"column_start":12,"column_end":32},"name":"encode_uri_component","qualname":"::encode_uri_component","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component\n by replacing each instance of certain characters by one, two, three, or four escape sequences\n representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":131},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":4063,"byte_end":4067,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"eval","qualname":"::eval","value":"fn (js_source_text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `eval()` function evaluates JavaScript code represented as a string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":4459,"byte_end":4468,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"is_finite","qualname":"::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global isFinite() function determines whether the passed value is a finite number.\n If  needed, the parameter is first converted to a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":4848,"byte_end":4857,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"parse_int","qualname":"::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseInt()` function parses a string argument and returns an integer\n of the specified radix (the base in mathematical numeral systems), or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":137},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":5187,"byte_end":5198,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"parse_float","qualname":"::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The parseFloat() function parses an argument and returns a floating point number,\n or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":5517,"byte_end":5523,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"escape","qualname":"::escape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The escape() function computes a new string in which certain characters have been\n replaced by a hexadecimal escape sequence.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6016,"byte_end":6024,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"unescape","qualname":"::unescape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The unescape() function computes a new string in which hexadecimal escape\n sequences are replaced with the character that it represents. The escape sequences might\n be introduced by a function like escape. Usually, decodeURI or decodeURIComponent\n are preferred over unescape.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6217,"byte_end":6222,"line_start":131,"line_end":131,"column_start":14,"column_end":19},"name":"Array","qualname":"::Array","value":"Array {  }","parent":null,"children":[{"krate":0,"index":326}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6304,"byte_end":6307,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"fn () -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6462,"byte_end":6477,"line_start":139,"line_end":139,"column_start":12,"column_end":27},"name":"new_with_length","qualname":"<Array>::new_with_length","value":"fn (len: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array with the specified length (elements are initialized to `undefined`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6662,"byte_end":6665,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"fn (&self, index: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the element at the index (returns `undefined` if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6867,"byte_end":6870,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"set","qualname":"<Array>::set","value":"fn (&self, index: u32, value: JsValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the element at the index (auto-enlarges the array if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":7223,"byte_end":7229,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"delete","qualname":"<Array>::delete","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Deletes the element at the index (does nothing if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":7443,"byte_end":7447,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"from","qualname":"<Array>::from","value":"fn (val: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.from()` method creates a new, shallow-copied `Array` instance\n from an array-like or iterable object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":7824,"byte_end":7835,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"copy_within","qualname":"<Array>::copy_within","value":"fn (&self, target: i32, start: i32, end: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The copyWithin() method shallow copies part of an array to another\n location in the same array and returns it, without modifying its size.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":8221,"byte_end":8227,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"concat","qualname":"<Array>::concat","value":"fn (&self, array: &Array) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The concat() method is used to merge two or more arrays. This method\n does not change the existing arrays, but instead returns a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":8564,"byte_end":8569,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"every","qualname":"<Array>::every","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The every() method tests whether all elements in the array pass the test\n implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":8974,"byte_end":8978,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"fill","qualname":"<Array>::fill","value":"fn (&self, value: &JsValue, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":9346,"byte_end":9352,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"filter","qualname":"<Array>::filter","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `filter()` method creates a new array with all elements that pass the\n test implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":9772,"byte_end":9776,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"find","qualname":"<Array>::find","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `find()` method returns the value of the first element in the array that satisfies\n  the provided testing function. Otherwise `undefined` is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":10217,"byte_end":10227,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"find_index","qualname":"<Array>::find_index","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The findIndex() method returns the index of the first element in the array that\n satisfies the provided testing function. Otherwise -1 is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":10617,"byte_end":10621,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"flat","qualname":"<Array>::flat","value":"fn (&self, depth: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The flat() method creates a new array with all sub-array elements concatenated into it\n recursively up to the specified depth.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":10979,"byte_end":10987,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Array>::flat_map","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array) -> Vec<JsValue>) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The flatMap() method first maps each element using a mapping function, then flattens\n the result into a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":11378,"byte_end":11386,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each array element.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":11756,"byte_end":11764,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"includes","qualname":"<Array>::includes","value":"fn (&self, value: &JsValue, from_index: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The includes() method determines whether an array includes a certain\n element, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":12154,"byte_end":12162,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Array>::index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The indexOf() method returns the first index at which a given element\n can be found in the array, or -1 if it is not present.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":12512,"byte_end":12520,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Array>::is_array","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Array.isArray() method determines whether the passed value is an Array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":12846,"byte_end":12850,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"join","qualname":"<Array>::join","value":"fn (&self, delimiter: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The join() method joins all elements of an array (or an array-like object)\n into a string and returns this string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":13302,"byte_end":13315,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<Array>::last_index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndexOf() method returns the last index at which a given element\n can be found in the array, or -1 if it is not present. The array is\n searched backwards, starting at fromIndex.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":13830,"byte_end":13836,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"length","qualname":"<Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of an object which is an instance of type Array\n sets or returns the number of elements in that array. The value is an\n unsigned, 32-bit integer that is always numerically greater than the\n highest index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":14458,"byte_end":14461,"line_start":286,"line_end":286,"column_start":12,"column_end":15},"name":"map","qualname":"<Array>::map","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" map calls a provided callback function once for each element in an array,\n in order, and constructs a new array from the results. callback is invoked\n only for indexes of the array which have assigned values, including undefined.\n It is not called for missing elements of the array (that is, indexes that have\n never been set, which have been deleted or which have never been assigned a value).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":15410,"byte_end":15413,"line_start":304,"line_end":304,"column_start":12,"column_end":15},"name":"of1","qualname":"<Array>::of1","value":"fn (a: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.of()` method creates a new Array instance with a variable\n number of arguments, regardless of number or type of the arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":15628,"byte_end":15631,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"of2","qualname":"<Array>::of2","value":"fn (a: &JsValue, b: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":15859,"byte_end":15862,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"of3","qualname":"<Array>::of3","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":16103,"byte_end":16106,"line_start":316,"line_end":316,"column_start":12,"column_end":15},"name":"of4","qualname":"<Array>::of4","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":16360,"byte_end":16363,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"of5","qualname":"<Array>::of5","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue, e: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":16750,"byte_end":16753,"line_start":327,"line_end":327,"column_start":12,"column_end":15},"name":"pop","qualname":"<Array>::pop","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The pop() method removes the last element from an array and returns that\n element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":17073,"byte_end":17077,"line_start":334,"line_end":334,"column_start":12,"column_end":16},"name":"push","qualname":"<Array>::push","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The push() method adds one or more elements to the end of an array and\n returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":17449,"byte_end":17455,"line_start":341,"line_end":341,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Array>::reduce","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The reduce() method applies a function against an accumulator and each element in\n the array (from left to right) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":17969,"byte_end":17981,"line_start":352,"line_end":352,"column_start":12,"column_end":24},"name":"reduce_right","qualname":"<Array>::reduce_right","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The reduceRight() method applies a function against an accumulator and each value\n of the array (from right-to-left) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":18457,"byte_end":18464,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Array>::reverse","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The reverse() method reverses an array in place. The first array\n element becomes the last, and the last array element becomes the first.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":18813,"byte_end":18818,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"shift","qualname":"<Array>::shift","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The shift() method removes the first element from an array and returns\n that removed element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":19218,"byte_end":19223,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"name":"slice","qualname":"<Array>::slice","value":"fn (&self, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The slice() method returns a shallow copy of a portion of an array into\n a new array object selected from begin to end (end not included).\n The original array will not be modified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":19648,"byte_end":19652,"line_start":385,"line_end":385,"column_start":12,"column_end":16},"name":"some","qualname":"<Array>::some","value":"fn (&self, predicate: &mut dyn FnMut(JsValue) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The some() method tests whether at least one element in the array passes the test implemented\n by the provided function.\n Note: This method returns false for any condition put on an empty array.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":20219,"byte_end":20223,"line_start":396,"line_end":396,"column_start":12,"column_end":16},"name":"sort","qualname":"<Array>::sort","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The sort() method sorts the elements of an array in place and returns\n the array. The sort is not necessarily stable. The default sort\n order is according to string Unicode code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":20546,"byte_end":20552,"line_start":403,"line_end":403,"column_start":12,"column_end":18},"name":"splice","qualname":"<Array>::splice","value":"fn (&self, start: u32, delete_count: u32, item: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The splice() method changes the contents of an array by removing existing elements and/or\n adding new elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":21098,"byte_end":21114,"line_start":411,"line_end":411,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Array>::to_locale_string","value":"fn (&self, locales: &JsValue, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string representing the elements of the array.\n The elements are converted to Strings using their toLocaleString methods and these\n Strings are separated by a locale-specific String (such as a comma “,”).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":21479,"byte_end":21488,"line_start":418,"line_end":418,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Array>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified array\n and its elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":21821,"byte_end":21828,"line_start":425,"line_end":425,"column_start":12,"column_end":19},"name":"unshift","qualname":"<Array>::unshift","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The unshift() method adds one or more elements to the beginning of an\n array and returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":6064,"byte_end":6079,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22379,"byte_end":22390,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"name":"ArrayBuffer","qualname":"::ArrayBuffer","value":"ArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":410}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22957,"byte_end":22960,"line_start":463,"line_end":463,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuffer>::new","value":"fn (length: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `ArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer. You cannot directly\n manipulate the contents of an `ArrayBuffer`; instead, you\n create one of the typed array objects or a `DataView` object\n which represents the buffer in a specific format, and use that\n to read and write the contents of the buffer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":23574,"byte_end":23585,"line_start":473,"line_end":473,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<ArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength property of an object which is an instance of type ArrayBuffer\n it's an accessor property whose set accessor function is undefined,\n meaning that you can only read this property.\n The value is established when the array is constructed and cannot be changed.\n This property returns 0 if this ArrayBuffer has been detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":23986,"byte_end":23993,"line_start":480,"line_end":480,"column_start":12,"column_end":19},"name":"is_view","qualname":"<ArrayBuffer>::is_view","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isView()` method returns true if arg is one of the `ArrayBuffer`\n views, such as typed array objects or a DataView; false otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24370,"byte_end":24375,"line_start":488,"line_end":488,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBuffer>::slice","value":"fn (&self, begin: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `ArrayBuffer` whose contents\n are a copy of this `ArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24669,"byte_end":24683,"line_start":494,"line_end":494,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<ArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":22256,"byte_end":22271,"line_start":448,"line_end":448,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":490},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24874,"byte_end":24891,"line_start":502,"line_end":502,"column_start":14,"column_end":31},"name":"SharedArrayBuffer","qualname":"::SharedArrayBuffer","value":"SharedArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":491}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":25391,"byte_end":25394,"line_start":512,"line_end":512,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedArrayBuffer>::new","value":"fn (length: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `SharedArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer, similar to the `ArrayBuffer`\n object, but in a way that they can be used to create views\n on shared memory. Unlike an `ArrayBuffer`, a `SharedArrayBuffer`\n cannot become detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":25849,"byte_end":25860,"line_start":520,"line_end":520,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<SharedArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length of\n an `SharedArrayBuffer` in bytes. This is established when\n the `SharedArrayBuffer` is constructed and cannot be changed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26263,"byte_end":26268,"line_start":528,"line_end":528,"column_start":12,"column_end":17},"name":"slice","qualname":"<SharedArrayBuffer>::slice","value":"fn (&self, begin: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `SharedArrayBuffer` whose contents\n are a copy of this `SharedArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26580,"byte_end":26594,"line_start":534,"line_end":534,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<SharedArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":24766,"byte_end":24781,"line_start":498,"line_end":498,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":27005,"byte_end":27009,"line_start":545,"line_end":545,"column_start":12,"column_end":16},"name":"keys","qualname":"<Array>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The keys() method returns a new Array Iterator object that contains the\n keys for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":27345,"byte_end":27352,"line_start":552,"line_end":552,"column_start":12,"column_end":19},"name":"entries","qualname":"<Array>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The entries() method returns a new Array Iterator object that contains\n the key/value pairs for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":27677,"byte_end":27683,"line_start":559,"line_end":559,"column_start":12,"column_end":18},"name":"values","qualname":"<Array>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The values() method returns a new Array Iterator object that\n contains the values for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":26686,"byte_end":26701,"line_start":538,"line_end":538,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28320,"byte_end":28327,"line_start":572,"line_end":572,"column_start":9,"column_end":16},"name":"Atomics","qualname":"::Atomics","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531}],"decl_id":null,"docs":" The `Atomics` object provides atomic operations as static methods.\n They are used with `SharedArrayBuffer` objects.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28287,"byte_end":28311,"line_start":571,"line_end":571,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28875,"byte_end":28878,"line_start":584,"line_end":584,"column_start":16,"column_end":19},"name":"add","qualname":"::Atomics::add","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.add()` method adds a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":29477,"byte_end":29480,"line_start":594,"line_end":594,"column_start":16,"column_end":19},"name":"and","qualname":"::Atomics::and","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.and()` method computes a bitwise AND with a given\n value at a given position in the array, and returns the old value\n at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":30233,"byte_end":30249,"line_start":605,"line_end":605,"column_start":16,"column_end":32},"name":"compare_exchange","qualname":"::Atomics::compare_exchange","value":"fn (typed_array: &JsValue, index: u32, expected_value: i32, replacement_value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.compareExchange()` method exchanges a given\n replacement value at a given position in the array, if a given expected\n value equals the old value. It returns the old value at that position\n whether it was equal to the expected value or not.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":30916,"byte_end":30924,"line_start":619,"line_end":619,"column_start":16,"column_end":24},"name":"exchange","qualname":"::Atomics::exchange","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.exchange()` method stores a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":31490,"byte_end":31502,"line_start":628,"line_end":628,"column_start":16,"column_end":28},"name":"is_lock_free","qualname":"::Atomics::is_lock_free","value":"fn (size: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.isLockFree()` method is used to determine\n whether to use locks or atomic operations. It returns true,\n if the given size is one of the `BYTES_PER_ELEMENT` property\n of integer `TypedArray` types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":31842,"byte_end":31846,"line_start":635,"line_end":635,"column_start":16,"column_end":20},"name":"load","qualname":"::Atomics::load","value":"fn (typed_array: &JsValue, index: u32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.load()` method returns a value at a given\n position in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":32391,"byte_end":32397,"line_start":644,"line_end":644,"column_start":16,"column_end":22},"name":"notify","qualname":"::Atomics::notify","value":"fn (typed_array: &Int32Array, index: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.notify()` method notifies up some agents that\n are sleeping in the wait queue.\n Note: This operation works with a shared `Int32Array` only.\n If `count` is not provided, notifies all the agents in the queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":32611,"byte_end":32628,"line_start":648,"line_end":648,"column_start":16,"column_end":33},"name":"notify_with_count","qualname":"::Atomics::notify_with_count","value":"fn (typed_array: &Int32Array, index: u32, count: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Notifies up to `count` agents in the wait queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":33262,"byte_end":33264,"line_start":661,"line_end":661,"column_start":16,"column_end":18},"name":"or","qualname":"::Atomics::or","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.or()` method computes a bitwise OR with a given value\n at a given position in the array, and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":33688,"byte_end":33693,"line_start":668,"line_end":668,"column_start":16,"column_end":21},"name":"store","qualname":"::Atomics::store","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.store()` method stores a given value at the given\n position in the array and returns that value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":34262,"byte_end":34265,"line_start":677,"line_end":677,"column_start":16,"column_end":19},"name":"sub","qualname":"::Atomics::sub","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.sub()` method substracts a given value at a\n given position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":34957,"byte_end":34961,"line_start":688,"line_end":688,"column_start":16,"column_end":20},"name":"wait","qualname":"::Atomics::wait","value":"fn (typed_array: &Int32Array, index: u32, value: i32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.wait()` method verifies that a given\n position in an `Int32Array` still contains a given value\n and if so sleeps, awaiting a wakeup or a timeout.\n It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".\n Note: This operation only works with a shared `Int32Array`\n and may not be allowed on the main thread.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":35312,"byte_end":35329,"line_start":694,"line_end":694,"column_start":16,"column_end":33},"name":"wait_with_timeout","qualname":"::Atomics::wait_with_timeout","value":"fn (typed_array: &Int32Array, index: u32, value: i32, timeout: f64) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait()`, but with timeout","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36009,"byte_end":36012,"line_start":709,"line_end":709,"column_start":16,"column_end":19},"name":"xor","qualname":"::Atomics::xor","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.xor()` method computes a bitwise XOR\n with a given value at a given position in the array,\n and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":28353,"byte_end":28368,"line_start":575,"line_end":575,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36261,"byte_end":36268,"line_start":718,"line_end":718,"column_start":14,"column_end":21},"name":"Boolean","qualname":"::Boolean","value":"Boolean {  }","parent":null,"children":[{"krate":0,"index":600}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36595,"byte_end":36598,"line_start":725,"line_end":725,"column_start":12,"column_end":15},"name":"new","qualname":"<Boolean>::new","value":"fn (value: &JsValue) -> Boolean","parent":null,"children":[],"decl_id":null,"docs":" The `Boolean()` constructor creates an object wrapper for a boolean value.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Boolean::from` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36517,"byte_end":36583,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36903,"byte_end":36911,"line_start":731,"line_end":731,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Boolean>::value_of","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `Boolean` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36105,"byte_end":36120,"line_start":714,"line_end":714,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":762},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37585,"byte_end":37593,"line_start":766,"line_end":766,"column_start":14,"column_end":22},"name":"DataView","qualname":"::DataView","value":"DataView {  }","parent":null,"children":[{"krate":0,"index":763}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37951,"byte_end":37954,"line_start":774,"line_end":774,"column_start":12,"column_end":15},"name":"new","qualname":"<DataView>::new","value":"fn (buffer: &ArrayBuffer, byteOffset: usize, byteLength: usize) -> DataView","parent":null,"children":[],"decl_id":null,"docs":" The `DataView` view provides a low-level interface for reading and\n writing multiple number types in an `ArrayBuffer` irrespective of the\n platform's endianness.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":38318,"byte_end":38324,"line_start":780,"line_end":780,"column_start":12,"column_end":18},"name":"buffer","qualname":"<DataView>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":38711,"byte_end":38722,"line_start":787,"line_end":787,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<DataView>::byte_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":39103,"byte_end":39114,"line_start":794,"line_end":794,"column_start":12,"column_end":23},"name":"byte_offset","qualname":"<DataView>::byte_offset","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The offset (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":39469,"byte_end":39477,"line_start":801,"line_end":801,"column_start":12,"column_end":20},"name":"get_int8","qualname":"<DataView>::get_int8","value":"fn (&self, byte_offset: usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" The getInt8() method gets a signed 8-bit integer (byte) at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":39854,"byte_end":39863,"line_start":808,"line_end":808,"column_start":12,"column_end":21},"name":"get_uint8","qualname":"<DataView>::get_uint8","value":"fn (&self, byte_offset: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The getUint8() method gets a unsigned 8-bit integer (byte) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":40240,"byte_end":40249,"line_start":815,"line_end":815,"column_start":12,"column_end":21},"name":"get_int16","qualname":"<DataView>::get_int16","value":"fn (&self, byte_offset: usize) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The getInt16() method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":40627,"byte_end":40643,"line_start":822,"line_end":822,"column_start":12,"column_end":28},"name":"get_int16_endian","qualname":"<DataView>::get_int16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The getInt16() method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":41053,"byte_end":41063,"line_start":829,"line_end":829,"column_start":12,"column_end":22},"name":"get_uint16","qualname":"<DataView>::get_uint16","value":"fn (&self, byte_offset: usize) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":41452,"byte_end":41469,"line_start":836,"line_end":836,"column_start":12,"column_end":29},"name":"get_uint16_endian","qualname":"<DataView>::get_uint16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":41867,"byte_end":41876,"line_start":843,"line_end":843,"column_start":12,"column_end":21},"name":"get_int32","qualname":"<DataView>::get_int32","value":"fn (&self, byte_offset: usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The getInt32() method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":42253,"byte_end":42269,"line_start":850,"line_end":850,"column_start":12,"column_end":28},"name":"get_int32_endian","qualname":"<DataView>::get_int32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The getInt32() method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":42678,"byte_end":42688,"line_start":857,"line_end":857,"column_start":12,"column_end":22},"name":"get_uint32","qualname":"<DataView>::get_uint32","value":"fn (&self, byte_offset: usize) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":43076,"byte_end":43093,"line_start":864,"line_end":864,"column_start":12,"column_end":29},"name":"get_uint32_endian","qualname":"<DataView>::get_uint32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":43496,"byte_end":43507,"line_start":871,"line_end":871,"column_start":12,"column_end":23},"name":"get_float32","qualname":"<DataView>::get_float32","value":"fn (&self, byte_offset: usize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The getFloat32() method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":43889,"byte_end":43907,"line_start":878,"line_end":878,"column_start":12,"column_end":30},"name":"get_float32_endian","qualname":"<DataView>::get_float32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The getFloat32() method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":44311,"byte_end":44322,"line_start":885,"line_end":885,"column_start":12,"column_end":23},"name":"get_float64","qualname":"<DataView>::get_float64","value":"fn (&self, byte_offset: usize) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getFloat64() method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":44705,"byte_end":44723,"line_start":892,"line_end":892,"column_start":12,"column_end":30},"name":"get_float64_endian","qualname":"<DataView>::get_float64_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getFloat64() method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":45125,"byte_end":45133,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"set_int8","qualname":"<DataView>::set_int8","value":"fn (&self, byte_offset: usize, value: i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt8() method stores a signed 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":45524,"byte_end":45533,"line_start":906,"line_end":906,"column_start":12,"column_end":21},"name":"set_uint8","qualname":"<DataView>::set_uint8","value":"fn (&self, byte_offset: usize, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint8() method stores an unsigned 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":45923,"byte_end":45932,"line_start":913,"line_end":913,"column_start":12,"column_end":21},"name":"set_int16","qualname":"<DataView>::set_int16","value":"fn (&self, byte_offset: usize, value: i16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt16() method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":46323,"byte_end":46339,"line_start":920,"line_end":920,"column_start":12,"column_end":28},"name":"set_int16_endian","qualname":"<DataView>::set_int16_endian","value":"fn (&self, byte_offset: usize, value: i16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt16() method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":46766,"byte_end":46776,"line_start":927,"line_end":927,"column_start":12,"column_end":22},"name":"set_uint16","qualname":"<DataView>::set_uint16","value":"fn (&self, byte_offset: usize, value: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":47182,"byte_end":47199,"line_start":934,"line_end":934,"column_start":12,"column_end":29},"name":"set_uint16_endian","qualname":"<DataView>::set_uint16_endian","value":"fn (&self, byte_offset: usize, value: u16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":47610,"byte_end":47619,"line_start":941,"line_end":941,"column_start":12,"column_end":21},"name":"set_int32","qualname":"<DataView>::set_int32","value":"fn (&self, byte_offset: usize, value: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt32() method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":48009,"byte_end":48025,"line_start":948,"line_end":948,"column_start":12,"column_end":28},"name":"set_int32_endian","qualname":"<DataView>::set_int32_endian","value":"fn (&self, byte_offset: usize, value: i32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setInt32() method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":48451,"byte_end":48461,"line_start":955,"line_end":955,"column_start":12,"column_end":22},"name":"set_uint32","qualname":"<DataView>::set_uint32","value":"fn (&self, byte_offset: usize, value: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":48866,"byte_end":48883,"line_start":962,"line_end":962,"column_start":12,"column_end":29},"name":"set_uint32_endian","qualname":"<DataView>::set_uint32_endian","value":"fn (&self, byte_offset: usize, value: u32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":49299,"byte_end":49310,"line_start":969,"line_end":969,"column_start":12,"column_end":23},"name":"set_float32","qualname":"<DataView>::set_float32","value":"fn (&self, byte_offset: usize, value: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat32() method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":49705,"byte_end":49723,"line_start":976,"line_end":976,"column_start":12,"column_end":30},"name":"set_float32_endian","qualname":"<DataView>::set_float32_endian","value":"fn (&self, byte_offset: usize, value: f32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat32() method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50140,"byte_end":50151,"line_start":983,"line_end":983,"column_start":12,"column_end":23},"name":"set_float64","qualname":"<DataView>::set_float64","value":"fn (&self, byte_offset: usize, value: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat64() method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50547,"byte_end":50565,"line_start":990,"line_end":990,"column_start":12,"column_end":30},"name":"set_float64_endian","qualname":"<DataView>::set_float64_endian","value":"fn (&self, byte_offset: usize, value: f64, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The setFloat64() method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37462,"byte_end":37477,"line_start":762,"line_end":762,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":849},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50772,"byte_end":50777,"line_start":998,"line_end":998,"column_start":14,"column_end":19},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":850}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":51217,"byte_end":51220,"line_start":1007,"line_end":1007,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (message: &str) -> Error","parent":null,"children":[],"decl_id":null,"docs":" The Error constructor creates an error object.\n Instances of Error objects are thrown when runtime errors occur.\n The Error object can also be used as a base object for user-defined exceptions.\n See below for standard built-in error types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":51513,"byte_end":51520,"line_start":1013,"line_end":1013,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The message property is a human-readable description of the error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":51607,"byte_end":51618,"line_start":1015,"line_end":1015,"column_start":12,"column_end":23},"name":"set_message","qualname":"<Error>::set_message","value":"fn (&self, message: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":51935,"byte_end":51939,"line_start":1021,"line_end":1021,"column_start":12,"column_end":16},"name":"name","qualname":"<Error>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The name property represents a name for the type of error. The initial value is \"Error\".","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52026,"byte_end":52034,"line_start":1023,"line_end":1023,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Error>::set_name","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52342,"byte_end":52351,"line_start":1029,"line_end":1029,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Error>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified Error object","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":50649,"byte_end":50664,"line_start":994,"line_end":994,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":927},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52535,"byte_end":52544,"line_start":1037,"line_end":1037,"column_start":14,"column_end":23},"name":"EvalError","qualname":"::EvalError","value":"EvalError {  }","parent":null,"children":[{"krate":0,"index":928}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52395,"byte_end":52410,"line_start":1033,"line_end":1033,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52395,"byte_end":52410,"line_start":1033,"line_end":1033,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52395,"byte_end":52410,"line_start":1033,"line_end":1033,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52929,"byte_end":52932,"line_start":1045,"line_end":1045,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalError>::new","value":"fn (message: &str) -> EvalError","parent":null,"children":[],"decl_id":null,"docs":" The EvalError object indicates an error regarding the global eval() function. This\n exception is not thrown by JavaScript anymore, however the EvalError object remains for\n compatibility.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52395,"byte_end":52410,"line_start":1033,"line_end":1033,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52395,"byte_end":52410,"line_start":1033,"line_end":1033,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":53135,"byte_end":53143,"line_start":1053,"line_end":1053,"column_start":14,"column_end":22},"name":"Function","qualname":"::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1043}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":53776,"byte_end":53789,"line_start":1064,"line_end":1064,"column_start":12,"column_end":25},"name":"new_with_args","qualname":"<Function>::new_with_args","value":"fn (args: &str, body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":54458,"byte_end":54469,"line_start":1075,"line_end":1075,"column_start":12,"column_end":23},"name":"new_no_args","qualname":"<Function>::new_no_args","value":"fn (body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":54814,"byte_end":54819,"line_start":1082,"line_end":1082,"column_start":12,"column_end":17},"name":"apply","qualname":"<Function>::apply","value":"fn (&self, context: &JsValue, args: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The apply() method calls a function with a given this value, and arguments provided as an array\n (or an array-like object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":55208,"byte_end":55213,"line_start":1089,"line_end":1089,"column_start":12,"column_end":17},"name":"call0","qualname":"<Function>::call0","value":"fn (&self, context: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":55588,"byte_end":55593,"line_start":1096,"line_end":1096,"column_start":12,"column_end":17},"name":"call1","qualname":"<Function>::call1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":55984,"byte_end":55989,"line_start":1103,"line_end":1103,"column_start":12,"column_end":17},"name":"call2","qualname":"<Function>::call2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":56435,"byte_end":56440,"line_start":1115,"line_end":1115,"column_start":12,"column_end":17},"name":"call3","qualname":"<Function>::call3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":57004,"byte_end":57008,"line_start":1128,"line_end":1128,"column_start":12,"column_end":16},"name":"bind","qualname":"<Function>::bind","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":57461,"byte_end":57466,"line_start":1135,"line_end":1135,"column_start":12,"column_end":17},"name":"bind0","qualname":"<Function>::bind0","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":57919,"byte_end":57924,"line_start":1142,"line_end":1142,"column_start":12,"column_end":17},"name":"bind1","qualname":"<Function>::bind1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":58393,"byte_end":58398,"line_start":1149,"line_end":1149,"column_start":12,"column_end":17},"name":"bind2","qualname":"<Function>::bind2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":58883,"byte_end":58888,"line_start":1156,"line_end":1156,"column_start":12,"column_end":17},"name":"bind3","qualname":"<Function>::bind3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The bind() method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":59315,"byte_end":59321,"line_start":1168,"line_end":1168,"column_start":12,"column_end":18},"name":"length","qualname":"<Function>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property indicates the number of arguments expected by the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":59720,"byte_end":59724,"line_start":1176,"line_end":1176,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" A Function object's read-only name property indicates the function's\n name as specified when it was created or \"anonymous\" for functions\n created anonymously.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60044,"byte_end":60053,"line_start":1182,"line_end":1182,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Function>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the source code of the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":52977,"byte_end":52992,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60398,"byte_end":60406,"line_start":1192,"line_end":1192,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Function>::try_from","value":"fn (val: &JsValue) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Function` value of this JS value if it's an instance of a\n function.","sig":null,"attributes":[{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60304,"byte_end":60386,"line_start":1191,"line_end":1191,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1120},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60612,"byte_end":60621,"line_start":1202,"line_end":1202,"column_start":14,"column_end":23},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":1121}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60989,"byte_end":60993,"line_start":1209,"line_end":1209,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"fn (&self, value: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The next() method returns an object with two properties done and value.\n You can also provide a parameter to the next method to send a value to the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61343,"byte_end":61350,"line_start":1215,"line_end":1215,"column_start":12,"column_end":19},"name":"return_","qualname":"<Generator>::return_","value":"fn (&self, value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The return() method returns the given value and finishes the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61750,"byte_end":61755,"line_start":1222,"line_end":1222,"column_start":12,"column_end":17},"name":"throw","qualname":"<Generator>::throw","value":"fn (&self, error: &Error) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The throw() method resumes the execution of a generator by throwing an error into it\n and returns an object with two properties done and value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60489,"byte_end":60504,"line_start":1198,"line_end":1198,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1213},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61951,"byte_end":61954,"line_start":1230,"line_end":1230,"column_start":14,"column_end":17},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1214}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":62191,"byte_end":62196,"line_start":1236,"line_end":1236,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The clear() method removes all elements from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":62456,"byte_end":62462,"line_start":1242,"line_end":1242,"column_start":12,"column_end":18},"name":"delete","qualname":"<Map>::delete","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The delete() method removes the specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":62822,"byte_end":62830,"line_start":1249,"line_end":1249,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Map>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The forEach() method executes a provided function once per each\n key/value pair in the Map object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":63126,"byte_end":63129,"line_start":1255,"line_end":1255,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"fn (&self, key: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The get() method returns a specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":63454,"byte_end":63457,"line_start":1262,"line_end":1262,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The has() method returns a boolean indicating whether an element with\n the specified key exists or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":63800,"byte_end":63803,"line_start":1269,"line_end":1269,"column_start":12,"column_end":15},"name":"new","qualname":"<Map>::new","value":"fn () -> Map","parent":null,"children":[],"decl_id":null,"docs":" The Map object holds key-value pairs. Any value (both objects and\n primitive values) maybe used as either a key or a value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64088,"byte_end":64091,"line_start":1276,"line_end":1276,"column_start":12,"column_end":15},"name":"set","qualname":"<Map>::set","value":"fn (&self, key: &JsValue, value: &JsValue) -> Map","parent":null,"children":[],"decl_id":null,"docs":" The set() method adds or updates an element with a specified key\n and value to a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64518,"byte_end":64522,"line_start":1284,"line_end":1284,"column_start":12,"column_end":16},"name":"size","qualname":"<Map>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The value of size is an integer representing how many entries\n the Map object has. A set accessor function for size is undefined;\n you can not change this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":61828,"byte_end":61843,"line_start":1226,"line_end":1226,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64927,"byte_end":64934,"line_start":1296,"line_end":1296,"column_start":12,"column_end":19},"name":"entries","qualname":"<Map>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The entries() method returns a new Iterator object that contains\n the [key, value] pairs for each element in the Map object in\n insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65269,"byte_end":65273,"line_start":1303,"line_end":1303,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The keys() method returns a new Iterator object that contains the\n keys for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65614,"byte_end":65620,"line_start":1310,"line_end":1310,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The values() method returns a new Iterator object that contains the\n values for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":64562,"byte_end":64577,"line_start":1288,"line_end":1288,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1289},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":66053,"byte_end":66061,"line_start":1322,"line_end":1322,"column_start":14,"column_end":22},"name":"Iterator","qualname":"::Iterator","value":"Iterator {  }","parent":null,"children":[{"krate":0,"index":1290}],"decl_id":null,"docs":" Any object that conforms to the JS iterator protocol. For example,\n something returned by `myArray[Symbol.iterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65661,"byte_end":65676,"line_start":1314,"line_end":1314,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65661,"byte_end":65676,"line_start":1314,"line_end":1314,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65661,"byte_end":65676,"line_start":1314,"line_end":1314,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":66397,"byte_end":66401,"line_start":1329,"line_end":1329,"column_start":12,"column_end":16},"name":"next","qualname":"<Iterator>::next","value":"fn (&self) -> Result<IteratorNext, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The next method always has to return an object with appropriate\n properties including done and value. If a non-object value gets returned\n (such as false or undefined), a TypeError (\"iterator.next() returned a\n non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65661,"byte_end":65676,"line_start":1314,"line_end":1314,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":65661,"byte_end":65676,"line_start":1314,"line_end":1314,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67033,"byte_end":67037,"line_start":1355,"line_end":1355,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67251,"byte_end":67259,"line_start":1363,"line_end":1363,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":68824,"byte_end":68832,"line_start":1439,"line_end":1439,"column_start":8,"column_end":16},"name":"try_iter","qualname":"::try_iter","value":"fn (val: &JsValue) -> Result<Option<IntoIter>, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over `val` using the JS iteration protocol and\n `Symbol.iterator`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1416},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69592,"byte_end":69604,"line_start":1464,"line_end":1464,"column_start":14,"column_end":26},"name":"IteratorNext","qualname":"::IteratorNext","value":"IteratorNext {  }","parent":null,"children":[{"krate":0,"index":1417}],"decl_id":null,"docs":" The result of calling `next()` on a JS iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70032,"byte_end":70036,"line_start":1474,"line_end":1474,"column_start":12,"column_end":16},"name":"done","qualname":"<IteratorNext>::done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the value `true` if the iterator is past the end of the iterated\n sequence. In this case value optionally specifies the return value of\n the iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70224,"byte_end":70229,"line_start":1479,"line_end":1479,"column_start":12,"column_end":17},"name":"value","qualname":"<IteratorNext>::value","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Any JavaScript value returned by the iterator. Can be omitted when done\n is true.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":69289,"byte_end":69304,"line_start":1457,"line_end":1457,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70299,"byte_end":70303,"line_start":1483,"line_end":1483,"column_start":9,"column_end":13},"name":"Math","qualname":"::Math","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1445},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1495}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70266,"byte_end":70290,"line_start":1482,"line_end":1482,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1427},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70683,"byte_end":70686,"line_start":1494,"line_end":1494,"column_start":16,"column_end":19},"name":"abs","qualname":"::Math::abs","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.abs() function returns the absolute value of a number, that is\n Math.abs(x) = |x|","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1429},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":71099,"byte_end":71103,"line_start":1502,"line_end":1502,"column_start":16,"column_end":20},"name":"acos","qualname":"::Math::acos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.acos() function returns the arccosine (in radians) of a\n number, that is ∀x∊[-1;1]\n Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1431},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":71515,"byte_end":71520,"line_start":1510,"line_end":1510,"column_start":16,"column_end":21},"name":"acosh","qualname":"::Math::acosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.acosh() function returns the hyperbolic arc-cosine of a\n number, that is ∀x ≥ 1\n Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1433},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":71939,"byte_end":71943,"line_start":1518,"line_end":1518,"column_start":16,"column_end":20},"name":"asin","qualname":"::Math::asin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.asin() function returns the arcsine (in radians) of a\n number, that is ∀x ∊ [-1;1]\n Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1435},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":72323,"byte_end":72328,"line_start":1525,"line_end":1525,"column_start":16,"column_end":21},"name":"asinh","qualname":"::Math::asinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.asinh() function returns the hyperbolic arcsine of a\n number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1437},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":72599,"byte_end":72603,"line_start":1531,"line_end":1531,"column_start":16,"column_end":20},"name":"atan","qualname":"::Math::atan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atan() function returns the arctangent (in radians) of a\n number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that\n tan(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1439},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":72925,"byte_end":72930,"line_start":1538,"line_end":1538,"column_start":16,"column_end":21},"name":"atan2","qualname":"::Math::atan2","value":"fn (y: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atan2() function returns the arctangent of the quotient of\n its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1441},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":73351,"byte_end":73356,"line_start":1546,"line_end":1546,"column_start":16,"column_end":21},"name":"atanh","qualname":"::Math::atanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.atanh() function returns the hyperbolic arctangent of a number,\n that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that\n tanh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1443},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":73714,"byte_end":73718,"line_start":1553,"line_end":1553,"column_start":16,"column_end":20},"name":"cbrt","qualname":"::Math::cbrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cbrt() function returns the cube root of a number, that is\n Math.cbrt(x) = x^3 = the unique y such that y^3 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1445},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":74051,"byte_end":74055,"line_start":1560,"line_end":1560,"column_start":16,"column_end":20},"name":"ceil","qualname":"::Math::ceil","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.ceil() function returns the smallest integer greater than\n or equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1447},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":74409,"byte_end":74414,"line_start":1567,"line_end":1567,"column_start":16,"column_end":21},"name":"clz32","qualname":"::Math::clz32","value":"fn (x: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The Math.clz32() function returns the number of leading zero bits in\n the 32-bit binary representation of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1449},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":74812,"byte_end":74815,"line_start":1574,"line_end":1574,"column_start":16,"column_end":19},"name":"cos","qualname":"::Math::cos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cos() static function returns the cosine of the specified angle,\n which must be specified in radians. This value is length(adjacent)/length(hypotenuse).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1451},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":75165,"byte_end":75169,"line_start":1581,"line_end":1581,"column_start":16,"column_end":20},"name":"cosh","qualname":"::Math::cosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.cosh() function returns the hyperbolic cosine of a number,\n that can be expressed using the constant e.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1453},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":75563,"byte_end":75566,"line_start":1588,"line_end":1588,"column_start":16,"column_end":19},"name":"exp","qualname":"::Math::exp","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.exp() function returns e^x, where x is the argument, and e is Euler's number\n (also known as Napier's constant), the base of the natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1455},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":75915,"byte_end":75920,"line_start":1595,"line_end":1595,"column_start":16,"column_end":21},"name":"expm1","qualname":"::Math::expm1","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.expm1() function returns e^x - 1, where x is the argument, and e the base of the\n natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1457},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":76251,"byte_end":76256,"line_start":1602,"line_end":1602,"column_start":16,"column_end":21},"name":"floor","qualname":"::Math::floor","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.floor() function returns the largest integer less than or\n equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1459},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":76601,"byte_end":76607,"line_start":1609,"line_end":1609,"column_start":16,"column_end":22},"name":"fround","qualname":"::Math::fround","value":"fn (x: f64) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The Math.fround() function returns the nearest 32-bit single precision float representation\n of a Number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1461},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":76924,"byte_end":76929,"line_start":1615,"line_end":1615,"column_start":16,"column_end":21},"name":"hypot","qualname":"::Math::hypot","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.hypot() function returns the square root of the sum of squares of its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1463},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":77278,"byte_end":77282,"line_start":1622,"line_end":1622,"column_start":16,"column_end":20},"name":"imul","qualname":"::Math::imul","value":"fn (x: i32, y: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The Math.imul() function returns the result of the C-like 32-bit multiplication of the\n two parameters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1465},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":77677,"byte_end":77680,"line_start":1629,"line_end":1629,"column_start":16,"column_end":19},"name":"log","qualname":"::Math::log","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log() function returns the natural logarithm (base e) of a number.\n The JavaScript Math.log() function is equivalent to ln(x) in mathematics.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1467},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":77976,"byte_end":77981,"line_start":1635,"line_end":1635,"column_start":16,"column_end":21},"name":"log10","qualname":"::Math::log10","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log10() function returns the base 10 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1469},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":78278,"byte_end":78283,"line_start":1640,"line_end":1640,"column_start":16,"column_end":21},"name":"log1p","qualname":"::Math::log1p","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log1p() function returns the natural logarithm (base e) of 1 + a number.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1471},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":78576,"byte_end":78580,"line_start":1646,"line_end":1646,"column_start":16,"column_end":20},"name":"log2","qualname":"::Math::log2","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.log2() function returns the base 2 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1473},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":78865,"byte_end":78868,"line_start":1652,"line_end":1652,"column_start":16,"column_end":19},"name":"max","qualname":"::Math::max","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.max() function returns the largest of two numbers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1475},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":79181,"byte_end":79184,"line_start":1658,"line_end":1658,"column_start":16,"column_end":19},"name":"min","qualname":"::Math::min","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The static function Math.min() returns the lowest-valued number passed into it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1477},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":79505,"byte_end":79508,"line_start":1664,"line_end":1664,"column_start":16,"column_end":19},"name":"pow","qualname":"::Math::pow","value":"fn (base: f64, exponent: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.pow() function returns the base to the exponent power, that is, base^exponent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1479},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":80160,"byte_end":80166,"line_start":1674,"line_end":1674,"column_start":16,"column_end":22},"name":"random","qualname":"::Math::random","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.random() function returns a floating-point, pseudo-random number\n in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution\n over that range — which you can then scale to your desired range.\n The implementation selects the initial seed to the random number generation algorithm;\n it cannot be chosen or reset by the user.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1481},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":80475,"byte_end":80480,"line_start":1680,"line_end":1680,"column_start":16,"column_end":21},"name":"round","qualname":"::Math::round","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.round() function returns the value of a number rounded to the nearest integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1483},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":80834,"byte_end":80838,"line_start":1687,"line_end":1687,"column_start":16,"column_end":20},"name":"sign","qualname":"::Math::sign","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sign() function returns the sign of a number, indicating whether the number is\n positive, negative or zero.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1485},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":81117,"byte_end":81120,"line_start":1693,"line_end":1693,"column_start":16,"column_end":19},"name":"sin","qualname":"::Math::sin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sin() function returns the sine of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1487},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":81498,"byte_end":81502,"line_start":1700,"line_end":1700,"column_start":16,"column_end":20},"name":"sinh","qualname":"::Math::sinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed\n using the constant e: Math.sinh(x) = (e^x - e^-x)/2","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1489},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":81881,"byte_end":81885,"line_start":1707,"line_end":1707,"column_start":16,"column_end":20},"name":"sqrt","qualname":"::Math::sqrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.sqrt() function returns the square root of a number, that is\n ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1491},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82167,"byte_end":82170,"line_start":1713,"line_end":1713,"column_start":16,"column_end":19},"name":"tan","qualname":"::Math::tan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.tan() function returns the tangent of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1493},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82562,"byte_end":82566,"line_start":1720,"line_end":1720,"column_start":16,"column_end":20},"name":"tanh","qualname":"::Math::tanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.tanh() function returns the hyperbolic tangent of a number, that is\n tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1495},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82903,"byte_end":82908,"line_start":1727,"line_end":1727,"column_start":16,"column_end":21},"name":"trunc","qualname":"::Math::trunc","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Math.trunc() function returns the integer part of a number by removing any fractional\n digits.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":70341,"byte_end":70356,"line_start":1487,"line_end":1487,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1596},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":83085,"byte_end":83091,"line_start":1736,"line_end":1736,"column_start":14,"column_end":20},"name":"Number","qualname":"::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":1597}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":83399,"byte_end":83408,"line_start":1742,"line_end":1742,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Number>::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isFinite() method determines whether the passed value is a finite number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":83739,"byte_end":83749,"line_start":1748,"line_end":1748,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Number>::is_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isInteger() method determines whether the passed value is an integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":84153,"byte_end":84159,"line_start":1755,"line_end":1755,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Number>::is_nan","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isNaN() method determines whether the passed value is NaN and its type is Number.\n It is a more robust version of the original, global isNaN().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":84533,"byte_end":84548,"line_start":1762,"line_end":1762,"column_start":12,"column_end":27},"name":"is_safe_integer","qualname":"<Number>::is_safe_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Number.isSafeInteger() method determines whether the provided value is a number\n that is a safe integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":84997,"byte_end":85000,"line_start":1771,"line_end":1771,"column_start":12,"column_end":15},"name":"new","qualname":"<Number>::new","value":"fn (value: &JsValue) -> Number","parent":null,"children":[],"decl_id":null,"docs":" The `Number` JavaScript object is a wrapper object allowing\n you to work with numerical values. A `Number` object is\n created using the `Number()` constructor.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Number::from` instead\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":84920,"byte_end":84985,"line_start":1770,"line_end":1770,"column_start":5,"column_end":70}},{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":85367,"byte_end":85376,"line_start":1778,"line_end":1778,"column_start":12,"column_end":21},"name":"parse_int","qualname":"<Number>::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Number.parseInt() method parses a string argument and returns an\n integer of the specified radix or base.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":85734,"byte_end":85745,"line_start":1785,"line_end":1785,"column_start":12,"column_end":23},"name":"parse_float","qualname":"<Number>::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Number.parseFloat() method parses a string argument and returns a\n floating point number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":86090,"byte_end":86106,"line_start":1792,"line_end":1792,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Number>::to_locale_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string with a language sensitive\n representation of this number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":86473,"byte_end":86485,"line_start":1799,"line_end":1799,"column_start":12,"column_end":24},"name":"to_precision","qualname":"<Number>::to_precision","value":"fn (&self, precision: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toPrecision() method returns a string representing the Number\n object to the specified precision.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":86858,"byte_end":86866,"line_start":1806,"line_end":1806,"column_start":12,"column_end":20},"name":"to_fixed","qualname":"<Number>::to_fixed","value":"fn (&self, digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toFixed() method returns a string representing the Number\n object using fixed-point notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":87251,"byte_end":87265,"line_start":1813,"line_end":1813,"column_start":12,"column_end":26},"name":"to_exponential","qualname":"<Number>::to_exponential","value":"fn (&self, fraction_digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toExponential() method returns a string representing the Number\n object in exponential notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":87630,"byte_end":87639,"line_start":1820,"line_end":1820,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Number>::to_string","value":"fn (&self, radix: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the\n specified Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":87981,"byte_end":87989,"line_start":1827,"line_end":1827,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Number>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method returns the wrapped primitive value of\n a Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":82945,"byte_end":82960,"line_start":1732,"line_end":1732,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1864},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88856,"byte_end":88860,"line_start":1867,"line_end":1867,"column_start":14,"column_end":18},"name":"Date","qualname":"::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1865}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":89166,"byte_end":89174,"line_start":1874,"line_end":1874,"column_start":12,"column_end":20},"name":"get_date","qualname":"<Date>::get_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getDate() method returns the day of the month for the\n specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":89563,"byte_end":89570,"line_start":1881,"line_end":1881,"column_start":12,"column_end":19},"name":"get_day","qualname":"<Date>::get_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getDay() method returns the day of the week for the specified date according to local time,\n where 0 represents Sunday. For the day of the month see getDate().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":89887,"byte_end":89900,"line_start":1887,"line_end":1887,"column_start":12,"column_end":25},"name":"get_full_year","qualname":"<Date>::get_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getFullYear() method returns the year of the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":90210,"byte_end":90219,"line_start":1893,"line_end":1893,"column_start":12,"column_end":21},"name":"get_hours","qualname":"<Date>::get_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getHours() method returns the hour for the specified date, according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":90556,"byte_end":90572,"line_start":1899,"line_end":1899,"column_start":12,"column_end":28},"name":"get_milliseconds","qualname":"<Date>::get_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMilliseconds() method returns the milliseconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":90889,"byte_end":90900,"line_start":1905,"line_end":1905,"column_start":12,"column_end":23},"name":"get_minutes","qualname":"<Date>::get_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMinutes() method returns the minutes in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":91291,"byte_end":91300,"line_start":1912,"line_end":1912,"column_start":12,"column_end":21},"name":"get_month","qualname":"<Date>::get_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getMonth() method returns the month in the specified date according to local time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":91617,"byte_end":91628,"line_start":1918,"line_end":1918,"column_start":12,"column_end":23},"name":"get_seconds","qualname":"<Date>::get_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getSeconds() method returns the seconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":91981,"byte_end":91989,"line_start":1925,"line_end":1925,"column_start":12,"column_end":20},"name":"get_time","qualname":"<Date>::get_time","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getTime() method returns the numeric value corresponding to the time for the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":92365,"byte_end":92384,"line_start":1932,"line_end":1932,"column_start":12,"column_end":31},"name":"get_timezone_offset","qualname":"<Date>::get_timezone_offset","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The getTimezoneOffset() method returns the time zone difference, in minutes,\n from current locale (host system settings) to UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":92729,"byte_end":92741,"line_start":1939,"line_end":1939,"column_start":12,"column_end":24},"name":"get_utc_date","qualname":"<Date>::get_utc_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCDate() method returns the day (date) of the month in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":93102,"byte_end":93113,"line_start":1946,"line_end":1946,"column_start":12,"column_end":23},"name":"get_utc_day","qualname":"<Date>::get_utc_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCDay() method returns the day of the week in the specified date according to universal time,\n where 0 represents Sunday.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":93443,"byte_end":93460,"line_start":1952,"line_end":1952,"column_start":12,"column_end":29},"name":"get_utc_full_year","qualname":"<Date>::get_utc_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCFullYear() method returns the year in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":93782,"byte_end":93795,"line_start":1958,"line_end":1958,"column_start":12,"column_end":25},"name":"get_utc_hours","qualname":"<Date>::get_utc_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCHours() method returns the hours in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":94153,"byte_end":94173,"line_start":1965,"line_end":1965,"column_start":12,"column_end":32},"name":"get_utc_milliseconds","qualname":"<Date>::get_utc_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMilliseconds() method returns the milliseconds in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":94503,"byte_end":94518,"line_start":1971,"line_end":1971,"column_start":12,"column_end":27},"name":"get_utc_minutes","qualname":"<Date>::get_utc_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMinutes() method returns the minutes in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":94915,"byte_end":94928,"line_start":1978,"line_end":1978,"column_start":12,"column_end":25},"name":"get_utc_month","qualname":"<Date>::get_utc_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCMonth() returns the month of the specified date according to universal time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":95258,"byte_end":95273,"line_start":1984,"line_end":1984,"column_start":12,"column_end":27},"name":"get_utc_seconds","qualname":"<Date>::get_utc_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The getUTCSeconds() method returns the seconds in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":95663,"byte_end":95666,"line_start":1992,"line_end":1992,"column_start":12,"column_end":15},"name":"new","qualname":"<Date>::new","value":"fn (init: &JsValue) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":95955,"byte_end":95960,"line_start":1999,"line_end":1999,"column_start":12,"column_end":17},"name":"new_0","qualname":"<Date>::new_0","value":"fn () -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents the current moment in\n time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":96340,"byte_end":96359,"line_start":2007,"line_end":2007,"column_start":12,"column_end":31},"name":"new_with_year_month","qualname":"<Date>::new_with_year_month","value":"fn (year: u32, month: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":96760,"byte_end":96783,"line_start":2015,"line_end":2015,"column_start":12,"column_end":35},"name":"new_with_year_month_day","qualname":"<Date>::new_with_year_month_day","value":"fn (year: u32, month: i32, day: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":97194,"byte_end":97220,"line_start":2023,"line_end":2023,"column_start":12,"column_end":38},"name":"new_with_year_month_day_hr","qualname":"<Date>::new_with_year_month_day_hr","value":"fn (year: u32, month: i32, day: i32, hr: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":97640,"byte_end":97670,"line_start":2031,"line_end":2031,"column_start":12,"column_end":42},"name":"new_with_year_month_day_hr_min","qualname":"<Date>::new_with_year_month_day_hr_min","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":98147,"byte_end":98181,"line_start":2045,"line_end":2045,"column_start":12,"column_end":46},"name":"new_with_year_month_day_hr_min_sec","qualname":"<Date>::new_with_year_month_day_hr_min_sec","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":98676,"byte_end":98716,"line_start":2060,"line_end":2060,"column_start":12,"column_end":52},"name":"new_with_year_month_day_hr_min_sec_milli","qualname":"<Date>::new_with_year_month_day_hr_min_sec_milli","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32, milli: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript Date instance that represents\n a single moment in time. Date objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":99166,"byte_end":99169,"line_start":2075,"line_end":2075,"column_start":12,"column_end":15},"name":"now","qualname":"<Date>::now","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.now()` method returns the number of milliseconds\n elapsed since January 1, 1970 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":99635,"byte_end":99640,"line_start":2083,"line_end":2083,"column_start":12,"column_end":17},"name":"parse","qualname":"<Date>::parse","value":"fn (date: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The Date.parse() method parses a string representation of a date, and returns the number of milliseconds\n since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases,\n contains illegal date values (e.g. 2015-02-31).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":99966,"byte_end":99974,"line_start":2089,"line_end":2089,"column_start":12,"column_end":20},"name":"set_date","qualname":"<Date>::set_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setDate() method sets the day of the Date object relative to the beginning of the currently set month.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":100333,"byte_end":100346,"line_start":2096,"line_end":2096,"column_start":12,"column_end":25},"name":"set_full_year","qualname":"<Date>::set_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setFullYear() method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":100706,"byte_end":100730,"line_start":2103,"line_end":2103,"column_start":12,"column_end":36},"name":"set_full_year_with_month","qualname":"<Date>::set_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setFullYear() method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":101102,"byte_end":101131,"line_start":2110,"line_end":2110,"column_start":12,"column_end":41},"name":"set_full_year_with_month_date","qualname":"<Date>::set_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setFullYear() method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":101617,"byte_end":101626,"line_start":2118,"line_end":2118,"column_start":12,"column_end":21},"name":"set_hours","qualname":"<Date>::set_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setHours() method sets the hours for a specified date according to local time,\n and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented\n by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":101971,"byte_end":101987,"line_start":2124,"line_end":2124,"column_start":12,"column_end":28},"name":"set_milliseconds","qualname":"<Date>::set_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMilliseconds() method sets the milliseconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":102319,"byte_end":102330,"line_start":2130,"line_end":2130,"column_start":12,"column_end":23},"name":"set_minutes","qualname":"<Date>::set_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMinutes() method sets the minutes for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":102661,"byte_end":102670,"line_start":2136,"line_end":2136,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Date>::set_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setMonth() method sets the month for a specified date according to the currently set year.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":102995,"byte_end":103006,"line_start":2142,"line_end":2142,"column_start":12,"column_end":23},"name":"set_seconds","qualname":"<Date>::set_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setSeconds() method sets the seconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":103379,"byte_end":103387,"line_start":2149,"line_end":2149,"column_start":12,"column_end":20},"name":"set_time","qualname":"<Date>::set_time","value":"fn (&self, time: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setTime() method sets the Date object to the time represented by a number of milliseconds\n since January 1, 1970, 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":103732,"byte_end":103744,"line_start":2156,"line_end":2156,"column_start":12,"column_end":24},"name":"set_utc_date","qualname":"<Date>::set_utc_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCDate() method sets the day of the month for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":104085,"byte_end":104102,"line_start":2162,"line_end":2162,"column_start":12,"column_end":29},"name":"set_utc_full_year","qualname":"<Date>::set_utc_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCFullYear() method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":104444,"byte_end":104472,"line_start":2168,"line_end":2168,"column_start":12,"column_end":40},"name":"set_utc_full_year_with_month","qualname":"<Date>::set_utc_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCFullYear() method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":104826,"byte_end":104859,"line_start":2174,"line_end":2174,"column_start":12,"column_end":45},"name":"set_utc_full_year_with_month_date","qualname":"<Date>::set_utc_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCFullYear() method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":105358,"byte_end":105371,"line_start":2182,"line_end":2182,"column_start":12,"column_end":25},"name":"set_utc_hours","qualname":"<Date>::set_utc_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCHours() method sets the hour for a specified date according to universal time,\n and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time\n represented by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":105737,"byte_end":105757,"line_start":2189,"line_end":2189,"column_start":12,"column_end":32},"name":"set_utc_milliseconds","qualname":"<Date>::set_utc_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMilliseconds() method sets the milliseconds for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":106102,"byte_end":106117,"line_start":2195,"line_end":2195,"column_start":12,"column_end":27},"name":"set_utc_minutes","qualname":"<Date>::set_utc_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMinutes() method sets the minutes for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":106449,"byte_end":106462,"line_start":2201,"line_end":2201,"column_start":12,"column_end":25},"name":"set_utc_month","qualname":"<Date>::set_utc_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCMonth() method sets the month for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":106800,"byte_end":106815,"line_start":2207,"line_end":2207,"column_start":12,"column_end":27},"name":"set_utc_seconds","qualname":"<Date>::set_utc_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The setUTCSeconds() method sets the seconds for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":107179,"byte_end":107193,"line_start":2214,"line_end":2214,"column_start":12,"column_end":26},"name":"to_date_string","qualname":"<Date>::to_date_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toDateString() method returns the date portion of a Date object\n in human readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":107722,"byte_end":107735,"line_start":2223,"line_end":2223,"column_start":12,"column_end":25},"name":"to_iso_string","qualname":"<Date>::to_iso_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toISOString() method returns a string in simplified extended ISO format (ISO\n 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset,\n as denoted by the suffix \"Z\"","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":108030,"byte_end":108037,"line_start":2229,"line_end":2229,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Date>::to_json","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toJSON() method returns a string representation of the Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":108794,"byte_end":108815,"line_start":2241,"line_end":2241,"column_start":12,"column_end":33},"name":"to_locale_date_string","qualname":"<Date>::to_locale_date_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleDateString() method returns a string with a language sensitive\n representation of the date portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions\n should be used and allow to customize the behavior of the function.\n In older implementations, which ignore the locales and options arguments,\n the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":109564,"byte_end":109580,"line_start":2253,"line_end":2253,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Date>::to_locale_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleString() method returns a string with a language sensitive\n representation of this date. The new locales and options arguments\n let applications specify the language whose formatting conventions\n should be used and customize the behavior of the function.\n In older implementations, which ignore the locales\n and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":110353,"byte_end":110374,"line_start":2264,"line_end":2264,"column_start":12,"column_end":33},"name":"to_locale_time_string","qualname":"<Date>::to_locale_time_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleTimeString() method returns a string with a language sensitive\n representation of the time portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions should be\n used and customize the behavior of the function. In older implementations, which ignore\n the locales and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":110702,"byte_end":110711,"line_start":2271,"line_end":2271,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Date>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing\n the specified Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":111066,"byte_end":111080,"line_start":2278,"line_end":2278,"column_start":12,"column_end":26},"name":"to_time_string","qualname":"<Date>::to_time_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toTimeString() method returns the time portion of a Date object in human\n readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":111400,"byte_end":111413,"line_start":2285,"line_end":2285,"column_start":12,"column_end":25},"name":"to_utc_string","qualname":"<Date>::to_utc_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toUTCString() method converts a date to a string,\n using the UTC time zone.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":111870,"byte_end":111873,"line_start":2294,"line_end":2294,"column_start":12,"column_end":15},"name":"utc","qualname":"<Date>::utc","value":"fn (year: f64, month: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.UTC()` method accepts the same parameters as the\n longest form of the constructor, and returns the number of\n milliseconds in a `Date` object since January 1, 1970,\n 00:00:00, universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112179,"byte_end":112187,"line_start":2301,"line_end":2301,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Date>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method  returns the primitive value of\n a Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88733,"byte_end":88748,"line_start":1863,"line_end":1863,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2020},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112293,"byte_end":112299,"line_start":2308,"line_end":2308,"column_start":14,"column_end":20},"name":"Object","qualname":"::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":2021}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112689,"byte_end":112695,"line_start":2316,"line_end":2316,"column_start":12,"column_end":18},"name":"assign","qualname":"<Object>::assign","value":"fn (target: &Object, source: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":113147,"byte_end":113154,"line_start":2324,"line_end":2324,"column_start":12,"column_end":19},"name":"assign2","qualname":"<Object>::assign2","value":"fn (target: &Object, source1: &Object, source2: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":113625,"byte_end":113632,"line_start":2332,"line_end":2332,"column_start":12,"column_end":19},"name":"assign3","qualname":"<Object>::assign3","value":"fn (target: &Object, source1: &Object, source2: &Object, source3: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.assign() method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":114038,"byte_end":114049,"line_start":2340,"line_end":2340,"column_start":12,"column_end":23},"name":"constructor","qualname":"<Object>::constructor","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The constructor property returns a reference to the Object constructor\n function that created the instance object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":114408,"byte_end":114414,"line_start":2347,"line_end":2347,"column_start":12,"column_end":18},"name":"create","qualname":"<Object>::create","value":"fn (prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.create() method creates a new object, using an existing\n object to provide the newly created object's prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":114854,"byte_end":114869,"line_start":2355,"line_end":2355,"column_start":12,"column_end":27},"name":"define_property","qualname":"<Object>::define_property","value":"fn (obj: &Object, prop: &JsValue, descriptor: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The static method Object.defineProperty() defines a new\n property directly on an object, or modifies an existing\n property on an object, and returns the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":115311,"byte_end":115328,"line_start":2363,"line_end":2363,"column_start":12,"column_end":29},"name":"define_properties","qualname":"<Object>::define_properties","value":"fn (obj: &Object, props: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.defineProperties() method defines new or modifies\n existing properties directly on an object, returning the\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":115861,"byte_end":115868,"line_start":2373,"line_end":2373,"column_start":12,"column_end":19},"name":"entries","qualname":"<Object>::entries","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.entries() method returns an array of a given\n object's own enumerable property [key, value] pairs, in the\n same order as that provided by a for...in loop (the difference\n being that a for-in loop enumerates properties in the\n prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":116481,"byte_end":116487,"line_start":2383,"line_end":2383,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Object>::freeze","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.freeze()` method freezes an object: that is, prevents new\n properties from being added to it; prevents existing properties from\n being removed; and prevents existing properties, or their enumerability,\n configurability, or writability, from being changed, it also prevents\n the prototype from being changed. The method returns the passed object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":116842,"byte_end":116854,"line_start":2390,"line_end":2390,"column_start":12,"column_end":24},"name":"from_entries","qualname":"<Object>::from_entries","value":"fn (iterable: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The Object.fromEntries() method transforms a list of key-value pairs\n into an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":117379,"byte_end":117406,"line_start":2399,"line_end":2399,"column_start":12,"column_end":39},"name":"get_own_property_descriptor","qualname":"<Object>::get_own_property_descriptor","value":"fn (obj: &Object, prop: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyDescriptor() method returns a\n property descriptor for an own property (that is, one directly\n present on an object and not in the object's prototype chain)\n of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":117814,"byte_end":117842,"line_start":2406,"line_end":2406,"column_start":12,"column_end":40},"name":"get_own_property_descriptors","qualname":"<Object>::get_own_property_descriptors","value":"fn (obj: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyDescriptors() method returns all own\n property descriptors of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":118311,"byte_end":118333,"line_start":2414,"line_end":2414,"column_start":12,"column_end":34},"name":"get_own_property_names","qualname":"<Object>::get_own_property_names","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertyNames() method returns an array of\n all properties (including non-enumerable properties except for\n those which use Symbol) found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":118733,"byte_end":118757,"line_start":2421,"line_end":2421,"column_start":12,"column_end":36},"name":"get_own_property_symbols","qualname":"<Object>::get_own_property_symbols","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Object.getOwnPropertySymbols() method returns an array of\n all symbol properties found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":119169,"byte_end":119185,"line_start":2429,"line_end":2429,"column_start":12,"column_end":28},"name":"get_prototype_of","qualname":"<Object>::get_prototype_of","value":"fn (obj: &JsValue) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Object.getPrototypeOf() method returns the prototype\n (i.e. the value of the internal [[Prototype]] property) of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":119598,"byte_end":119614,"line_start":2437,"line_end":2437,"column_start":12,"column_end":28},"name":"has_own_property","qualname":"<Object>::has_own_property","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `hasOwnProperty()` method returns a boolean indicating whether the\n object has the specified property as its own property (as opposed to\n inheriting it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":119927,"byte_end":119929,"line_start":2443,"line_end":2443,"column_start":12,"column_end":14},"name":"is","qualname":"<Object>::is","value":"fn (value_1: &JsValue, value_2: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The Object.is() method determines whether two values are the same value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":120337,"byte_end":120350,"line_start":2450,"line_end":2450,"column_start":12,"column_end":25},"name":"is_extensible","qualname":"<Object>::is_extensible","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isExtensible()` method determines if an object is extensible\n (whether it can have new properties added to it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":120657,"byte_end":120666,"line_start":2456,"line_end":2456,"column_start":12,"column_end":21},"name":"is_frozen","qualname":"<Object>::is_frozen","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isFrozen()` determines if an object is frozen.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":120980,"byte_end":120989,"line_start":2462,"line_end":2462,"column_start":12,"column_end":21},"name":"is_sealed","qualname":"<Object>::is_sealed","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isSealed()` method determines if an object is sealed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":121329,"byte_end":121344,"line_start":2469,"line_end":2469,"column_start":12,"column_end":27},"name":"is_prototype_of","qualname":"<Object>::is_prototype_of","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isPrototypeOf()` method checks if an object exists in another\n object's prototype chain.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":121719,"byte_end":121723,"line_start":2476,"line_end":2476,"column_start":12,"column_end":16},"name":"keys","qualname":"<Object>::keys","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.keys()` method returns an array of a given object's property\n names, in the same order as we get with a normal loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":121983,"byte_end":121986,"line_start":2482,"line_end":2482,"column_start":12,"column_end":15},"name":"new","qualname":"<Object>::new","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" The [`Object`] constructor creates an object wrapper.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":122403,"byte_end":122421,"line_start":2490,"line_end":2490,"column_start":12,"column_end":30},"name":"prevent_extensions","qualname":"<Object>::prevent_extensions","value":"fn (object: &Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `Object.preventExtensions()` method prevents new properties from\n ever being added to an object (i.e. prevents future extensions to the\n object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":122785,"byte_end":122807,"line_start":2497,"line_end":2497,"column_start":12,"column_end":34},"name":"property_is_enumerable","qualname":"<Object>::property_is_enumerable","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `propertyIsEnumerable()` method returns a Boolean indicating\n whether the specified property is enumerable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":123304,"byte_end":123308,"line_start":2506,"line_end":2506,"column_start":12,"column_end":16},"name":"seal","qualname":"<Object>::seal","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.seal()` method seals an object, preventing new properties\n from being added to it and marking all existing properties as\n non-configurable.  Values of present properties can still be changed as\n long as they are writable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":123738,"byte_end":123754,"line_start":2514,"line_end":2514,"column_start":12,"column_end":28},"name":"set_prototype_of","qualname":"<Object>::set_prototype_of","value":"fn (object: &Object, prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.setPrototypeOf()` method sets the prototype (i.e., the\n internal `[[Prototype]]` property) of a specified object to another\n object or `null`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":124192,"byte_end":124208,"line_start":2522,"line_end":2522,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Object>::to_locale_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the object.\n This method is meant to be overridden by derived objects for\n locale-specific purposes.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":124505,"byte_end":124514,"line_start":2528,"line_end":2528,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Object>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":124827,"byte_end":124835,"line_start":2535,"line_end":2535,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Object>::value_of","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125335,"byte_end":125341,"line_start":2544,"line_end":2544,"column_start":12,"column_end":18},"name":"values","qualname":"<Object>::values","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.values()` method returns an array of a given object's own\n enumerable property values, in the same order as that provided by a\n `for...in` loop (the difference being that a for-in loop enumerates\n properties in the prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":112223,"byte_end":112238,"line_start":2305,"line_end":2305,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125590,"byte_end":125598,"line_start":2553,"line_end":2553,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Object>::try_from","value":"fn (val: &JsValue) -> Option<&Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Object` value of this JS value if it's an instance of an\n object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2084},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126001,"byte_end":126006,"line_start":2575,"line_end":2575,"column_start":14,"column_end":19},"name":"Proxy","qualname":"::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":2085}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126358,"byte_end":126361,"line_start":2583,"line_end":2583,"column_start":12,"column_end":15},"name":"new","qualname":"<Proxy>::new","value":"fn (target: &JsValue, handler: &Object) -> Proxy","parent":null,"children":[],"decl_id":null,"docs":" The [`Proxy`] object is used to define custom behavior for fundamental\n operations (e.g. property lookup, assignment, enumeration, function\n invocation, etc).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126695,"byte_end":126704,"line_start":2590,"line_end":2590,"column_start":12,"column_end":21},"name":"revocable","qualname":"<Proxy>::revocable","value":"fn (target: &JsValue, handler: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Proxy.revocable()` method is used to create a revocable [`Proxy`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125931,"byte_end":125946,"line_start":2572,"line_end":2572,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2157},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127154,"byte_end":127164,"line_start":2602,"line_end":2602,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::RangeError","value":"RangeError {  }","parent":null,"children":[{"krate":0,"index":2158}],"decl_id":null,"docs":" The RangeError object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126769,"byte_end":126784,"line_start":2594,"line_end":2594,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126769,"byte_end":126784,"line_start":2594,"line_end":2594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126769,"byte_end":126784,"line_start":2594,"line_end":2594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127456,"byte_end":127459,"line_start":2609,"line_end":2609,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeError>::new","value":"fn (message: &str) -> RangeError","parent":null,"children":[],"decl_id":null,"docs":" The RangeError object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126769,"byte_end":126784,"line_start":2594,"line_end":2594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":126769,"byte_end":126784,"line_start":2594,"line_end":2594,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2235},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127890,"byte_end":127904,"line_start":2621,"line_end":2621,"column_start":14,"column_end":28},"name":"ReferenceError","qualname":"::ReferenceError","value":"ReferenceError {  }","parent":null,"children":[{"krate":0,"index":2236}],"decl_id":null,"docs":" The ReferenceError object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127511,"byte_end":127526,"line_start":2613,"line_end":2613,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127511,"byte_end":127526,"line_start":2613,"line_end":2613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127511,"byte_end":127526,"line_start":2613,"line_end":2613,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128190,"byte_end":128193,"line_start":2628,"line_end":2628,"column_start":12,"column_end":15},"name":"new","qualname":"<ReferenceError>::new","value":"fn (message: &str) -> ReferenceError","parent":null,"children":[],"decl_id":null,"docs":" The ReferenceError object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127511,"byte_end":127526,"line_start":2613,"line_end":2613,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":127511,"byte_end":127526,"line_start":2613,"line_end":2613,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":75},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128264,"byte_end":128271,"line_start":2632,"line_end":2632,"column_start":9,"column_end":16},"name":"Reflect","qualname":"::Reflect","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2252},{"krate":0,"index":2254},{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128231,"byte_end":128255,"line_start":2631,"line_end":2631,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2246},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128668,"byte_end":128673,"line_start":2643,"line_end":2643,"column_start":16,"column_end":21},"name":"apply","qualname":"::Reflect::apply","value":"fn (target: &Function, this_argument: &JsValue, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.apply()` method calls a target function with\n arguments as specified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2248},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":129273,"byte_end":129282,"line_start":2655,"line_end":2655,"column_start":16,"column_end":25},"name":"construct","qualname":"::Reflect::construct","value":"fn (target: &Function, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2250},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":129831,"byte_end":129856,"line_start":2663,"line_end":2663,"column_start":16,"column_end":41},"name":"construct_with_new_target","qualname":"::Reflect::construct_with_new_target","value":"fn (target: &Function, arguments_list: &Array, new_target: &Function) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2252},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":130373,"byte_end":130388,"line_start":2674,"line_end":2674,"column_start":16,"column_end":31},"name":"define_property","qualname":"::Reflect::define_property","value":"fn (target: &Object, property_key: &JsValue, attributes: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.defineProperty()` method is like\n `Object.defineProperty()` but returns a `Boolean`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2254},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":130917,"byte_end":130932,"line_start":2685,"line_end":2685,"column_start":16,"column_end":31},"name":"delete_property","qualname":"::Reflect::delete_property","value":"fn (target: &Object, key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.deleteProperty()` method allows to delete\n properties.  It is like the `delete` operator as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2256},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":131342,"byte_end":131345,"line_start":2692,"line_end":2692,"column_start":16,"column_end":19},"name":"get","qualname":"::Reflect::get","value":"fn (target: &JsValue, key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.get()` method works like getting a property from\n an object (`target[propertyKey]`) as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2258},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":131604,"byte_end":131611,"line_start":2696,"line_end":2696,"column_start":16,"column_end":23},"name":"get_f64","qualname":"::Reflect::get_f64","value":"fn (target: &JsValue, key: f64) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::get`](#method.get) except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2260},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":131864,"byte_end":131871,"line_start":2700,"line_end":2700,"column_start":16,"column_end":23},"name":"get_u32","qualname":"::Reflect::get_u32","value":"fn (target: &JsValue, key: u32) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::get`](#method.get) except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2262},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":132443,"byte_end":132470,"line_start":2708,"line_end":2708,"column_start":16,"column_end":43},"name":"get_own_property_descriptor","qualname":"::Reflect::get_own_property_descriptor","value":"fn (target: &Object, property_key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getOwnPropertyDescriptor()` method is similar to\n `Object.getOwnPropertyDescriptor()`. It returns a property descriptor\n of the given property if it exists on the object, `undefined` otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2264},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":133079,"byte_end":133095,"line_start":2720,"line_end":2720,"column_start":16,"column_end":32},"name":"get_prototype_of","qualname":"::Reflect::get_prototype_of","value":"fn (target: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getPrototypeOf()` method is almost the same\n method as `Object.getPrototypeOf()`. It returns the prototype\n (i.e. the value of the internal `[[Prototype]]` property) of\n the specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2266},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":133451,"byte_end":133454,"line_start":2727,"line_end":2727,"column_start":16,"column_end":19},"name":"has","qualname":"::Reflect::has","value":"fn (target: &JsValue, property_key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.has()` method works like the in operator as a\n function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2268},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":134001,"byte_end":134014,"line_start":2735,"line_end":2735,"column_start":16,"column_end":29},"name":"is_extensible","qualname":"::Reflect::is_extensible","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.isExtensible()` method determines if an object is\n extensible (whether it can have new properties added to it). It is\n similar to `Object.isExtensible()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2270},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":134411,"byte_end":134419,"line_start":2742,"line_end":2742,"column_start":16,"column_end":24},"name":"own_keys","qualname":"::Reflect::own_keys","value":"fn (target: &JsValue) -> Result<Array, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.ownKeys()` method returns an array of the\n target object's own property keys.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2272},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":134995,"byte_end":135013,"line_start":2751,"line_end":2751,"column_start":16,"column_end":34},"name":"prevent_extensions","qualname":"::Reflect::prevent_extensions","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.preventExtensions()` method prevents new\n properties from ever being added to an object (i.e. prevents\n future extensions to the object). It is similar to\n `Object.preventExtensions()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2274},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":135368,"byte_end":135371,"line_start":2758,"line_end":2758,"column_start":16,"column_end":19},"name":"set","qualname":"::Reflect::set","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2276},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":135700,"byte_end":135707,"line_start":2766,"line_end":2766,"column_start":16,"column_end":23},"name":"set_f64","qualname":"::Reflect::set_f64","value":"fn (target: &JsValue, property_key: f64, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::set`](#method.set) except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2278},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":136030,"byte_end":136037,"line_start":2774,"line_end":2774,"column_start":16,"column_end":23},"name":"set_u32","qualname":"::Reflect::set_u32","value":"fn (target: &JsValue, property_key: u32, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Reflect::set`](#method.set) except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2280},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":136491,"byte_end":136508,"line_start":2785,"line_end":2785,"column_start":16,"column_end":33},"name":"set_with_receiver","qualname":"::Reflect::set_with_receiver","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue, receiver: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2282},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137181,"byte_end":137197,"line_start":2799,"line_end":2799,"column_start":16,"column_end":32},"name":"set_prototype_of","qualname":"::Reflect::set_prototype_of","value":"fn (target: &Object, prototype: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.setPrototypeOf()` method is the same\n method as `Object.setPrototypeOf()`. It sets the prototype\n (i.e., the internal `[[Prototype]]` property) of a specified\n object to another object or to null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":128312,"byte_end":128327,"line_start":2636,"line_end":2636,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2426},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137404,"byte_end":137410,"line_start":2808,"line_end":2808,"column_start":14,"column_end":20},"name":"RegExp","qualname":"::RegExp","value":"RegExp {  }","parent":null,"children":[{"krate":0,"index":2427}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137702,"byte_end":137706,"line_start":2815,"line_end":2815,"column_start":12,"column_end":16},"name":"exec","qualname":"<RegExp>::exec","value":"fn (&self, text: &str) -> Option<Array>","parent":null,"children":[],"decl_id":null,"docs":" The exec() method executes a search for a match in a specified\n string. Returns a result array, or null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":138049,"byte_end":138054,"line_start":2822,"line_end":2822,"column_start":12,"column_end":17},"name":"flags","qualname":"<RegExp>::flags","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The flags property returns a string consisting of the flags of\n the current regular expression object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":138459,"byte_end":138465,"line_start":2830,"line_end":2830,"column_start":12,"column_end":18},"name":"global","qualname":"<RegExp>::global","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global property indicates whether or not the \"g\" flag is\n used with the regular expression. global is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":138900,"byte_end":138911,"line_start":2838,"line_end":2838,"column_start":12,"column_end":23},"name":"ignore_case","qualname":"<RegExp>::ignore_case","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The ignoreCase property indicates whether or not the \"i\" flag\n is used with the regular expression. ignoreCase is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":139355,"byte_end":139360,"line_start":2847,"line_end":2847,"column_start":12,"column_end":17},"name":"input","qualname":"<RegExp>::input","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard input property is a static property of\n regular expressions that contains the string against which a\n regular expression is matched. RegExp.$_ is an alias for this\n property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":139737,"byte_end":139747,"line_start":2854,"line_end":2854,"column_start":12,"column_end":22},"name":"last_index","qualname":"<RegExp>::last_index","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":140132,"byte_end":140146,"line_start":2861,"line_end":2861,"column_start":12,"column_end":26},"name":"set_last_index","qualname":"<RegExp>::set_last_index","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":140600,"byte_end":140610,"line_start":2869,"line_end":2869,"column_start":12,"column_end":22},"name":"last_match","qualname":"<RegExp>::last_match","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastMatch property is a static and read-only\n property of regular expressions that contains the last matched\n characters. RegExp.$& is an alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2367},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":141078,"byte_end":141088,"line_start":2878,"line_end":2878,"column_start":12,"column_end":22},"name":"last_paren","qualname":"<RegExp>::last_paren","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastParen property is a static and read-only\n property of regular expressions that contains the last\n parenthesized substring match, if any. RegExp.$+ is an alias\n for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":141561,"byte_end":141573,"line_start":2887,"line_end":2887,"column_start":12,"column_end":24},"name":"left_context","qualname":"<RegExp>::left_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard leftContext property is a static and\n read-only property of regular expressions that contains the\n substring preceding the most recent match. RegExp.$` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2373},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":141974,"byte_end":141983,"line_start":2895,"line_end":2895,"column_start":12,"column_end":21},"name":"multiline","qualname":"<RegExp>::multiline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The multiline property indicates whether or not the \"m\" flag\n is used with the regular expression. multiline is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142410,"byte_end":142412,"line_start":2903,"line_end":2903,"column_start":12,"column_end":14},"name":"n1","qualname":"<RegExp>::n1","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties\n are static and read-only properties of regular expressions\n that contain parenthesized substring matches.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2379},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142510,"byte_end":142512,"line_start":2905,"line_end":2905,"column_start":12,"column_end":14},"name":"n2","qualname":"<RegExp>::n2","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142610,"byte_end":142612,"line_start":2907,"line_end":2907,"column_start":12,"column_end":14},"name":"n3","qualname":"<RegExp>::n3","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142710,"byte_end":142712,"line_start":2909,"line_end":2909,"column_start":12,"column_end":14},"name":"n4","qualname":"<RegExp>::n4","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142810,"byte_end":142812,"line_start":2911,"line_end":2911,"column_start":12,"column_end":14},"name":"n5","qualname":"<RegExp>::n5","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":142910,"byte_end":142912,"line_start":2913,"line_end":2913,"column_start":12,"column_end":14},"name":"n6","qualname":"<RegExp>::n6","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":143010,"byte_end":143012,"line_start":2915,"line_end":2915,"column_start":12,"column_end":14},"name":"n7","qualname":"<RegExp>::n7","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":143110,"byte_end":143112,"line_start":2917,"line_end":2917,"column_start":12,"column_end":14},"name":"n8","qualname":"<RegExp>::n8","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":143210,"byte_end":143212,"line_start":2919,"line_end":2919,"column_start":12,"column_end":14},"name":"n9","qualname":"<RegExp>::n9","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":143499,"byte_end":143502,"line_start":2925,"line_end":2925,"column_start":12,"column_end":15},"name":"new","qualname":"<RegExp>::new","value":"fn (pattern: &str, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":" The RegExp constructor creates a regular expression object for matching text with a pattern.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2406},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":143586,"byte_end":143596,"line_start":2927,"line_end":2927,"column_start":12,"column_end":22},"name":"new_regexp","qualname":"<RegExp>::new_regexp","value":"fn (pattern: &RegExp, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2409},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":144099,"byte_end":144112,"line_start":2936,"line_end":2936,"column_start":12,"column_end":25},"name":"right_context","qualname":"<RegExp>::right_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard rightContext property is a static and\n read-only property of regular expressions that contains the\n substring following the most recent match. RegExp.$' is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":144494,"byte_end":144500,"line_start":2944,"line_end":2944,"column_start":12,"column_end":18},"name":"source","qualname":"<RegExp>::source","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The source property returns a String containing the source\n text of the regexp object, and it doesn't contain the two\n forward slashes on both sides and any flags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":144995,"byte_end":145001,"line_start":2954,"line_end":2954,"column_start":12,"column_end":18},"name":"sticky","qualname":"<RegExp>::sticky","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The sticky property reflects whether or not the search is\n sticky (searches in strings only from the index indicated by\n the lastIndex property of this regular expression). sticky is\n a read-only property of an individual regular expression\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":145344,"byte_end":145348,"line_start":2962,"line_end":2962,"column_start":12,"column_end":16},"name":"test","qualname":"<RegExp>::test","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The test() method executes a search for a match between a\n regular expression and a specified string. Returns true or\n false.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2421},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":145671,"byte_end":145680,"line_start":2969,"line_end":2969,"column_start":12,"column_end":21},"name":"to_string","qualname":"<RegExp>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the\n regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146086,"byte_end":146093,"line_start":2977,"line_end":2977,"column_start":12,"column_end":19},"name":"unicode","qualname":"<RegExp>::unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The unicode property indicates whether or not the \"u\" flag is\n used with a regular expression. unicode is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":137281,"byte_end":137296,"line_start":2804,"line_end":2804,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2516},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146251,"byte_end":146254,"line_start":2985,"line_end":2985,"column_start":14,"column_end":17},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":2517}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146534,"byte_end":146537,"line_start":2992,"line_end":2992,"column_start":12,"column_end":15},"name":"add","qualname":"<Set>::add","value":"fn (&self, value: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new element with a specified value to the\n end of a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146816,"byte_end":146821,"line_start":2998,"line_end":2998,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":147095,"byte_end":147101,"line_start":3005,"line_end":3005,"column_start":12,"column_end":18},"name":"delete","qualname":"<Set>::delete","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":147454,"byte_end":147462,"line_start":3012,"line_end":3012,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Set>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue, Set)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The forEach() method executes a provided function once for each value\n in the Set object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":147834,"byte_end":147837,"line_start":3019,"line_end":3019,"column_start":12,"column_end":15},"name":"has","qualname":"<Set>::has","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified value exists in a [`Set`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148167,"byte_end":148170,"line_start":3026,"line_end":3026,"column_start":12,"column_end":15},"name":"new","qualname":"<Set>::new","value":"fn (init: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The [`Set`] object lets you store unique values of any type, whether\n primitive values or object references.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148474,"byte_end":148478,"line_start":3033,"line_end":3033,"column_start":12,"column_end":16},"name":"size","qualname":"<Set>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size accessor property returns the number of elements in a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":146128,"byte_end":146143,"line_start":2981,"line_end":2981,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149113,"byte_end":149120,"line_start":3047,"line_end":3047,"column_start":12,"column_end":19},"name":"entries","qualname":"<Set>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains an\n array of [value, value] for each element in the Set object, in insertion\n order. For Set objects there is no key like in Map objects. However, to\n keep the API similar to the Map object, each entry has the same value\n for its key and value here, so that an array [value, value] is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149485,"byte_end":149489,"line_start":3055,"line_end":3055,"column_start":12,"column_end":16},"name":"keys","qualname":"<Set>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method is an alias for this method (for similarity with\n Map objects); it behaves exactly the same and returns values\n of Set elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149831,"byte_end":149837,"line_start":3062,"line_end":3062,"column_start":12,"column_end":18},"name":"values","qualname":"<Set>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Set object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":148517,"byte_end":148532,"line_start":3037,"line_end":3037,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2603},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150329,"byte_end":150340,"line_start":3075,"line_end":3075,"column_start":14,"column_end":25},"name":"SyntaxError","qualname":"::SyntaxError","value":"SyntaxError {  }","parent":null,"children":[{"krate":0,"index":2604}],"decl_id":null,"docs":" A SyntaxError is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149880,"byte_end":149895,"line_start":3066,"line_end":3066,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149880,"byte_end":149895,"line_start":3066,"line_end":3066,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149880,"byte_end":149895,"line_start":3066,"line_end":3066,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150696,"byte_end":150699,"line_start":3083,"line_end":3083,"column_start":12,"column_end":15},"name":"new","qualname":"<SyntaxError>::new","value":"fn (message: &str) -> SyntaxError","parent":null,"children":[],"decl_id":null,"docs":" A SyntaxError is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149880,"byte_end":149895,"line_start":3066,"line_end":3066,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":149880,"byte_end":149895,"line_start":3066,"line_end":3066,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2681},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151114,"byte_end":151123,"line_start":3095,"line_end":3095,"column_start":14,"column_end":23},"name":"TypeError","qualname":"::TypeError","value":"TypeError {  }","parent":null,"children":[{"krate":0,"index":2682}],"decl_id":null,"docs":" The TypeError object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150747,"byte_end":150762,"line_start":3087,"line_end":3087,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150747,"byte_end":150762,"line_start":3087,"line_end":3087,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150747,"byte_end":150762,"line_start":3087,"line_end":3087,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151397,"byte_end":151400,"line_start":3102,"line_end":3102,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeError>::new","value":"fn (message: &str) -> TypeError","parent":null,"children":[],"decl_id":null,"docs":" The TypeError object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150747,"byte_end":150762,"line_start":3087,"line_end":3087,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":150747,"byte_end":150762,"line_start":3087,"line_end":3087,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2759},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151849,"byte_end":151857,"line_start":3114,"line_end":3114,"column_start":14,"column_end":22},"name":"UriError","qualname":"::UriError","value":"UriError {  }","parent":null,"children":[{"krate":0,"index":2760}],"decl_id":null,"docs":" The URIError object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151445,"byte_end":151460,"line_start":3106,"line_end":3106,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151445,"byte_end":151460,"line_start":3106,"line_end":3106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151445,"byte_end":151460,"line_start":3106,"line_end":3106,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152171,"byte_end":152174,"line_start":3121,"line_end":3121,"column_start":12,"column_end":15},"name":"new","qualname":"<UriError>::new","value":"fn (message: &str) -> UriError","parent":null,"children":[],"decl_id":null,"docs":" The URIError object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151445,"byte_end":151460,"line_start":3106,"line_end":3106,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":151445,"byte_end":151460,"line_start":3106,"line_end":3106,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2843},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152340,"byte_end":152347,"line_start":3129,"line_end":3129,"column_start":14,"column_end":21},"name":"WeakMap","qualname":"::WeakMap","value":"WeakMap {  }","parent":null,"children":[{"krate":0,"index":2844}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152709,"byte_end":152712,"line_start":3137,"line_end":3137,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakMap>::new","value":"fn () -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The [`WeakMap`] object is a collection of key/value pairs in which the\n keys are weakly referenced.  The keys must be objects and the values can\n be arbitrary values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":153040,"byte_end":153043,"line_start":3144,"line_end":3144,"column_start":12,"column_end":15},"name":"set","qualname":"<WeakMap>::set","value":"fn (&self, key: &Object, value: &JsValue) -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method sets the value for the key in the [`WeakMap`] object.\n Returns the [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":153368,"byte_end":153371,"line_start":3151,"line_end":3151,"column_start":12,"column_end":15},"name":"get","qualname":"<WeakMap>::get","value":"fn (&self, key: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The get() method returns a specified by key element\n from a [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":153731,"byte_end":153734,"line_start":3158,"line_end":3158,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakMap>::has","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists in the [`WeakMap`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154042,"byte_end":154048,"line_start":3165,"line_end":3165,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakMap>::delete","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`WeakMap`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":152217,"byte_end":152232,"line_start":3125,"line_end":3125,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2924},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154225,"byte_end":154232,"line_start":3173,"line_end":3173,"column_start":14,"column_end":21},"name":"WeakSet","qualname":"::WeakSet","value":"WeakSet {  }","parent":null,"children":[{"krate":0,"index":2925}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154486,"byte_end":154489,"line_start":3179,"line_end":3179,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakSet>::new","value":"fn () -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `WeakSet` object lets you store weakly held objects in a collection.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154784,"byte_end":154787,"line_start":3186,"line_end":3186,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakSet>::has","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an object exists\n in a WeakSet or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2919},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155079,"byte_end":155082,"line_start":3192,"line_end":3192,"column_start":12,"column_end":15},"name":"add","qualname":"<WeakSet>::add","value":"fn (&self, value: &Object) -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new object to the end of a WeakSet object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155391,"byte_end":155397,"line_start":3199,"line_end":3199,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakSet>::delete","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a WeakSet\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":154102,"byte_end":154117,"line_start":3169,"line_end":3169,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155475,"byte_end":155486,"line_start":3203,"line_end":3203,"column_start":9,"column_end":20},"name":"WebAssembly","qualname":"::WebAssembly","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":2935},{"krate":0,"index":2937},{"krate":0,"index":2939},{"krate":0,"index":2941},{"krate":0,"index":2943},{"krate":0,"index":3006},{"krate":0,"index":3015},{"krate":0,"index":3013},{"krate":0,"index":3010},{"krate":0,"index":3008},{"krate":0,"index":2945},{"krate":0,"index":2997},{"krate":0,"index":3000},{"krate":0,"index":3003},{"krate":0,"index":3081},{"krate":0,"index":3090},{"krate":0,"index":3088},{"krate":0,"index":3085},{"krate":0,"index":3083},{"krate":0,"index":3017},{"krate":0,"index":3069},{"krate":0,"index":3072},{"krate":0,"index":3075},{"krate":0,"index":3078},{"krate":0,"index":3153},{"krate":0,"index":3162},{"krate":0,"index":3160},{"krate":0,"index":3157},{"krate":0,"index":3155},{"krate":0,"index":3092},{"krate":0,"index":3144},{"krate":0,"index":3147},{"krate":0,"index":3150},{"krate":0,"index":3225},{"krate":0,"index":3234},{"krate":0,"index":3232},{"krate":0,"index":3229},{"krate":0,"index":3227},{"krate":0,"index":3164},{"krate":0,"index":3216},{"krate":0,"index":3219},{"krate":0,"index":3222},{"krate":0,"index":3306},{"krate":0,"index":3315},{"krate":0,"index":3313},{"krate":0,"index":3310},{"krate":0,"index":3308},{"krate":0,"index":3236},{"krate":0,"index":3288},{"krate":0,"index":3291},{"krate":0,"index":3294},{"krate":0,"index":3297},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":3390},{"krate":0,"index":3399},{"krate":0,"index":3397},{"krate":0,"index":3394},{"krate":0,"index":3392},{"krate":0,"index":3317},{"krate":0,"index":3369},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3381},{"krate":0,"index":3384},{"krate":0,"index":3387},{"krate":0,"index":3468},{"krate":0,"index":3477},{"krate":0,"index":3475},{"krate":0,"index":3472},{"krate":0,"index":3470},{"krate":0,"index":3401},{"krate":0,"index":3453},{"krate":0,"index":3456},{"krate":0,"index":3459},{"krate":0,"index":3462},{"krate":0,"index":3465}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155442,"byte_end":155466,"line_start":3202,"line_end":3202,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2935},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":156090,"byte_end":156097,"line_start":3216,"line_end":3216,"column_start":16,"column_end":23},"name":"compile","qualname":"::WebAssembly::compile","value":"fn (buffer_source: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" `The WebAssembly.compile()` function compiles a `WebAssembly.Module`\n from WebAssembly binary code.  This function is useful if it is\n necessary to a compile a module before it can be instantiated\n (otherwise, the `WebAssembly.instantiate()` function should be used).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2937},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":156497,"byte_end":156515,"line_start":3223,"line_end":3223,"column_start":16,"column_end":34},"name":"instantiate_buffer","qualname":"::WebAssembly::instantiate_buffer","value":"fn (buffer: &[u8], imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2939},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":156923,"byte_end":156941,"line_start":3230,"line_end":3230,"column_start":16,"column_end":34},"name":"instantiate_module","qualname":"::WebAssembly::instantiate_module","value":"fn (module: &Module, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2941},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":157498,"byte_end":157519,"line_start":3239,"line_end":3239,"column_start":16,"column_end":37},"name":"instantiate_streaming","qualname":"::WebAssembly::instantiate_streaming","value":"fn (response: &Promise, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiateStreaming()` function compiles and\n instantiates a WebAssembly module directly from a streamed\n underlying source. This is the most efficient, optimized way to load\n wasm code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2943},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158004,"byte_end":158012,"line_start":3247,"line_end":3247,"column_start":16,"column_end":24},"name":"validate","qualname":"::WebAssembly::validate","value":"fn (buffer_source: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.validate()` function validates a given typed\n array of WebAssembly binary code, returning whether the bytes\n form a valid wasm module (`true`) or not (`false`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":155531,"byte_end":155546,"line_start":3207,"line_end":3207,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3006},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158622,"byte_end":158634,"line_start":3260,"line_end":3260,"column_start":18,"column_end":30},"name":"CompileError","qualname":"::WebAssembly::CompileError","value":"CompileError {  }","parent":null,"children":[{"krate":0,"index":3007}],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158107,"byte_end":158122,"line_start":3251,"line_end":3251,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158107,"byte_end":158122,"line_start":3251,"line_end":3251,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158107,"byte_end":158122,"line_start":3251,"line_end":3251,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159066,"byte_end":159069,"line_start":3268,"line_end":3268,"column_start":16,"column_end":19},"name":"new","qualname":"<CompileError>::new","value":"fn (message: &str) -> CompileError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158107,"byte_end":158122,"line_start":3251,"line_end":3251,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":158107,"byte_end":158122,"line_start":3251,"line_end":3251,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3081},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159719,"byte_end":159727,"line_start":3282,"line_end":3282,"column_start":18,"column_end":26},"name":"Instance","qualname":"::WebAssembly::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":3082}],"decl_id":null,"docs":" A `WebAssembly.Instance` object is a stateful, executable instance\n of a `WebAssembly.Module`. Instance objects contain all the exported\n WebAssembly functions that allow calling into WebAssembly code from\n JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160263,"byte_end":160266,"line_start":3291,"line_end":3291,"column_start":16,"column_end":19},"name":"new","qualname":"<Instance>::new","value":"fn (module: &Module, imports: &Object) -> Result<Instance, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Instance()` constructor function can be called to\n synchronously instantiate a given `WebAssembly.Module`\n object. However, the primary way to get an `Instance` is through the\n asynchronous `WebAssembly.instantiateStreaming()` function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160860,"byte_end":160867,"line_start":3300,"line_end":3300,"column_start":16,"column_end":23},"name":"exports","qualname":"<Instance>::exports","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `exports` readonly property of the `WebAssembly.Instance` object\n prototype returns an object containing as its members all the\n functions exported from the WebAssembly module instance, to allow\n them to be accessed and used by JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":159141,"byte_end":159156,"line_start":3272,"line_end":3272,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3153},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161466,"byte_end":161475,"line_start":3313,"line_end":3313,"column_start":18,"column_end":27},"name":"LinkError","qualname":"::WebAssembly::LinkError","value":"LinkError {  }","parent":null,"children":[{"krate":0,"index":3154}],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160936,"byte_end":160951,"line_start":3304,"line_end":3304,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160936,"byte_end":160951,"line_start":3304,"line_end":3304,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160936,"byte_end":160951,"line_start":3304,"line_end":3304,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3151},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161922,"byte_end":161925,"line_start":3321,"line_end":3321,"column_start":16,"column_end":19},"name":"new","qualname":"<LinkError>::new","value":"fn (message: &str) -> LinkError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160936,"byte_end":160951,"line_start":3304,"line_end":3304,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":160936,"byte_end":160951,"line_start":3304,"line_end":3304,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":162511,"byte_end":162523,"line_start":3334,"line_end":3334,"column_start":18,"column_end":30},"name":"RuntimeError","qualname":"::WebAssembly::RuntimeError","value":"RuntimeError {  }","parent":null,"children":[{"krate":0,"index":3226}],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161998,"byte_end":162013,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161998,"byte_end":162013,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161998,"byte_end":162013,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3223},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":162953,"byte_end":162956,"line_start":3342,"line_end":3342,"column_start":16,"column_end":19},"name":"new","qualname":"<RuntimeError>::new","value":"fn (message: &str) -> RuntimeError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161998,"byte_end":162013,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":161998,"byte_end":162013,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3306},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163563,"byte_end":163569,"line_start":3355,"line_end":3355,"column_start":18,"column_end":24},"name":"Module","qualname":"::WebAssembly::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":3307}],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3295},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":164029,"byte_end":164032,"line_start":3363,"line_end":3363,"column_start":16,"column_end":19},"name":"new","qualname":"<Module>::new","value":"fn (buffer_source: &JsValue) -> Result<Module, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3298},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":164549,"byte_end":164564,"line_start":3371,"line_end":3371,"column_start":16,"column_end":31},"name":"custom_sections","qualname":"<Module>::custom_sections","value":"fn (module: &Module, sectionName: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.customSections()` function returns a copy of the\n contents of all custom sections in the given module with the given\n string name.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165012,"byte_end":165019,"line_start":3378,"line_end":3378,"column_start":16,"column_end":23},"name":"exports","qualname":"<Module>::exports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.exports()` function returns an array containing\n descriptions of all the declared exports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3304},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165448,"byte_end":165455,"line_start":3385,"line_end":3385,"column_start":16,"column_end":23},"name":"imports","qualname":"<Module>::imports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.imports()` function returns an array containing\n descriptions of all the declared imports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":163026,"byte_end":163041,"line_start":3346,"line_end":3346,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3390},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165957,"byte_end":165962,"line_start":3397,"line_end":3397,"column_start":18,"column_end":23},"name":"Table","qualname":"::WebAssembly::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":3391}],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":166323,"byte_end":166326,"line_start":3404,"line_end":3404,"column_start":16,"column_end":19},"name":"new","qualname":"<Table>::new","value":"fn (table_descriptor: &Object) -> Result<Table, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3379},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":166793,"byte_end":166799,"line_start":3412,"line_end":3412,"column_start":16,"column_end":22},"name":"length","qualname":"<Table>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` prototype property of the `WebAssembly.Table` object\n returns the length of the table, i.e. the number of elements in the\n table.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3382},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":167198,"byte_end":167201,"line_start":3419,"line_end":3419,"column_start":16,"column_end":19},"name":"get","qualname":"<Table>::get","value":"fn (&self, index: u32) -> Result<Function, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `get()` prototype method of the `WebAssembly.Table()` object\n retrieves a function reference stored at a given index.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3385},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":167668,"byte_end":167672,"line_start":3427,"line_end":3427,"column_start":16,"column_end":20},"name":"grow","qualname":"<Table>::grow","value":"fn (&self, additional_capacity: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` prototype method of the `WebAssembly.Table` object\n increases the size of the `Table` instance by a specified number of\n elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3388},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168122,"byte_end":168125,"line_start":3434,"line_end":3434,"column_start":16,"column_end":19},"name":"set","qualname":"<Table>::set","value":"fn (&self, index: u32, function: &Function) -> Result<(), JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `set()` prototype method of the `WebAssembly.Table` object mutates a\n reference stored at a given index to a different value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":165519,"byte_end":165534,"line_start":3389,"line_end":3389,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3468},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168534,"byte_end":168540,"line_start":3443,"line_end":3443,"column_start":18,"column_end":24},"name":"Memory","qualname":"::WebAssembly::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":3469}],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3460},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":169147,"byte_end":169150,"line_start":3454,"line_end":3454,"column_start":16,"column_end":19},"name":"new","qualname":"<Memory>::new","value":"fn (descriptor: &Object) -> Result<Memory, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Memory()` constructor creates a new `Memory` object\n which is a resizable `ArrayBuffer` that holds the raw bytes of\n memory accessed by a WebAssembly `Instance`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":169530,"byte_end":169536,"line_start":3461,"line_end":3461,"column_start":16,"column_end":22},"name":"buffer","qualname":"<Memory>::buffer","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" An accessor property that returns the buffer contained in the\n memory.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170101,"byte_end":170105,"line_start":3472,"line_end":3472,"column_start":16,"column_end":20},"name":"grow","qualname":"<Memory>::grow","value":"fn (&self, pages: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` protoype method of the `Memory` object increases the\n size of the memory instance by a specified number of WebAssembly\n pages.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":168234,"byte_end":168249,"line_start":3438,"line_end":3438,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":79},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170457,"byte_end":170461,"line_start":3481,"line_end":3481,"column_start":9,"column_end":13},"name":"JSON","qualname":"::JSON","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":3479},{"krate":0,"index":3481},{"krate":0,"index":3483},{"krate":0,"index":3485}],"decl_id":null,"docs":" The `JSON` object contains methods for parsing [JavaScript Object\n Notation (JSON)](https://json.org/) and converting values to JSON. It\n can't be called or constructed, and aside from its two method\n properties, it has no interesting functionality of its own.\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170424,"byte_end":170448,"line_start":3480,"line_end":3480,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3479},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170877,"byte_end":170882,"line_start":3492,"line_end":3492,"column_start":16,"column_end":21},"name":"parse","qualname":"::JSON::parse","value":"fn (text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.parse()` method parses a JSON string, constructing the\n JavaScript value or object described by the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3481},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":171221,"byte_end":171230,"line_start":3498,"line_end":3498,"column_start":16,"column_end":25},"name":"stringify","qualname":"::JSON::stringify","value":"fn (obj: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3483},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":172033,"byte_end":172056,"line_start":3510,"line_end":3510,"column_start":16,"column_end":39},"name":"stringify_with_replacer","qualname":"::JSON::stringify_with_replacer","value":"fn (obj: &JsValue, replacer: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3485},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173573,"byte_end":173606,"line_start":3534,"line_end":3534,"column_start":16,"column_end":49},"name":"stringify_with_replacer_and_space","qualname":"::JSON::stringify_with_replacer_and_space","value":"fn (obj: &JsValue, replacer: &JsValue, space: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":170499,"byte_end":170514,"line_start":3485,"line_end":3485,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3726},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173925,"byte_end":173933,"line_start":3548,"line_end":3548,"column_start":14,"column_end":22},"name":"JsString","qualname":"::JsString","value":"JsString {  }","parent":null,"children":[{"krate":0,"index":3727}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3547},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":174238,"byte_end":174244,"line_start":3555,"line_end":3555,"column_start":12,"column_end":18},"name":"length","qualname":"<JsString>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of a String object indicates the length of a string,\n in UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3550},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":174655,"byte_end":174662,"line_start":3563,"line_end":3563,"column_start":12,"column_end":19},"name":"char_at","qualname":"<JsString>::char_at","value":"fn (&self, index: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The String object's `charAt()` method returns a new string consisting of\n the single UTF-16 code unit located at the specified offset into the\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3553},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":175489,"byte_end":175501,"line_start":3577,"line_end":3577,"column_start":12,"column_end":24},"name":"char_code_at","qualname":"<JsString>::char_code_at","value":"fn (&self, index: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `charCodeAt()` method returns an integer between 0 and 65535\n representing the UTF-16 code unit at the given index (the UTF-16 code\n unit matches the Unicode code point for code points representable in a\n single UTF-16 code unit, but might also be the first code unit of a\n surrogate pair for code points not representable in a single UTF-16 code\n unit, e.g. Unicode code points > 0x10000).  If you want the entire code\n point value, use `codePointAt()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3556},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":175872,"byte_end":175885,"line_start":3584,"line_end":3584,"column_start":12,"column_end":25},"name":"code_point_at","qualname":"<JsString>::code_point_at","value":"fn (&self, pos: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `codePointAt()` method returns a non-negative integer that is the\n Unicode code point value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3559},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":176238,"byte_end":176244,"line_start":3591,"line_end":3591,"column_start":12,"column_end":18},"name":"concat","qualname":"<JsString>::concat","value":"fn (&self, string_2: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method concatenates the string arguments to the calling\n string and returns a new string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3562},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":176664,"byte_end":176673,"line_start":3598,"line_end":3598,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<JsString>::ends_with","value":"fn (&self, search_string: &str, length: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The endsWith() method determines whether a string ends with the characters of a\n specified string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3565},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":177514,"byte_end":177528,"line_start":3614,"line_end":3614,"column_start":12,"column_end":26},"name":"from_char_code","qualname":"<JsString>::from_char_code","value":"fn (char_codes: &[u16]) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The static String.fromCharCode() method returns a string created from\n the specified sequence of UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3568},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":177798,"byte_end":177813,"line_start":3618,"line_end":3618,"column_start":12,"column_end":27},"name":"from_char_code1","qualname":"<JsString>::from_char_code1","value":"fn (a: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3571},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":178071,"byte_end":178086,"line_start":3622,"line_end":3622,"column_start":12,"column_end":27},"name":"from_char_code2","qualname":"<JsString>::from_char_code2","value":"fn (a: u32, b: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3574},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":178352,"byte_end":178367,"line_start":3626,"line_end":3626,"column_start":12,"column_end":27},"name":"from_char_code3","qualname":"<JsString>::from_char_code3","value":"fn (a: u32, b: u32, c: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3577},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":178641,"byte_end":178656,"line_start":3630,"line_end":3630,"column_start":12,"column_end":27},"name":"from_char_code4","qualname":"<JsString>::from_char_code4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3580},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":178938,"byte_end":178953,"line_start":3634,"line_end":3634,"column_start":12,"column_end":27},"name":"from_char_code5","qualname":"<JsString>::from_char_code5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3583},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":179688,"byte_end":179703,"line_start":3650,"line_end":3650,"column_start":12,"column_end":27},"name":"from_code_point","qualname":"<JsString>::from_code_point","value":"fn (code_points: &[u32]) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static String.fromCodePoint() method returns a string created by\n using the specified sequence of code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3586},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":180000,"byte_end":180016,"line_start":3654,"line_end":3654,"column_start":12,"column_end":28},"name":"from_code_point1","qualname":"<JsString>::from_code_point1","value":"fn (a: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3589},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":180300,"byte_end":180316,"line_start":3658,"line_end":3658,"column_start":12,"column_end":28},"name":"from_code_point2","qualname":"<JsString>::from_code_point2","value":"fn (a: u32, b: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3592},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":180608,"byte_end":180624,"line_start":3662,"line_end":3662,"column_start":12,"column_end":28},"name":"from_code_point3","qualname":"<JsString>::from_code_point3","value":"fn (a: u32, b: u32, c: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3595},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":180924,"byte_end":180940,"line_start":3666,"line_end":3666,"column_start":12,"column_end":28},"name":"from_code_point4","qualname":"<JsString>::from_code_point4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3598},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":181248,"byte_end":181264,"line_start":3670,"line_end":3670,"column_start":12,"column_end":28},"name":"from_code_point5","qualname":"<JsString>::from_code_point5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3601},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":181676,"byte_end":181684,"line_start":3677,"line_end":3677,"column_start":12,"column_end":20},"name":"includes","qualname":"<JsString>::includes","value":"fn (&self, search_string: &str, position: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether one string may be found\n within another string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3604},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":182179,"byte_end":182187,"line_start":3685,"line_end":3685,"column_start":12,"column_end":20},"name":"index_of","qualname":"<JsString>::index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the index within the calling String\n object of the first occurrence of the specified value, starting the\n search at fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3607},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":182695,"byte_end":182708,"line_start":3693,"line_end":3693,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<JsString>::last_index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the index within the calling String\n object of the last occurrence of the specified value, searching\n backwards from fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3610},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":183174,"byte_end":183188,"line_start":3701,"line_end":3701,"column_start":12,"column_end":26},"name":"locale_compare","qualname":"<JsString>::locale_compare","value":"fn (&self, compare_string: &str, locales: &Array, options: &Object) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The localeCompare() method returns a number indicating whether\n a reference string comes before or after or is the same as\n the given string in sort order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3613},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":183621,"byte_end":183627,"line_start":3712,"line_end":3712,"column_start":12,"column_end":18},"name":"match_","qualname":"<JsString>::match_","value":"fn (&self, pattern: &RegExp) -> Option<Object>","parent":null,"children":[],"decl_id":null,"docs":" The match() method retrieves the matches when matching a string against a regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":184040,"byte_end":184049,"line_start":3719,"line_end":3719,"column_start":12,"column_end":21},"name":"normalize","qualname":"<JsString>::normalize","value":"fn (&self, form: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The normalize() method returns the Unicode Normalization Form\n of a given string (if the value isn't a string, it will be converted to one first).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3619},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":184543,"byte_end":184550,"line_start":3728,"line_end":3728,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<JsString>::pad_end","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padEnd()` method pads the current string with a given string\n (repeated, if needed) so that the resulting string reaches a given\n length. The padding is applied from the end (right) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":185079,"byte_end":185088,"line_start":3737,"line_end":3737,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<JsString>::pad_start","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padStart()` method pads the current string with another string\n (repeated, if needed) so that the resulting string reaches the given\n length. The padding is applied from the start (left) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":185529,"byte_end":185535,"line_start":3744,"line_end":3744,"column_start":12,"column_end":18},"name":"repeat","qualname":"<JsString>::repeat","value":"fn (&self, count: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The repeat() method constructs and returns a new string which contains the specified\n number of copies of the string on which it was called, concatenated together.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":186088,"byte_end":186095,"line_start":3754,"line_end":3754,"column_start":12,"column_end":19},"name":"replace","qualname":"<JsString>::replace","value":"fn (&self, pattern: &str, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The replace() method returns a new string with some or all matches of a pattern\n replaced by a replacement. The pattern can be a string or a RegExp, and\n the replacement can be a string or a function to be called for each match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":186365,"byte_end":186386,"line_start":3758,"line_end":3758,"column_start":12,"column_end":33},"name":"replace_with_function","qualname":"<JsString>::replace_with_function","value":"fn (&self, pattern: &str, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":186567,"byte_end":186585,"line_start":3765,"line_end":3765,"column_start":12,"column_end":30},"name":"replace_by_pattern","qualname":"<JsString>::replace_by_pattern","value":"fn (&self, pattern: &RegExp, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3637},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":186858,"byte_end":186890,"line_start":3769,"line_end":3769,"column_start":12,"column_end":44},"name":"replace_by_pattern_with_function","qualname":"<JsString>::replace_by_pattern_with_function","value":"fn (&self, pattern: &RegExp, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":187306,"byte_end":187312,"line_start":3780,"line_end":3780,"column_start":12,"column_end":18},"name":"search","qualname":"<JsString>::search","value":"fn (&self, pattern: &RegExp) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The search() method executes a search for a match between\n a regular expression and this String object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3643},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":187687,"byte_end":187692,"line_start":3787,"line_end":3787,"column_start":12,"column_end":17},"name":"slice","qualname":"<JsString>::slice","value":"fn (&self, start: u32, end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method extracts a section of a string and returns it as a\n new string, without modifying the original string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":188136,"byte_end":188141,"line_start":3794,"line_end":3794,"column_start":12,"column_end":17},"name":"split","qualname":"<JsString>::split","value":"fn (&self, separator: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The split() method splits a String object into an array of strings by separating the string\n into substrings, using a specified separator string to determine where to make each split.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":188387,"byte_end":188398,"line_start":3798,"line_end":3798,"column_start":12,"column_end":23},"name":"split_limit","qualname":"<JsString>::split_limit","value":"fn (&self, separator: &str, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":188656,"byte_end":188672,"line_start":3802,"line_end":3802,"column_start":12,"column_end":28},"name":"split_by_pattern","qualname":"<JsString>::split_by_pattern","value":"fn (&self, pattern: &RegExp) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3655},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":188919,"byte_end":188941,"line_start":3806,"line_end":3806,"column_start":12,"column_end":34},"name":"split_by_pattern_limit","qualname":"<JsString>::split_by_pattern_limit","value":"fn (&self, pattern: &RegExp, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":189386,"byte_end":189397,"line_start":3814,"line_end":3814,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<JsString>::starts_with","value":"fn (&self, search_string: &str, position: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `startsWith()` method determines whether a string begins with the\n characters of a specified string, returning true or false as\n appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":189792,"byte_end":189801,"line_start":3821,"line_end":3821,"column_start":12,"column_end":21},"name":"substring","qualname":"<JsString>::substring","value":"fn (&self, index_start: u32, index_end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substring()` method returns the part of the string between the\n start and end indexes, or to the end of the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":190187,"byte_end":190193,"line_start":3828,"line_end":3828,"column_start":12,"column_end":18},"name":"substr","qualname":"<JsString>::substr","value":"fn (&self, start: i32, length: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substr()` method returns the part of a string between\n the start index and a number of characters after it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3667},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":190635,"byte_end":190655,"line_start":3835,"line_end":3835,"column_start":12,"column_end":32},"name":"to_locale_lower_case","qualname":"<JsString>::to_locale_lower_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleLowerCase() method returns the calling string value converted to lower case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":191091,"byte_end":191111,"line_start":3842,"line_end":3842,"column_start":12,"column_end":32},"name":"to_locale_upper_case","qualname":"<JsString>::to_locale_upper_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toLocaleUpperCase() method returns the calling string value converted to upper case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":191486,"byte_end":191499,"line_start":3849,"line_end":3849,"column_start":12,"column_end":25},"name":"to_lower_case","qualname":"<JsString>::to_lower_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLowerCase()` method returns the calling string value\n converted to lower case.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":191837,"byte_end":191846,"line_start":3856,"line_end":3856,"column_start":12,"column_end":21},"name":"to_string","qualname":"<JsString>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3679},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":192256,"byte_end":192269,"line_start":3863,"line_end":3863,"column_start":12,"column_end":25},"name":"to_upper_case","qualname":"<JsString>::to_upper_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUpperCase()` method returns the calling string value converted to\n uppercase (the value will be converted to a string if it isn't one).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":192740,"byte_end":192744,"line_start":3872,"line_end":3872,"column_start":12,"column_end":16},"name":"trim","qualname":"<JsString>::trim","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trim()` method removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab,\n no-break space, etc.) and all the line terminator characters (LF, CR,\n etc.).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":193114,"byte_end":193122,"line_start":3879,"line_end":3879,"column_start":12,"column_end":20},"name":"trim_end","qualname":"<JsString>::trim_end","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":193494,"byte_end":193504,"line_start":3886,"line_end":3886,"column_start":12,"column_end":22},"name":"trim_right","qualname":"<JsString>::trim_right","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":193886,"byte_end":193896,"line_start":3893,"line_end":3893,"column_start":12,"column_end":22},"name":"trim_start","qualname":"<JsString>::trim_start","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string.  `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":194277,"byte_end":194286,"line_start":3900,"line_end":3900,"column_start":12,"column_end":21},"name":"trim_left","qualname":"<JsString>::trim_left","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string.  `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3697},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":194611,"byte_end":194619,"line_start":3906,"line_end":3906,"column_start":12,"column_end":20},"name":"value_of","qualname":"<JsString>::value_of","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `String` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3700},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":195041,"byte_end":195044,"line_start":3913,"line_end":3913,"column_start":12,"column_end":15},"name":"raw","qualname":"<JsString>::raw","value":"fn (call_site: &Object, substitutions: &Array) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":195514,"byte_end":195519,"line_start":3920,"line_end":3920,"column_start":12,"column_end":17},"name":"raw_0","qualname":"<JsString>::raw_0","value":"fn (call_site: &Object) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":195966,"byte_end":195971,"line_start":3927,"line_end":3927,"column_start":12,"column_end":17},"name":"raw_1","qualname":"<JsString>::raw_1","value":"fn (call_site: &Object, substitutions_1: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3709},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":196441,"byte_end":196446,"line_start":3934,"line_end":3934,"column_start":12,"column_end":17},"name":"raw_2","qualname":"<JsString>::raw_2","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3712},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":196970,"byte_end":196975,"line_start":3945,"line_end":3945,"column_start":12,"column_end":17},"name":"raw_3","qualname":"<JsString>::raw_3","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3715},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":197530,"byte_end":197535,"line_start":3957,"line_end":3957,"column_start":12,"column_end":17},"name":"raw_4","qualname":"<JsString>::raw_4","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3718},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":198121,"byte_end":198126,"line_start":3970,"line_end":3970,"column_start":12,"column_end":17},"name":"raw_5","qualname":"<JsString>::raw_5","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3721},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":198743,"byte_end":198748,"line_start":3984,"line_end":3984,"column_start":12,"column_end":17},"name":"raw_6","qualname":"<JsString>::raw_6","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":199396,"byte_end":199401,"line_start":3999,"line_end":3999,"column_start":12,"column_end":17},"name":"raw_7","qualname":"<JsString>::raw_7","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str, substitutions_7: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":173758,"byte_end":173773,"line_start":3544,"line_end":3544,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":199994,"byte_end":200002,"line_start":4018,"line_end":4018,"column_start":12,"column_end":20},"name":"try_from","qualname":"<JsString>::try_from","value":"fn (val: &JsValue) -> Option<&JsString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `JsString` value of this JS value if it's an instance of a\n string.","sig":null,"attributes":[{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":199900,"byte_end":199982,"line_start":4017,"line_end":4017,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":200927,"byte_end":200941,"line_start":4038,"line_end":4038,"column_start":12,"column_end":26},"name":"is_valid_utf16","qualname":"<JsString>::is_valid_utf16","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this string is a valid UTF-16 string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":201279,"byte_end":201283,"line_start":4047,"line_end":4047,"column_start":12,"column_end":16},"name":"iter","qualname":"<JsString>::iter","value":"fn <'a> (&'a self) -> impl ExactSizeIterator<Item = u16> + DoubleEndedIterator<Item = u16> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the `u16` character codes that make up this JS\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202052,"byte_end":202059,"line_start":4063,"line_end":4063,"column_start":12,"column_end":19},"name":"as_char","qualname":"<JsString>::as_char","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If this string consists of a single Unicode code point, then this method\n converts it into a Rust `char` without doing any allocations.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3833},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203993,"byte_end":203999,"line_start":4150,"line_end":4150,"column_start":14,"column_end":20},"name":"Symbol","qualname":"::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":3834}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3789},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":204461,"byte_end":204473,"line_start":4158,"line_end":4158,"column_start":12,"column_end":24},"name":"has_instance","qualname":"<Symbol>::has_instance","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.hasInstance` well-known symbol is used to determine\n if a constructor object recognizes an object as its instance.\n The `instanceof` operator's behavior can be customized by this symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3792},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":204940,"byte_end":204960,"line_start":4166,"line_end":4166,"column_start":12,"column_end":32},"name":"is_concat_spreadable","qualname":"<Symbol>::is_concat_spreadable","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.isConcatSpreadable` well-known symbol is used to configure\n if an object should be flattened to its array elements when using the\n `Array.prototype.concat()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3795},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":205310,"byte_end":205318,"line_start":4173,"line_end":4173,"column_start":12,"column_end":20},"name":"iterator","qualname":"<Symbol>::iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.iterator` well-known symbol specifies the default iterator\n for an object.  Used by `for...of`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3798},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":205751,"byte_end":205757,"line_start":4181,"line_end":4181,"column_start":12,"column_end":18},"name":"match_","qualname":"<Symbol>::match_","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.match` well-known symbol specifies the matching of a regular\n expression against a string. This function is called by the\n `String.prototype.match()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3801},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":206298,"byte_end":206305,"line_start":4192,"line_end":4192,"column_start":12,"column_end":19},"name":"replace","qualname":"<Symbol>::replace","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.replace` well-known symbol specifies the method that\n replaces matched substrings of a string.  This function is called by the\n `String.prototype.replace()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":206871,"byte_end":206877,"line_start":4203,"line_end":4203,"column_start":12,"column_end":18},"name":"search","qualname":"<Symbol>::search","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.search` well-known symbol specifies the method that returns\n the index within a string that matches the regular expression.  This\n function is called by the `String.prototype.search()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3807},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":207257,"byte_end":207264,"line_start":4210,"line_end":4210,"column_start":12,"column_end":19},"name":"species","qualname":"<Symbol>::species","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The well-known symbol `Symbol.species` specifies a function-valued\n property that the constructor function uses to create derived objects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":207810,"byte_end":207815,"line_start":4220,"line_end":4220,"column_start":12,"column_end":17},"name":"split","qualname":"<Symbol>::split","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.split` well-known symbol specifies the method that splits a\n string at the indices that match a regular expression.  This function is\n called by the `String.prototype.split()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":208243,"byte_end":208255,"line_start":4228,"line_end":4228,"column_start":12,"column_end":24},"name":"to_primitive","qualname":"<Symbol>::to_primitive","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toPrimitive` is a symbol that specifies a function valued\n property that is called to convert an object to a corresponding\n primitive value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":208757,"byte_end":208770,"line_start":4237,"line_end":4237,"column_start":12,"column_end":25},"name":"to_string_tag","qualname":"<Symbol>::to_string_tag","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toStringTag` well-known symbol is a string valued property\n that is used in the creation of the default string description of an\n object.  It is accessed internally by the `Object.prototype.toString()`\n method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3819},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":209227,"byte_end":209231,"line_start":4245,"line_end":4245,"column_start":12,"column_end":16},"name":"for_","qualname":"<Symbol>::for_","value":"fn (key: &str) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with\n the given key and returns it if found.\n Otherwise a new symbol gets created in the global symbol registry with this key.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":209585,"byte_end":209592,"line_start":4251,"line_end":4251,"column_start":12,"column_end":19},"name":"key_for","qualname":"<Symbol>::key_for","value":"fn (sym: &Symbol) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":209902,"byte_end":209911,"line_start":4257,"line_end":4257,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Symbol>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The toString() method returns a string representing the specified Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210372,"byte_end":210383,"line_start":4265,"line_end":4265,"column_start":12,"column_end":23},"name":"unscopables","qualname":"<Symbol>::unscopables","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The Symbol.unscopables well-known symbol is used to specify an object\n value of whose own and inherited property names are excluded from the\n with environment bindings of the associated object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210666,"byte_end":210674,"line_start":4271,"line_end":4271,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Symbol>::value_of","value":"fn (&self) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The valueOf() method returns the primitive value of a Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203870,"byte_end":203885,"line_start":4146,"line_end":4146,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210737,"byte_end":210741,"line_start":4275,"line_end":4275,"column_start":9,"column_end":13},"name":"Intl","qualname":"::Intl","value":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":3839},{"krate":0,"index":3911},{"krate":0,"index":3915},{"krate":0,"index":3913},{"krate":0,"index":3841},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3899},{"krate":0,"index":3902},{"krate":0,"index":3905},{"krate":0,"index":3908},{"krate":0,"index":3990},{"krate":0,"index":3994},{"krate":0,"index":3992},{"krate":0,"index":3917},{"krate":0,"index":3969},{"krate":0,"index":3972},{"krate":0,"index":3975},{"krate":0,"index":3978},{"krate":0,"index":3981},{"krate":0,"index":3984},{"krate":0,"index":3987},{"krate":0,"index":4069},{"krate":0,"index":4073},{"krate":0,"index":4071},{"krate":0,"index":3996},{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4054},{"krate":0,"index":4057},{"krate":0,"index":4060},{"krate":0,"index":4063},{"krate":0,"index":4066},{"krate":0,"index":4145},{"krate":0,"index":4149},{"krate":0,"index":4147},{"krate":0,"index":4075},{"krate":0,"index":4127},{"krate":0,"index":4130},{"krate":0,"index":4133},{"krate":0,"index":4136},{"krate":0,"index":4139},{"krate":0,"index":4142}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210704,"byte_end":210728,"line_start":4274,"line_end":4274,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3839},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211281,"byte_end":211302,"line_start":4287,"line_end":4287,"column_start":16,"column_end":37},"name":"get_canonical_locales","qualname":"::Intl::get_canonical_locales","value":"fn (s: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.getCanonicalLocales()` method returns an array containing\n the canonical locale names. Duplicates will be omitted and elements\n will be validated as structurally valid language tags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210779,"byte_end":210794,"line_start":4279,"line_end":4279,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":210779,"byte_end":210794,"line_start":4279,"line_end":4279,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3911},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211777,"byte_end":211785,"line_start":4299,"line_end":4299,"column_start":18,"column_end":26},"name":"Collator","qualname":"::Intl::Collator","value":"Collator {  }","parent":null,"children":[{"krate":0,"index":3912}],"decl_id":null,"docs":" The Intl.Collator object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3900},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":212135,"byte_end":212138,"line_start":4306,"line_end":4306,"column_start":16,"column_end":19},"name":"new","qualname":"<Collator>::new","value":"fn (locales: &Array, options: &Object) -> Collator","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3903},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":212593,"byte_end":212600,"line_start":4314,"line_end":4314,"column_start":16,"column_end":23},"name":"compare","qualname":"<Collator>::compare","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.compare property returns a function that\n compares two strings according to the sort order of this Collator\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213104,"byte_end":213120,"line_start":4322,"line_end":4322,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<Collator>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and collation options\n computed during initialization of this Collator object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3909},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213668,"byte_end":213688,"line_start":4331,"line_end":4331,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<Collator>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in\n collation without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":211358,"byte_end":211373,"line_start":4291,"line_end":4291,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3990},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":214199,"byte_end":214213,"line_start":4343,"line_end":4343,"column_start":18,"column_end":32},"name":"DateTimeFormat","qualname":"::Intl::DateTimeFormat","value":"DateTimeFormat {  }","parent":null,"children":[{"krate":0,"index":3991}],"decl_id":null,"docs":" The Intl.DateTimeFormat object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3976},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":214571,"byte_end":214574,"line_start":4350,"line_end":4350,"column_start":16,"column_end":19},"name":"new","qualname":"<DateTimeFormat>::new","value":"fn (locales: &Array, options: &Object) -> DateTimeFormat","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3979},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":215082,"byte_end":215088,"line_start":4358,"line_end":4358,"column_start":16,"column_end":22},"name":"format","qualname":"<DateTimeFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.format property returns a getter function that\n formats a date according to the locale and formatting options of this\n Intl.DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":215549,"byte_end":215564,"line_start":4365,"line_end":4365,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<DateTimeFormat>::format_to_parts","value":"fn (&self, date: &Date) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.formatToParts() method allows locale-aware\n formatting of strings produced by DateTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3985},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216117,"byte_end":216133,"line_start":4373,"line_end":4373,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<DateTimeFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and date and time formatting\n options computed during initialization of this DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3988},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216720,"byte_end":216740,"line_start":4382,"line_end":4382,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<DateTimeFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in date\n and time formatting without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":213772,"byte_end":213787,"line_start":4335,"line_end":4335,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4069},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":217238,"byte_end":217250,"line_start":4394,"line_end":4394,"column_start":18,"column_end":30},"name":"NumberFormat","qualname":"::Intl::NumberFormat","value":"NumberFormat {  }","parent":null,"children":[{"krate":0,"index":4070}],"decl_id":null,"docs":" The Intl.NumberFormat object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4055},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":217597,"byte_end":217600,"line_start":4401,"line_end":4401,"column_start":16,"column_end":19},"name":"new","qualname":"<NumberFormat>::new","value":"fn (locales: &Array, options: &Object) -> NumberFormat","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4058},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":218095,"byte_end":218101,"line_start":4409,"line_end":4409,"column_start":16,"column_end":22},"name":"format","qualname":"<NumberFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.format property returns a getter function that\n formats a number according to the locale and formatting options of this\n NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4061},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":218556,"byte_end":218571,"line_start":4416,"line_end":4416,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<NumberFormat>::format_to_parts","value":"fn (&self, number: f64) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Numberformat.prototype.formatToParts() method allows locale-aware\n formatting of strings produced by NumberTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4064},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219109,"byte_end":219125,"line_start":4424,"line_end":4424,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<NumberFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and number formatting\n options computed during initialization of this NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4067},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219685,"byte_end":219705,"line_start":4432,"line_end":4432,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<NumberFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in number\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":216822,"byte_end":216837,"line_start":4386,"line_end":4386,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4145},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":220217,"byte_end":220228,"line_start":4444,"line_end":4444,"column_start":18,"column_end":29},"name":"PluralRules","qualname":"::Intl::PluralRules","value":"PluralRules {  }","parent":null,"children":[{"krate":0,"index":4146}],"decl_id":null,"docs":" The Intl.PluralRules object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4134},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":220590,"byte_end":220593,"line_start":4451,"line_end":4451,"column_start":16,"column_end":19},"name":"new","qualname":"<PluralRules>::new","value":"fn (locales: &Array, options: &Object) -> PluralRules","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4137},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":221135,"byte_end":221151,"line_start":4459,"line_end":4459,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<PluralRules>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.prototype.resolvedOptions() method returns a new\n object with properties reflecting the locale and plural formatting\n options computed during initialization of this PluralRules object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4140},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":221548,"byte_end":221554,"line_start":4466,"line_end":4466,"column_start":16,"column_end":22},"name":"select","qualname":"<PluralRules>::select","value":"fn (&self, number: f64) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.prototype.select method returns a String indicating\n which plural rule to use for locale-aware formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4143},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222125,"byte_end":222145,"line_start":4474,"line_end":4474,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<PluralRules>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The Intl.PluralRules.supportedLocalesOf() method returns an array\n containing those of the provided locales that are supported in plural\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":219786,"byte_end":219801,"line_start":4436,"line_end":4436,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4236},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222585,"byte_end":222592,"line_start":4487,"line_end":4487,"column_start":14,"column_end":21},"name":"Promise","qualname":"::Promise","value":"Promise {  }","parent":null,"children":[{"krate":0,"index":4237}],"decl_id":null,"docs":" The `Promise` object represents the eventual completion (or failure) of\n an asynchronous operation, and its resulting value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4210},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":223622,"byte_end":223625,"line_start":4506,"line_end":4506,"column_start":12,"column_end":15},"name":"new","qualname":"<Promise>::new","value":"fn (cb: &mut dyn FnMut(Function, Function)) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Promise` with the provided executor `cb`","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4213},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":224154,"byte_end":224157,"line_start":4515,"line_end":4515,"column_start":12,"column_end":15},"name":"all","qualname":"<Promise>::all","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.all(iterable)` method returns a single `Promise` that\n resolves when all of the promises in the iterable argument have resolved\n or when the iterable argument contains no promises. It rejects with the\n reason of the first promise that rejects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4216},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":224591,"byte_end":224595,"line_start":4523,"line_end":4523,"column_start":12,"column_end":16},"name":"race","qualname":"<Promise>::race","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.race(iterable)` method returns a promise that resolves or\n rejects as soon as one of the promises in the iterable resolves or\n rejects, with the value or reason from that promise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4219},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":224935,"byte_end":224941,"line_start":4530,"line_end":4530,"column_start":12,"column_end":18},"name":"reject","qualname":"<Promise>::reject","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.reject(reason)` method returns a `Promise` object that is\n rejected with the given reason.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4222},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":225557,"byte_end":225564,"line_start":4540,"line_end":4540,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Promise>::resolve","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.resolve(value)` method returns a `Promise` object that is\n resolved with the given value. If the value is a promise, that promise\n is returned; if the value is a thenable (i.e. has a \"then\" method), the\n returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4225},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":226048,"byte_end":226053,"line_start":4549,"line_end":4549,"column_start":12,"column_end":17},"name":"catch","qualname":"<Promise>::catch","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `catch()` method returns a `Promise` and deals with rejected cases\n only.  It behaves the same as calling `Promise.prototype.then(undefined,\n onRejected)` (in fact, calling `obj.catch(onRejected)` internally calls\n `obj.then(undefined, onRejected)`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4228},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":226445,"byte_end":226449,"line_start":4556,"line_end":4556,"column_start":12,"column_end":16},"name":"then","qualname":"<Promise>::then","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `then()` method returns a `Promise`. It takes up to two arguments:\n callback functions for the success and failure cases of the `Promise`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4231},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":226627,"byte_end":226632,"line_start":4560,"line_end":4560,"column_start":12,"column_end":17},"name":"then2","qualname":"<Promise>::then2","value":"fn (&self, resolve: &Closure<dyn FnMut(JsValue)>, reject: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Same as `then`, only with both arguments provided.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4234},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":227408,"byte_end":227415,"line_start":4577,"line_end":4577,"column_start":12,"column_end":19},"name":"finally","qualname":"<Promise>::finally","value":"fn (&self, cb: &Closure<dyn FnMut()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `finally()` method returns a `Promise`. When the promise is settled,\n whether fulfilled or rejected, the specified callback function is\n executed. This provides a way for code that must be executed once the\n `Promise` has been dealt with to be run whether the promise was\n fulfilled successfully or rejected.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":222211,"byte_end":222226,"line_start":4479,"line_end":4479,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":227639,"byte_end":227645,"line_start":4584,"line_end":4584,"column_start":8,"column_end":14},"name":"global","qualname":"::global","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the global scope object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4490},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Int8Array","qualname":"::Int8Array","value":"Int8Array {  }","parent":null,"children":[{"krate":0,"index":4491}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4452},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Int8Array>::new","value":"fn (constructor_arg: &JsValue) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4455},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int8Array>::new_with_length","value":"fn (length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4458},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4461},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4464},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int8Array>::fill","value":"fn (&self, value: i8, start: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4467},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4470},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4473},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i8, u32, Int8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4479},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Int8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4482},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4485},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4488},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Int8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4593},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Int16Array","qualname":"::Int16Array","value":"Int16Array {  }","parent":null,"children":[{"krate":0,"index":4594}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4555},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Int16Array>::new","value":"fn (constructor_arg: &JsValue) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4558},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int16Array>::new_with_length","value":"fn (length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4561},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4564},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4567},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int16Array>::fill","value":"fn (&self, value: i16, start: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4570},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4573},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4576},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4579},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i16, u32, Int16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4582},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Int16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4585},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4588},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4591},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Int16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4696},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Int32Array","qualname":"::Int32Array","value":"Int32Array {  }","parent":null,"children":[{"krate":0,"index":4697}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4658},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Int32Array>::new","value":"fn (constructor_arg: &JsValue) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4661},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int32Array>::new_with_length","value":"fn (length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4664},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4667},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4670},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int32Array>::fill","value":"fn (&self, value: i32, start: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4673},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4679},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4682},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i32, u32, Int32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4685},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Int32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4691},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Int32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4799},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Uint8Array","qualname":"::Uint8Array","value":"Uint8Array {  }","parent":null,"children":[{"krate":0,"index":4800}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4761},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4764},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8Array>::new_with_length","value":"fn (length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4767},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4770},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4773},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8Array>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4776},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4779},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4782},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4785},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4788},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4791},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4794},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4797},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4902},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Uint8ClampedArray","qualname":"::Uint8ClampedArray","value":"Uint8ClampedArray {  }","parent":null,"children":[{"krate":0,"index":4903}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4864},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8ClampedArray>::new","value":"fn (constructor_arg: &JsValue) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8ClampedArray()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4867},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8ClampedArray>::new_with_length","value":"fn (length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4870},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8ClampedArray>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4873},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8ClampedArray>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4876},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8ClampedArray>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4879},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8ClampedArray>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4882},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8ClampedArray>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4885},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8ClampedArray>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4888},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8ClampedArray>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8ClampedArray)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4891},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8ClampedArray>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4894},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8ClampedArray>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4897},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8ClampedArray>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4900},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8ClampedArray>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5005},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Uint16Array","qualname":"::Uint16Array","value":"Uint16Array {  }","parent":null,"children":[{"krate":0,"index":5006}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4967},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint16Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4970},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint16Array>::new_with_length","value":"fn (length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4973},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4976},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4979},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint16Array>::fill","value":"fn (&self, value: u16, start: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4982},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4985},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4988},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4991},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u16, u32, Uint16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4994},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4997},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5000},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5003},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5108},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Uint32Array","qualname":"::Uint32Array","value":"Uint32Array {  }","parent":null,"children":[{"krate":0,"index":5109}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5070},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint32Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5073},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint32Array>::new_with_length","value":"fn (length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5076},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5079},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5082},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint32Array>::fill","value":"fn (&self, value: u32, start: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5085},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5088},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5091},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5094},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u32, u32, Uint32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5097},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5100},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5103},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5106},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5211},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Float32Array","qualname":"::Float32Array","value":"Float32Array {  }","parent":null,"children":[{"krate":0,"index":5212}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5173},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Float32Array>::new","value":"fn (constructor_arg: &JsValue) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5176},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float32Array>::new_with_length","value":"fn (length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5179},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5182},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5185},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float32Array>::fill","value":"fn (&self, value: f32, start: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5188},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5191},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5194},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5197},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f32, u32, Float32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5200},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Float32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5203},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5206},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5209},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Float32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5314},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"Float64Array","qualname":"::Float64Array","value":"Float64Array {  }","parent":null,"children":[{"krate":0,"index":5315}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5276},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new","qualname":"<Float64Array>::new","value":"fn (constructor_arg: &JsValue) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float64Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5279},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float64Array>::new_with_length","value":"fn (length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5282},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float64Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5285},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float64Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5288},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float64Array>::fill","value":"fn (&self, value: f64, start: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The fill() method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5291},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float64Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `buffer` accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5294},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float64Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5297},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float64Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5300},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float64Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f64, u32, Float64Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5303},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"length","qualname":"<Float64Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `length` accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float64Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteLength` accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5309},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float64Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `byteOffset` accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5312},"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24},"name":"set","qualname":"<Float64Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":230902,"byte_end":230917,"line_start":4661,"line_end":4661,"column_start":9,"column_end":24}}]}],"impls":[{"id":54,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":21984,"byte_end":21989,"line_start":429,"line_end":429,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36960,"byte_end":36967,"line_start":734,"line_end":734,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37213,"byte_end":37220,"line_start":748,"line_end":748,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37341,"byte_end":37348,"line_start":755,"line_end":755,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60092,"byte_end":60100,"line_start":1185,"line_end":1185,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":66461,"byte_end":66469,"line_start":1332,"line_end":1332,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67620,"byte_end":67624,"line_start":1384,"line_end":1384,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67785,"byte_end":67793,"line_start":1392,"line_end":1392,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":68032,"byte_end":68040,"line_start":1404,"line_end":1404,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":68181,"byte_end":68190,"line_start":1412,"line_end":1412,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88616,"byte_end":88622,"line_start":1856,"line_end":1856,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125377,"byte_end":125383,"line_start":2547,"line_end":2547,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125774,"byte_end":125780,"line_start":2562,"line_end":2562,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125911,"byte_end":125917,"line_start":2569,"line_end":2569,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":822,"kind":"Inherent","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":199692,"byte_end":199700,"line_start":4011,"line_end":4011,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":823,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202568,"byte_end":202576,"line_start":4084,"line_end":4084,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":824,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202696,"byte_end":202704,"line_start":4090,"line_end":4090,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":825,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202841,"byte_end":202849,"line_start":4096,"line_end":4096,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":826,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202993,"byte_end":203001,"line_start":4102,"line_end":4102,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":827,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203141,"byte_end":203149,"line_start":4108,"line_end":4108,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":828,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203275,"byte_end":203283,"line_start":4114,"line_end":4114,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":829,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203372,"byte_end":203380,"line_start":4120,"line_end":4120,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":830,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203529,"byte_end":203535,"line_start":4127,"line_end":4127,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":831,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203651,"byte_end":203657,"line_start":4133,"line_end":4133,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":832,"kind":"Direct","span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203747,"byte_end":203755,"line_start":4139,"line_end":4139,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":21984,"byte_end":21989,"line_start":429,"line_end":429,"column_start":40,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":325},"to":{"krate":2,"index":3804}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":36960,"byte_end":36967,"line_start":734,"line_end":734,"column_start":21,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37213,"byte_end":37220,"line_start":748,"line_end":748,"column_start":26,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":37341,"byte_end":37348,"line_start":755,"line_end":755,"column_start":21,"column_end":28},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":60092,"byte_end":60100,"line_start":1185,"line_end":1185,"column_start":6,"column_end":14},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":66461,"byte_end":66469,"line_start":1332,"line_end":1332,"column_start":6,"column_end":14},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67620,"byte_end":67624,"line_start":1384,"line_end":1384,"column_start":34,"column_end":38},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":34},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":67785,"byte_end":67793,"line_start":1392,"line_end":1392,"column_start":23,"column_end":31},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":1289},"to":{"krate":2,"index":3808}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":68032,"byte_end":68040,"line_start":1404,"line_end":1404,"column_start":30,"column_end":38},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":38},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":68181,"byte_end":68190,"line_start":1412,"line_end":1412,"column_start":6,"column_end":15},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":41},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":88616,"byte_end":88622,"line_start":1856,"line_end":1856,"column_start":21,"column_end":27},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125377,"byte_end":125383,"line_start":2547,"line_end":2547,"column_start":6,"column_end":12},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":2020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125774,"byte_end":125780,"line_start":2562,"line_end":2562,"column_start":20,"column_end":26},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":2020},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":125911,"byte_end":125917,"line_start":2569,"line_end":2569,"column_start":13,"column_end":19},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":2020},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":199692,"byte_end":199700,"line_start":4011,"line_end":4011,"column_start":6,"column_end":14},"kind":{"Impl":{"id":822}},"from":{"krate":0,"index":3726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202568,"byte_end":202576,"line_start":4084,"line_end":4084,"column_start":25,"column_end":33},"kind":{"Impl":{"id":823}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202696,"byte_end":202704,"line_start":4090,"line_end":4090,"column_start":33,"column_end":41},"kind":{"Impl":{"id":824}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202841,"byte_end":202849,"line_start":4096,"line_end":4096,"column_start":28,"column_end":36},"kind":{"Impl":{"id":825}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":202993,"byte_end":203001,"line_start":4102,"line_end":4102,"column_start":36,"column_end":44},"kind":{"Impl":{"id":826}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203141,"byte_end":203149,"line_start":4108,"line_end":4108,"column_start":28,"column_end":36},"kind":{"Impl":{"id":827}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203275,"byte_end":203283,"line_start":4114,"line_end":4114,"column_start":23,"column_end":31},"kind":{"Impl":{"id":828}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203372,"byte_end":203380,"line_start":4120,"line_end":4120,"column_start":21,"column_end":29},"kind":{"Impl":{"id":829}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203529,"byte_end":203535,"line_start":4127,"line_end":4127,"column_start":33,"column_end":39},"kind":{"Impl":{"id":830}},"from":{"krate":5,"index":4325},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203651,"byte_end":203657,"line_start":4133,"line_end":4133,"column_start":25,"column_end":31},"kind":{"Impl":{"id":831}},"from":{"krate":5,"index":4325},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/ken/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.32/src/lib.rs","byte_start":203747,"byte_end":203755,"line_start":4139,"line_end":4139,"column_start":21,"column_end":29},"kind":{"Impl":{"id":832}},"from":{"krate":0,"index":3726},"to":{"krate":2,"index":7479}}]}